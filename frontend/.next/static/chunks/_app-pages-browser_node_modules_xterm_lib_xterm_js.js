"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_xterm_lib_xterm_js"],{

/***/ "(app-pages-browser)/./node_modules/xterm/lib/xterm.js":
/*!*****************************************!*\
  !*** ./node_modules/xterm/lib/xterm.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n!function(e, t) {\n    if (true) module.exports = t();\n    else { var s, i; }\n}(self, ()=>(()=>{\n        \"use strict\";\n        var e = {\n            4567: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.AccessibilityManager = void 0;\n                const n = i(9042), o = i(6114), a = i(9924), h = i(844), c = i(5596), l = i(4725), d = i(3656);\n                let _ = t.AccessibilityManager = class extends h.Disposable {\n                    _handleTab(e) {\n                        for(let t = 0; t < e; t++)this._handleChar(\" \");\n                    }\n                    _handleChar(e) {\n                        this._liveRegionLineCount < 21 && (this._charsToConsume.length > 0 ? this._charsToConsume.shift() !== e && (this._charsToAnnounce += e) : this._charsToAnnounce += e, \"\\n\" === e && (this._liveRegionLineCount++, 21 === this._liveRegionLineCount && (this._liveRegion.textContent += n.tooMuchOutput)), o.isMac && this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode && setTimeout(()=>{\n                            this._accessibilityContainer.appendChild(this._liveRegion);\n                        }, 0));\n                    }\n                    _clearLiveRegion() {\n                        this._liveRegion.textContent = \"\", this._liveRegionLineCount = 0, o.isMac && this._liveRegion.remove();\n                    }\n                    _handleKey(e) {\n                        this._clearLiveRegion(), RegExp(\"\\\\p{Control}\", \"u\").test(e) || this._charsToConsume.push(e);\n                    }\n                    _refreshRows(e, t) {\n                        this._liveRegionDebouncer.refresh(e, t, this._terminal.rows);\n                    }\n                    _renderRows(e, t) {\n                        const i = this._terminal.buffer, s = i.lines.length.toString();\n                        for(let r = e; r <= t; r++){\n                            const e = i.translateBufferLineToString(i.ydisp + r, !0), t = (i.ydisp + r + 1).toString(), n = this._rowElements[r];\n                            n && (0 === e.length ? n.innerText = \"\\xa0\" : n.textContent = e, n.setAttribute(\"aria-posinset\", t), n.setAttribute(\"aria-setsize\", s));\n                        }\n                        this._announceCharacters();\n                    }\n                    _announceCharacters() {\n                        0 !== this._charsToAnnounce.length && (this._liveRegion.textContent += this._charsToAnnounce, this._charsToAnnounce = \"\");\n                    }\n                    _handleBoundaryFocus(e, t) {\n                        const i = e.target, s = this._rowElements[0 === t ? 1 : this._rowElements.length - 2];\n                        if (i.getAttribute(\"aria-posinset\") === (0 === t ? \"1\" : \"\".concat(this._terminal.buffer.lines.length))) return;\n                        if (e.relatedTarget !== s) return;\n                        let r, n;\n                        if (0 === t ? (r = i, n = this._rowElements.pop(), this._rowContainer.removeChild(n)) : (r = this._rowElements.shift(), n = i, this._rowContainer.removeChild(r)), r.removeEventListener(\"focus\", this._topBoundaryFocusListener), n.removeEventListener(\"focus\", this._bottomBoundaryFocusListener), 0 === t) {\n                            const e = this._createAccessibilityTreeNode();\n                            this._rowElements.unshift(e), this._rowContainer.insertAdjacentElement(\"afterbegin\", e);\n                        } else {\n                            const e = this._createAccessibilityTreeNode();\n                            this._rowElements.push(e), this._rowContainer.appendChild(e);\n                        }\n                        this._rowElements[0].addEventListener(\"focus\", this._topBoundaryFocusListener), this._rowElements[this._rowElements.length - 1].addEventListener(\"focus\", this._bottomBoundaryFocusListener), this._terminal.scrollLines(0 === t ? -1 : 1), this._rowElements[0 === t ? 1 : this._rowElements.length - 2].focus(), e.preventDefault(), e.stopImmediatePropagation();\n                    }\n                    _handleResize(e) {\n                        this._rowElements[this._rowElements.length - 1].removeEventListener(\"focus\", this._bottomBoundaryFocusListener);\n                        for(let e = this._rowContainer.children.length; e < this._terminal.rows; e++)this._rowElements[e] = this._createAccessibilityTreeNode(), this._rowContainer.appendChild(this._rowElements[e]);\n                        for(; this._rowElements.length > e;)this._rowContainer.removeChild(this._rowElements.pop());\n                        this._rowElements[this._rowElements.length - 1].addEventListener(\"focus\", this._bottomBoundaryFocusListener), this._refreshRowsDimensions();\n                    }\n                    _createAccessibilityTreeNode() {\n                        const e = document.createElement(\"div\");\n                        return e.setAttribute(\"role\", \"listitem\"), e.tabIndex = -1, this._refreshRowDimensions(e), e;\n                    }\n                    _refreshRowsDimensions() {\n                        if (this._renderService.dimensions.css.cell.height) {\n                            this._accessibilityContainer.style.width = \"\".concat(this._renderService.dimensions.css.canvas.width, \"px\"), this._rowElements.length !== this._terminal.rows && this._handleResize(this._terminal.rows);\n                            for(let e = 0; e < this._terminal.rows; e++)this._refreshRowDimensions(this._rowElements[e]);\n                        }\n                    }\n                    _refreshRowDimensions(e) {\n                        e.style.height = \"\".concat(this._renderService.dimensions.css.cell.height, \"px\");\n                    }\n                    constructor(e, t){\n                        super(), this._terminal = e, this._renderService = t, this._liveRegionLineCount = 0, this._charsToConsume = [], this._charsToAnnounce = \"\", this._accessibilityContainer = document.createElement(\"div\"), this._accessibilityContainer.classList.add(\"xterm-accessibility\"), this._rowContainer = document.createElement(\"div\"), this._rowContainer.setAttribute(\"role\", \"list\"), this._rowContainer.classList.add(\"xterm-accessibility-tree\"), this._rowElements = [];\n                        for(let e = 0; e < this._terminal.rows; e++)this._rowElements[e] = this._createAccessibilityTreeNode(), this._rowContainer.appendChild(this._rowElements[e]);\n                        if (this._topBoundaryFocusListener = (e)=>this._handleBoundaryFocus(e, 0), this._bottomBoundaryFocusListener = (e)=>this._handleBoundaryFocus(e, 1), this._rowElements[0].addEventListener(\"focus\", this._topBoundaryFocusListener), this._rowElements[this._rowElements.length - 1].addEventListener(\"focus\", this._bottomBoundaryFocusListener), this._refreshRowsDimensions(), this._accessibilityContainer.appendChild(this._rowContainer), this._liveRegion = document.createElement(\"div\"), this._liveRegion.classList.add(\"live-region\"), this._liveRegion.setAttribute(\"aria-live\", \"assertive\"), this._accessibilityContainer.appendChild(this._liveRegion), this._liveRegionDebouncer = this.register(new a.TimeBasedDebouncer(this._renderRows.bind(this))), !this._terminal.element) throw new Error(\"Cannot enable accessibility before Terminal.open\");\n                        this._terminal.element.insertAdjacentElement(\"afterbegin\", this._accessibilityContainer), this.register(this._terminal.onResize((e)=>this._handleResize(e.rows))), this.register(this._terminal.onRender((e)=>this._refreshRows(e.start, e.end))), this.register(this._terminal.onScroll(()=>this._refreshRows())), this.register(this._terminal.onA11yChar((e)=>this._handleChar(e))), this.register(this._terminal.onLineFeed(()=>this._handleChar(\"\\n\"))), this.register(this._terminal.onA11yTab((e)=>this._handleTab(e))), this.register(this._terminal.onKey((e)=>this._handleKey(e.key))), this.register(this._terminal.onBlur(()=>this._clearLiveRegion())), this.register(this._renderService.onDimensionsChange(()=>this._refreshRowsDimensions())), this._screenDprMonitor = new c.ScreenDprMonitor(window), this.register(this._screenDprMonitor), this._screenDprMonitor.setListener(()=>this._refreshRowsDimensions()), this.register((0, d.addDisposableDomListener)(window, \"resize\", ()=>this._refreshRowsDimensions())), this._refreshRows(), this.register((0, h.toDisposable)(()=>{\n                            this._accessibilityContainer.remove(), this._rowElements.length = 0;\n                        }));\n                    }\n                };\n                t.AccessibilityManager = _ = s([\n                    r(1, l.IRenderService)\n                ], _);\n            },\n            3614: (e, t)=>{\n                function i(e) {\n                    return e.replace(/\\r?\\n/g, \"\\r\");\n                }\n                function s(e, t) {\n                    return t ? \"\\x1b[200~\" + e + \"\\x1b[201~\" : e;\n                }\n                function r(e, t, r, n) {\n                    e = s(e = i(e), r.decPrivateModes.bracketedPasteMode && !0 !== n.rawOptions.ignoreBracketedPasteMode), r.triggerDataEvent(e, !0), t.value = \"\";\n                }\n                function n(e, t, i) {\n                    const s = i.getBoundingClientRect(), r = e.clientX - s.left - 10, n = e.clientY - s.top - 10;\n                    t.style.width = \"20px\", t.style.height = \"20px\", t.style.left = \"\".concat(r, \"px\"), t.style.top = \"\".concat(n, \"px\"), t.style.zIndex = \"1000\", t.focus();\n                }\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.rightClickHandler = t.moveTextAreaUnderMouseCursor = t.paste = t.handlePasteEvent = t.copyHandler = t.bracketTextForPaste = t.prepareTextForTerminal = void 0, t.prepareTextForTerminal = i, t.bracketTextForPaste = s, t.copyHandler = function(e, t) {\n                    e.clipboardData && e.clipboardData.setData(\"text/plain\", t.selectionText), e.preventDefault();\n                }, t.handlePasteEvent = function(e, t, i, s) {\n                    e.stopPropagation(), e.clipboardData && r(e.clipboardData.getData(\"text/plain\"), t, i, s);\n                }, t.paste = r, t.moveTextAreaUnderMouseCursor = n, t.rightClickHandler = function(e, t, i, s, r) {\n                    n(e, t, i), r && s.rightClickSelect(e), t.value = s.selectionText, t.select();\n                };\n            },\n            7239: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.ColorContrastCache = void 0;\n                const s = i(1505);\n                t.ColorContrastCache = class {\n                    setCss(e, t, i) {\n                        this._css.set(e, t, i);\n                    }\n                    getCss(e, t) {\n                        return this._css.get(e, t);\n                    }\n                    setColor(e, t, i) {\n                        this._color.set(e, t, i);\n                    }\n                    getColor(e, t) {\n                        return this._color.get(e, t);\n                    }\n                    clear() {\n                        this._color.clear(), this._css.clear();\n                    }\n                    constructor(){\n                        this._color = new s.TwoKeyMap, this._css = new s.TwoKeyMap;\n                    }\n                };\n            },\n            3656: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.addDisposableDomListener = void 0, t.addDisposableDomListener = function(e, t, i, s) {\n                    e.addEventListener(t, i, s);\n                    let r = !1;\n                    return {\n                        dispose: ()=>{\n                            r || (r = !0, e.removeEventListener(t, i, s));\n                        }\n                    };\n                };\n            },\n            6465: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.Linkifier2 = void 0;\n                const n = i(3656), o = i(8460), a = i(844), h = i(2585);\n                let c = t.Linkifier2 = class extends a.Disposable {\n                    get currentLink() {\n                        return this._currentLink;\n                    }\n                    registerLinkProvider(e) {\n                        return this._linkProviders.push(e), {\n                            dispose: ()=>{\n                                const t = this._linkProviders.indexOf(e);\n                                -1 !== t && this._linkProviders.splice(t, 1);\n                            }\n                        };\n                    }\n                    attachToDom(e, t, i) {\n                        this._element = e, this._mouseService = t, this._renderService = i, this.register((0, n.addDisposableDomListener)(this._element, \"mouseleave\", ()=>{\n                            this._isMouseOut = !0, this._clearCurrentLink();\n                        })), this.register((0, n.addDisposableDomListener)(this._element, \"mousemove\", this._handleMouseMove.bind(this))), this.register((0, n.addDisposableDomListener)(this._element, \"mousedown\", this._handleMouseDown.bind(this))), this.register((0, n.addDisposableDomListener)(this._element, \"mouseup\", this._handleMouseUp.bind(this)));\n                    }\n                    _handleMouseMove(e) {\n                        if (this._lastMouseEvent = e, !this._element || !this._mouseService) return;\n                        const t = this._positionFromMouseEvent(e, this._element, this._mouseService);\n                        if (!t) return;\n                        this._isMouseOut = !1;\n                        const i = e.composedPath();\n                        for(let e = 0; e < i.length; e++){\n                            const t = i[e];\n                            if (t.classList.contains(\"xterm\")) break;\n                            if (t.classList.contains(\"xterm-hover\")) return;\n                        }\n                        this._lastBufferCell && t.x === this._lastBufferCell.x && t.y === this._lastBufferCell.y || (this._handleHover(t), this._lastBufferCell = t);\n                    }\n                    _handleHover(e) {\n                        if (this._activeLine !== e.y || this._wasResized) return this._clearCurrentLink(), this._askForLink(e, !1), void (this._wasResized = !1);\n                        this._currentLink && this._linkAtPosition(this._currentLink.link, e) || (this._clearCurrentLink(), this._askForLink(e, !0));\n                    }\n                    _askForLink(e, t) {\n                        var i, s;\n                        this._activeProviderReplies && t || (null === (i = this._activeProviderReplies) || void 0 === i || i.forEach((e)=>{\n                            null == e || e.forEach((e)=>{\n                                e.link.dispose && e.link.dispose();\n                            });\n                        }), this._activeProviderReplies = new Map, this._activeLine = e.y);\n                        let r = !1;\n                        for (const [i, n] of this._linkProviders.entries())t ? (null === (s = this._activeProviderReplies) || void 0 === s ? void 0 : s.get(i)) && (r = this._checkLinkProviderResult(i, e, r)) : n.provideLinks(e.y, (t)=>{\n                            var s, n;\n                            if (this._isMouseOut) return;\n                            const o = null == t ? void 0 : t.map((e)=>({\n                                    link: e\n                                }));\n                            null === (s = this._activeProviderReplies) || void 0 === s || s.set(i, o), r = this._checkLinkProviderResult(i, e, r), (null === (n = this._activeProviderReplies) || void 0 === n ? void 0 : n.size) === this._linkProviders.length && this._removeIntersectingLinks(e.y, this._activeProviderReplies);\n                        });\n                    }\n                    _removeIntersectingLinks(e, t) {\n                        const i = new Set;\n                        for(let s = 0; s < t.size; s++){\n                            const r = t.get(s);\n                            if (r) for(let t = 0; t < r.length; t++){\n                                const s = r[t], n = s.link.range.start.y < e ? 0 : s.link.range.start.x, o = s.link.range.end.y > e ? this._bufferService.cols : s.link.range.end.x;\n                                for(let e = n; e <= o; e++){\n                                    if (i.has(e)) {\n                                        r.splice(t--, 1);\n                                        break;\n                                    }\n                                    i.add(e);\n                                }\n                            }\n                        }\n                    }\n                    _checkLinkProviderResult(e, t, i) {\n                        var s;\n                        if (!this._activeProviderReplies) return i;\n                        const r = this._activeProviderReplies.get(e);\n                        let n = !1;\n                        for(let t = 0; t < e; t++)this._activeProviderReplies.has(t) && !this._activeProviderReplies.get(t) || (n = !0);\n                        if (!n && r) {\n                            const e = r.find((e)=>this._linkAtPosition(e.link, t));\n                            e && (i = !0, this._handleNewLink(e));\n                        }\n                        if (this._activeProviderReplies.size === this._linkProviders.length && !i) for(let e = 0; e < this._activeProviderReplies.size; e++){\n                            const r = null === (s = this._activeProviderReplies.get(e)) || void 0 === s ? void 0 : s.find((e)=>this._linkAtPosition(e.link, t));\n                            if (r) {\n                                i = !0, this._handleNewLink(r);\n                                break;\n                            }\n                        }\n                        return i;\n                    }\n                    _handleMouseDown() {\n                        this._mouseDownLink = this._currentLink;\n                    }\n                    _handleMouseUp(e) {\n                        if (!this._element || !this._mouseService || !this._currentLink) return;\n                        const t = this._positionFromMouseEvent(e, this._element, this._mouseService);\n                        t && this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, t) && this._currentLink.link.activate(e, this._currentLink.link.text);\n                    }\n                    _clearCurrentLink(e, t) {\n                        this._element && this._currentLink && this._lastMouseEvent && (!e || !t || this._currentLink.link.range.start.y >= e && this._currentLink.link.range.end.y <= t) && (this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent), this._currentLink = void 0, (0, a.disposeArray)(this._linkCacheDisposables));\n                    }\n                    _handleNewLink(e) {\n                        if (!this._element || !this._lastMouseEvent || !this._mouseService) return;\n                        const t = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n                        t && this._linkAtPosition(e.link, t) && (this._currentLink = e, this._currentLink.state = {\n                            decorations: {\n                                underline: void 0 === e.link.decorations || e.link.decorations.underline,\n                                pointerCursor: void 0 === e.link.decorations || e.link.decorations.pointerCursor\n                            },\n                            isHovered: !0\n                        }, this._linkHover(this._element, e.link, this._lastMouseEvent), e.link.decorations = {}, Object.defineProperties(e.link.decorations, {\n                            pointerCursor: {\n                                get: ()=>{\n                                    var e, t;\n                                    return null === (t = null === (e = this._currentLink) || void 0 === e ? void 0 : e.state) || void 0 === t ? void 0 : t.decorations.pointerCursor;\n                                },\n                                set: (e)=>{\n                                    var t, i;\n                                    (null === (t = this._currentLink) || void 0 === t ? void 0 : t.state) && this._currentLink.state.decorations.pointerCursor !== e && (this._currentLink.state.decorations.pointerCursor = e, this._currentLink.state.isHovered && (null === (i = this._element) || void 0 === i || i.classList.toggle(\"xterm-cursor-pointer\", e)));\n                                }\n                            },\n                            underline: {\n                                get: ()=>{\n                                    var e, t;\n                                    return null === (t = null === (e = this._currentLink) || void 0 === e ? void 0 : e.state) || void 0 === t ? void 0 : t.decorations.underline;\n                                },\n                                set: (t)=>{\n                                    var i, s, r;\n                                    (null === (i = this._currentLink) || void 0 === i ? void 0 : i.state) && (null === (r = null === (s = this._currentLink) || void 0 === s ? void 0 : s.state) || void 0 === r ? void 0 : r.decorations.underline) !== t && (this._currentLink.state.decorations.underline = t, this._currentLink.state.isHovered && this._fireUnderlineEvent(e.link, t));\n                                }\n                            }\n                        }), this._renderService && this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange((e)=>{\n                            if (!this._currentLink) return;\n                            const t = 0 === e.start ? 0 : e.start + 1 + this._bufferService.buffer.ydisp, i = this._bufferService.buffer.ydisp + 1 + e.end;\n                            if (this._currentLink.link.range.start.y >= t && this._currentLink.link.range.end.y <= i && (this._clearCurrentLink(t, i), this._lastMouseEvent && this._element)) {\n                                const e = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n                                e && this._askForLink(e, !1);\n                            }\n                        })));\n                    }\n                    _linkHover(e, t, i) {\n                        var s;\n                        (null === (s = this._currentLink) || void 0 === s ? void 0 : s.state) && (this._currentLink.state.isHovered = !0, this._currentLink.state.decorations.underline && this._fireUnderlineEvent(t, !0), this._currentLink.state.decorations.pointerCursor && e.classList.add(\"xterm-cursor-pointer\")), t.hover && t.hover(i, t.text);\n                    }\n                    _fireUnderlineEvent(e, t) {\n                        const i = e.range, s = this._bufferService.buffer.ydisp, r = this._createLinkUnderlineEvent(i.start.x - 1, i.start.y - s - 1, i.end.x, i.end.y - s - 1, void 0);\n                        (t ? this._onShowLinkUnderline : this._onHideLinkUnderline).fire(r);\n                    }\n                    _linkLeave(e, t, i) {\n                        var s;\n                        (null === (s = this._currentLink) || void 0 === s ? void 0 : s.state) && (this._currentLink.state.isHovered = !1, this._currentLink.state.decorations.underline && this._fireUnderlineEvent(t, !1), this._currentLink.state.decorations.pointerCursor && e.classList.remove(\"xterm-cursor-pointer\")), t.leave && t.leave(i, t.text);\n                    }\n                    _linkAtPosition(e, t) {\n                        const i = e.range.start.y * this._bufferService.cols + e.range.start.x, s = e.range.end.y * this._bufferService.cols + e.range.end.x, r = t.y * this._bufferService.cols + t.x;\n                        return i <= r && r <= s;\n                    }\n                    _positionFromMouseEvent(e, t, i) {\n                        const s = i.getCoords(e, t, this._bufferService.cols, this._bufferService.rows);\n                        if (s) return {\n                            x: s[0],\n                            y: s[1] + this._bufferService.buffer.ydisp\n                        };\n                    }\n                    _createLinkUnderlineEvent(e, t, i, s, r) {\n                        return {\n                            x1: e,\n                            y1: t,\n                            x2: i,\n                            y2: s,\n                            cols: this._bufferService.cols,\n                            fg: r\n                        };\n                    }\n                    constructor(e){\n                        super(), this._bufferService = e, this._linkProviders = [], this._linkCacheDisposables = [], this._isMouseOut = !0, this._wasResized = !1, this._activeLine = -1, this._onShowLinkUnderline = this.register(new o.EventEmitter), this.onShowLinkUnderline = this._onShowLinkUnderline.event, this._onHideLinkUnderline = this.register(new o.EventEmitter), this.onHideLinkUnderline = this._onHideLinkUnderline.event, this.register((0, a.getDisposeArrayDisposable)(this._linkCacheDisposables)), this.register((0, a.toDisposable)(()=>{\n                            this._lastMouseEvent = void 0;\n                        })), this.register(this._bufferService.onResize(()=>{\n                            this._clearCurrentLink(), this._wasResized = !0;\n                        }));\n                    }\n                };\n                t.Linkifier2 = c = s([\n                    r(0, h.IBufferService)\n                ], c);\n            },\n            9042: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.tooMuchOutput = t.promptLabel = void 0, t.promptLabel = \"Terminal input\", t.tooMuchOutput = \"Too much output to announce, navigate to rows manually to read\";\n            },\n            3730: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.OscLinkProvider = void 0;\n                const n = i(511), o = i(2585);\n                let a = t.OscLinkProvider = class {\n                    provideLinks(e, t) {\n                        var i;\n                        const s = this._bufferService.buffer.lines.get(e - 1);\n                        if (!s) return void t(void 0);\n                        const r = [], o = this._optionsService.rawOptions.linkHandler, a = new n.CellData, c = s.getTrimmedLength();\n                        let l = -1, d = -1, _ = !1;\n                        for(let t = 0; t < c; t++)if (-1 !== d || s.hasContent(t)) {\n                            if (s.loadCell(t, a), a.hasExtendedAttrs() && a.extended.urlId) {\n                                if (-1 === d) {\n                                    d = t, l = a.extended.urlId;\n                                    continue;\n                                }\n                                _ = a.extended.urlId !== l;\n                            } else -1 !== d && (_ = !0);\n                            if (_ || -1 !== d && t === c - 1) {\n                                const s = null === (i = this._oscLinkService.getLinkData(l)) || void 0 === i ? void 0 : i.uri;\n                                if (s) {\n                                    const i = {\n                                        start: {\n                                            x: d + 1,\n                                            y: e\n                                        },\n                                        end: {\n                                            x: t + (_ || t !== c - 1 ? 0 : 1),\n                                            y: e\n                                        }\n                                    };\n                                    let n = !1;\n                                    if (!(null == o ? void 0 : o.allowNonHttpProtocols)) try {\n                                        const e = new URL(s);\n                                        [\n                                            \"http:\",\n                                            \"https:\"\n                                        ].includes(e.protocol) || (n = !0);\n                                    } catch (e) {\n                                        n = !0;\n                                    }\n                                    n || r.push({\n                                        text: s,\n                                        range: i,\n                                        activate: (e, t)=>o ? o.activate(e, t, i) : h(0, t),\n                                        hover: (e, t)=>{\n                                            var s;\n                                            return null === (s = null == o ? void 0 : o.hover) || void 0 === s ? void 0 : s.call(o, e, t, i);\n                                        },\n                                        leave: (e, t)=>{\n                                            var s;\n                                            return null === (s = null == o ? void 0 : o.leave) || void 0 === s ? void 0 : s.call(o, e, t, i);\n                                        }\n                                    });\n                                }\n                                _ = !1, a.hasExtendedAttrs() && a.extended.urlId ? (d = t, l = a.extended.urlId) : (d = -1, l = -1);\n                            }\n                        }\n                        t(r);\n                    }\n                    constructor(e, t, i){\n                        this._bufferService = e, this._optionsService = t, this._oscLinkService = i;\n                    }\n                };\n                function h(e, t) {\n                    if (confirm(\"Do you want to navigate to \".concat(t, \"?\\n\\nWARNING: This link could potentially be dangerous\"))) {\n                        const e = window.open();\n                        if (e) {\n                            try {\n                                e.opener = null;\n                            } catch (e) {}\n                            e.location.href = t;\n                        } else console.warn(\"Opening link blocked as opener could not be cleared\");\n                    }\n                }\n                t.OscLinkProvider = a = s([\n                    r(0, o.IBufferService),\n                    r(1, o.IOptionsService),\n                    r(2, o.IOscLinkService)\n                ], a);\n            },\n            6193: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.RenderDebouncer = void 0, t.RenderDebouncer = class {\n                    dispose() {\n                        this._animationFrame && (this._parentWindow.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);\n                    }\n                    addRefreshCallback(e) {\n                        return this._refreshCallbacks.push(e), this._animationFrame || (this._animationFrame = this._parentWindow.requestAnimationFrame(()=>this._innerRefresh())), this._animationFrame;\n                    }\n                    refresh(e, t, i) {\n                        this._rowCount = i, e = void 0 !== e ? e : 0, t = void 0 !== t ? t : this._rowCount - 1, this._rowStart = void 0 !== this._rowStart ? Math.min(this._rowStart, e) : e, this._rowEnd = void 0 !== this._rowEnd ? Math.max(this._rowEnd, t) : t, this._animationFrame || (this._animationFrame = this._parentWindow.requestAnimationFrame(()=>this._innerRefresh()));\n                    }\n                    _innerRefresh() {\n                        if (this._animationFrame = void 0, void 0 === this._rowStart || void 0 === this._rowEnd || void 0 === this._rowCount) return void this._runRefreshCallbacks();\n                        const e = Math.max(this._rowStart, 0), t = Math.min(this._rowEnd, this._rowCount - 1);\n                        this._rowStart = void 0, this._rowEnd = void 0, this._renderCallback(e, t), this._runRefreshCallbacks();\n                    }\n                    _runRefreshCallbacks() {\n                        for (const e of this._refreshCallbacks)e(0);\n                        this._refreshCallbacks = [];\n                    }\n                    constructor(e, t){\n                        this._parentWindow = e, this._renderCallback = t, this._refreshCallbacks = [];\n                    }\n                };\n            },\n            5596: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.ScreenDprMonitor = void 0;\n                const s = i(844);\n                class r extends s.Disposable {\n                    setListener(e) {\n                        this._listener && this.clearListener(), this._listener = e, this._outerListener = ()=>{\n                            this._listener && (this._listener(this._parentWindow.devicePixelRatio, this._currentDevicePixelRatio), this._updateDpr());\n                        }, this._updateDpr();\n                    }\n                    _updateDpr() {\n                        var e;\n                        this._outerListener && (null === (e = this._resolutionMediaMatchList) || void 0 === e || e.removeListener(this._outerListener), this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio, this._resolutionMediaMatchList = this._parentWindow.matchMedia(\"screen and (resolution: \".concat(this._parentWindow.devicePixelRatio, \"dppx)\")), this._resolutionMediaMatchList.addListener(this._outerListener));\n                    }\n                    clearListener() {\n                        this._resolutionMediaMatchList && this._listener && this._outerListener && (this._resolutionMediaMatchList.removeListener(this._outerListener), this._resolutionMediaMatchList = void 0, this._listener = void 0, this._outerListener = void 0);\n                    }\n                    constructor(e){\n                        super(), this._parentWindow = e, this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio, this.register((0, s.toDisposable)(()=>{\n                            this.clearListener();\n                        }));\n                    }\n                }\n                t.ScreenDprMonitor = r;\n            },\n            3236: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.Terminal = void 0;\n                const s = i(3614), r = i(3656), n = i(6465), o = i(9042), a = i(3730), h = i(1680), c = i(3107), l = i(5744), d = i(2950), _ = i(1296), u = i(428), f = i(4269), v = i(5114), p = i(8934), g = i(3230), m = i(9312), S = i(4725), C = i(6731), b = i(8055), y = i(8969), w = i(8460), E = i(844), k = i(6114), L = i(8437), D = i(2584), R = i(7399), x = i(5941), A = i(9074), B = i(2585), T = i(5435), M = i(4567), O =  true ? window.document : 0;\n                class P extends y.CoreTerminal {\n                    get onFocus() {\n                        return this._onFocus.event;\n                    }\n                    get onBlur() {\n                        return this._onBlur.event;\n                    }\n                    get onA11yChar() {\n                        return this._onA11yCharEmitter.event;\n                    }\n                    get onA11yTab() {\n                        return this._onA11yTabEmitter.event;\n                    }\n                    get onWillOpen() {\n                        return this._onWillOpen.event;\n                    }\n                    _handleColorEvent(e) {\n                        if (this._themeService) for (const t of e){\n                            let e, i = \"\";\n                            switch(t.index){\n                                case 256:\n                                    e = \"foreground\", i = \"10\";\n                                    break;\n                                case 257:\n                                    e = \"background\", i = \"11\";\n                                    break;\n                                case 258:\n                                    e = \"cursor\", i = \"12\";\n                                    break;\n                                default:\n                                    e = \"ansi\", i = \"4;\" + t.index;\n                            }\n                            switch(t.type){\n                                case 0:\n                                    const s = b.color.toColorRGB(\"ansi\" === e ? this._themeService.colors.ansi[t.index] : this._themeService.colors[e]);\n                                    this.coreService.triggerDataEvent(\"\".concat(D.C0.ESC, \"]\").concat(i, \";\").concat((0, x.toRgbString)(s)).concat(D.C1_ESCAPED.ST));\n                                    break;\n                                case 1:\n                                    if (\"ansi\" === e) this._themeService.modifyColors((e)=>e.ansi[t.index] = b.rgba.toColor(...t.color));\n                                    else {\n                                        const i = e;\n                                        this._themeService.modifyColors((e)=>e[i] = b.rgba.toColor(...t.color));\n                                    }\n                                    break;\n                                case 2:\n                                    this._themeService.restoreColor(t.index);\n                            }\n                        }\n                    }\n                    _setup() {\n                        super._setup(), this._customKeyEventHandler = void 0;\n                    }\n                    get buffer() {\n                        return this.buffers.active;\n                    }\n                    focus() {\n                        this.textarea && this.textarea.focus({\n                            preventScroll: !0\n                        });\n                    }\n                    _handleScreenReaderModeOptionChange(e) {\n                        e ? !this._accessibilityManager.value && this._renderService && (this._accessibilityManager.value = this._instantiationService.createInstance(M.AccessibilityManager, this)) : this._accessibilityManager.clear();\n                    }\n                    _handleTextAreaFocus(e) {\n                        this.coreService.decPrivateModes.sendFocus && this.coreService.triggerDataEvent(D.C0.ESC + \"[I\"), this.updateCursorStyle(e), this.element.classList.add(\"focus\"), this._showCursor(), this._onFocus.fire();\n                    }\n                    blur() {\n                        var e;\n                        return null === (e = this.textarea) || void 0 === e ? void 0 : e.blur();\n                    }\n                    _handleTextAreaBlur() {\n                        this.textarea.value = \"\", this.refresh(this.buffer.y, this.buffer.y), this.coreService.decPrivateModes.sendFocus && this.coreService.triggerDataEvent(D.C0.ESC + \"[O\"), this.element.classList.remove(\"focus\"), this._onBlur.fire();\n                    }\n                    _syncTextArea() {\n                        if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper.isComposing || !this._renderService) return;\n                        const e = this.buffer.ybase + this.buffer.y, t = this.buffer.lines.get(e);\n                        if (!t) return;\n                        const i = Math.min(this.buffer.x, this.cols - 1), s = this._renderService.dimensions.css.cell.height, r = t.getWidth(i), n = this._renderService.dimensions.css.cell.width * r, o = this.buffer.y * this._renderService.dimensions.css.cell.height, a = i * this._renderService.dimensions.css.cell.width;\n                        this.textarea.style.left = a + \"px\", this.textarea.style.top = o + \"px\", this.textarea.style.width = n + \"px\", this.textarea.style.height = s + \"px\", this.textarea.style.lineHeight = s + \"px\", this.textarea.style.zIndex = \"-5\";\n                    }\n                    _initGlobal() {\n                        this._bindKeys(), this.register((0, r.addDisposableDomListener)(this.element, \"copy\", (e)=>{\n                            this.hasSelection() && (0, s.copyHandler)(e, this._selectionService);\n                        }));\n                        const e = (e)=>(0, s.handlePasteEvent)(e, this.textarea, this.coreService, this.optionsService);\n                        this.register((0, r.addDisposableDomListener)(this.textarea, \"paste\", e)), this.register((0, r.addDisposableDomListener)(this.element, \"paste\", e)), k.isFirefox ? this.register((0, r.addDisposableDomListener)(this.element, \"mousedown\", (e)=>{\n                            2 === e.button && (0, s.rightClickHandler)(e, this.textarea, this.screenElement, this._selectionService, this.options.rightClickSelectsWord);\n                        })) : this.register((0, r.addDisposableDomListener)(this.element, \"contextmenu\", (e)=>{\n                            (0, s.rightClickHandler)(e, this.textarea, this.screenElement, this._selectionService, this.options.rightClickSelectsWord);\n                        })), k.isLinux && this.register((0, r.addDisposableDomListener)(this.element, \"auxclick\", (e)=>{\n                            1 === e.button && (0, s.moveTextAreaUnderMouseCursor)(e, this.textarea, this.screenElement);\n                        }));\n                    }\n                    _bindKeys() {\n                        this.register((0, r.addDisposableDomListener)(this.textarea, \"keyup\", (e)=>this._keyUp(e), !0)), this.register((0, r.addDisposableDomListener)(this.textarea, \"keydown\", (e)=>this._keyDown(e), !0)), this.register((0, r.addDisposableDomListener)(this.textarea, \"keypress\", (e)=>this._keyPress(e), !0)), this.register((0, r.addDisposableDomListener)(this.textarea, \"compositionstart\", ()=>this._compositionHelper.compositionstart())), this.register((0, r.addDisposableDomListener)(this.textarea, \"compositionupdate\", (e)=>this._compositionHelper.compositionupdate(e))), this.register((0, r.addDisposableDomListener)(this.textarea, \"compositionend\", ()=>this._compositionHelper.compositionend())), this.register((0, r.addDisposableDomListener)(this.textarea, \"input\", (e)=>this._inputEvent(e), !0)), this.register(this.onRender(()=>this._compositionHelper.updateCompositionElements()));\n                    }\n                    open(e) {\n                        var t;\n                        if (!e) throw new Error(\"Terminal requires a parent element.\");\n                        e.isConnected || this._logService.debug(\"Terminal.open was called on an element that was not attached to the DOM\"), this._document = e.ownerDocument, this.element = this._document.createElement(\"div\"), this.element.dir = \"ltr\", this.element.classList.add(\"terminal\"), this.element.classList.add(\"xterm\"), e.appendChild(this.element);\n                        const i = O.createDocumentFragment();\n                        this._viewportElement = O.createElement(\"div\"), this._viewportElement.classList.add(\"xterm-viewport\"), i.appendChild(this._viewportElement), this._viewportScrollArea = O.createElement(\"div\"), this._viewportScrollArea.classList.add(\"xterm-scroll-area\"), this._viewportElement.appendChild(this._viewportScrollArea), this.screenElement = O.createElement(\"div\"), this.screenElement.classList.add(\"xterm-screen\"), this._helperContainer = O.createElement(\"div\"), this._helperContainer.classList.add(\"xterm-helpers\"), this.screenElement.appendChild(this._helperContainer), i.appendChild(this.screenElement), this.textarea = O.createElement(\"textarea\"), this.textarea.classList.add(\"xterm-helper-textarea\"), this.textarea.setAttribute(\"aria-label\", o.promptLabel), k.isChromeOS || this.textarea.setAttribute(\"aria-multiline\", \"false\"), this.textarea.setAttribute(\"autocorrect\", \"off\"), this.textarea.setAttribute(\"autocapitalize\", \"off\"), this.textarea.setAttribute(\"spellcheck\", \"false\"), this.textarea.tabIndex = 0, this._coreBrowserService = this._instantiationService.createInstance(v.CoreBrowserService, this.textarea, null !== (t = this._document.defaultView) && void 0 !== t ? t : window), this._instantiationService.setService(S.ICoreBrowserService, this._coreBrowserService), this.register((0, r.addDisposableDomListener)(this.textarea, \"focus\", (e)=>this._handleTextAreaFocus(e))), this.register((0, r.addDisposableDomListener)(this.textarea, \"blur\", ()=>this._handleTextAreaBlur())), this._helperContainer.appendChild(this.textarea), this._charSizeService = this._instantiationService.createInstance(u.CharSizeService, this._document, this._helperContainer), this._instantiationService.setService(S.ICharSizeService, this._charSizeService), this._themeService = this._instantiationService.createInstance(C.ThemeService), this._instantiationService.setService(S.IThemeService, this._themeService), this._characterJoinerService = this._instantiationService.createInstance(f.CharacterJoinerService), this._instantiationService.setService(S.ICharacterJoinerService, this._characterJoinerService), this._renderService = this.register(this._instantiationService.createInstance(g.RenderService, this.rows, this.screenElement)), this._instantiationService.setService(S.IRenderService, this._renderService), this.register(this._renderService.onRenderedViewportChange((e)=>this._onRender.fire(e))), this.onResize((e)=>this._renderService.resize(e.cols, e.rows)), this._compositionView = O.createElement(\"div\"), this._compositionView.classList.add(\"composition-view\"), this._compositionHelper = this._instantiationService.createInstance(d.CompositionHelper, this.textarea, this._compositionView), this._helperContainer.appendChild(this._compositionView), this.element.appendChild(i);\n                        try {\n                            this._onWillOpen.fire(this.element);\n                        } catch (e) {}\n                        this._renderService.hasRenderer() || this._renderService.setRenderer(this._createRenderer()), this._mouseService = this._instantiationService.createInstance(p.MouseService), this._instantiationService.setService(S.IMouseService, this._mouseService), this.viewport = this._instantiationService.createInstance(h.Viewport, this._viewportElement, this._viewportScrollArea), this.viewport.onRequestScrollLines((e)=>this.scrollLines(e.amount, e.suppressScrollEvent, 1)), this.register(this._inputHandler.onRequestSyncScrollBar(()=>this.viewport.syncScrollArea())), this.register(this.viewport), this.register(this.onCursorMove(()=>{\n                            this._renderService.handleCursorMove(), this._syncTextArea();\n                        })), this.register(this.onResize(()=>this._renderService.handleResize(this.cols, this.rows))), this.register(this.onBlur(()=>this._renderService.handleBlur())), this.register(this.onFocus(()=>this._renderService.handleFocus())), this.register(this._renderService.onDimensionsChange(()=>this.viewport.syncScrollArea())), this._selectionService = this.register(this._instantiationService.createInstance(m.SelectionService, this.element, this.screenElement, this.linkifier2)), this._instantiationService.setService(S.ISelectionService, this._selectionService), this.register(this._selectionService.onRequestScrollLines((e)=>this.scrollLines(e.amount, e.suppressScrollEvent))), this.register(this._selectionService.onSelectionChange(()=>this._onSelectionChange.fire())), this.register(this._selectionService.onRequestRedraw((e)=>this._renderService.handleSelectionChanged(e.start, e.end, e.columnSelectMode))), this.register(this._selectionService.onLinuxMouseSelection((e)=>{\n                            this.textarea.value = e, this.textarea.focus(), this.textarea.select();\n                        })), this.register(this._onScroll.event((e)=>{\n                            this.viewport.syncScrollArea(), this._selectionService.refresh();\n                        })), this.register((0, r.addDisposableDomListener)(this._viewportElement, \"scroll\", ()=>this._selectionService.refresh())), this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService), this.register(this._instantiationService.createInstance(c.BufferDecorationRenderer, this.screenElement)), this.register((0, r.addDisposableDomListener)(this.element, \"mousedown\", (e)=>this._selectionService.handleMouseDown(e))), this.coreMouseService.areMouseEventsActive ? (this._selectionService.disable(), this.element.classList.add(\"enable-mouse-events\")) : this._selectionService.enable(), this.options.screenReaderMode && (this._accessibilityManager.value = this._instantiationService.createInstance(M.AccessibilityManager, this)), this.register(this.optionsService.onSpecificOptionChange(\"screenReaderMode\", (e)=>this._handleScreenReaderModeOptionChange(e))), this.options.overviewRulerWidth && (this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(l.OverviewRulerRenderer, this._viewportElement, this.screenElement))), this.optionsService.onSpecificOptionChange(\"overviewRulerWidth\", (e)=>{\n                            !this._overviewRulerRenderer && e && this._viewportElement && this.screenElement && (this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(l.OverviewRulerRenderer, this._viewportElement, this.screenElement)));\n                        }), this._charSizeService.measure(), this.refresh(0, this.rows - 1), this._initGlobal(), this.bindMouse();\n                    }\n                    _createRenderer() {\n                        return this._instantiationService.createInstance(_.DomRenderer, this.element, this.screenElement, this._viewportElement, this.linkifier2);\n                    }\n                    bindMouse() {\n                        const e = this, t = this.element;\n                        function i(t) {\n                            const i = e._mouseService.getMouseReportCoords(t, e.screenElement);\n                            if (!i) return !1;\n                            let s, r;\n                            switch(t.overrideType || t.type){\n                                case \"mousemove\":\n                                    r = 32, void 0 === t.buttons ? (s = 3, void 0 !== t.button && (s = t.button < 3 ? t.button : 3)) : s = 1 & t.buttons ? 0 : 4 & t.buttons ? 1 : 2 & t.buttons ? 2 : 3;\n                                    break;\n                                case \"mouseup\":\n                                    r = 0, s = t.button < 3 ? t.button : 3;\n                                    break;\n                                case \"mousedown\":\n                                    r = 1, s = t.button < 3 ? t.button : 3;\n                                    break;\n                                case \"wheel\":\n                                    if (0 === e.viewport.getLinesScrolled(t)) return !1;\n                                    r = t.deltaY < 0 ? 0 : 1, s = 4;\n                                    break;\n                                default:\n                                    return !1;\n                            }\n                            return !(void 0 === r || void 0 === s || s > 4) && e.coreMouseService.triggerMouseEvent({\n                                col: i.col,\n                                row: i.row,\n                                x: i.x,\n                                y: i.y,\n                                button: s,\n                                action: r,\n                                ctrl: t.ctrlKey,\n                                alt: t.altKey,\n                                shift: t.shiftKey\n                            });\n                        }\n                        const s = {\n                            mouseup: null,\n                            wheel: null,\n                            mousedrag: null,\n                            mousemove: null\n                        }, n = {\n                            mouseup: (e)=>(i(e), e.buttons || (this._document.removeEventListener(\"mouseup\", s.mouseup), s.mousedrag && this._document.removeEventListener(\"mousemove\", s.mousedrag)), this.cancel(e)),\n                            wheel: (e)=>(i(e), this.cancel(e, !0)),\n                            mousedrag: (e)=>{\n                                e.buttons && i(e);\n                            },\n                            mousemove: (e)=>{\n                                e.buttons || i(e);\n                            }\n                        };\n                        this.register(this.coreMouseService.onProtocolChange((e)=>{\n                            e ? (\"debug\" === this.optionsService.rawOptions.logLevel && this._logService.debug(\"Binding to mouse events:\", this.coreMouseService.explainEvents(e)), this.element.classList.add(\"enable-mouse-events\"), this._selectionService.disable()) : (this._logService.debug(\"Unbinding from mouse events.\"), this.element.classList.remove(\"enable-mouse-events\"), this._selectionService.enable()), 8 & e ? s.mousemove || (t.addEventListener(\"mousemove\", n.mousemove), s.mousemove = n.mousemove) : (t.removeEventListener(\"mousemove\", s.mousemove), s.mousemove = null), 16 & e ? s.wheel || (t.addEventListener(\"wheel\", n.wheel, {\n                                passive: !1\n                            }), s.wheel = n.wheel) : (t.removeEventListener(\"wheel\", s.wheel), s.wheel = null), 2 & e ? s.mouseup || (t.addEventListener(\"mouseup\", n.mouseup), s.mouseup = n.mouseup) : (this._document.removeEventListener(\"mouseup\", s.mouseup), t.removeEventListener(\"mouseup\", s.mouseup), s.mouseup = null), 4 & e ? s.mousedrag || (s.mousedrag = n.mousedrag) : (this._document.removeEventListener(\"mousemove\", s.mousedrag), s.mousedrag = null);\n                        })), this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol, this.register((0, r.addDisposableDomListener)(t, \"mousedown\", (e)=>{\n                            if (e.preventDefault(), this.focus(), this.coreMouseService.areMouseEventsActive && !this._selectionService.shouldForceSelection(e)) return i(e), s.mouseup && this._document.addEventListener(\"mouseup\", s.mouseup), s.mousedrag && this._document.addEventListener(\"mousemove\", s.mousedrag), this.cancel(e);\n                        })), this.register((0, r.addDisposableDomListener)(t, \"wheel\", (e)=>{\n                            if (!s.wheel) {\n                                if (!this.buffer.hasScrollback) {\n                                    const t = this.viewport.getLinesScrolled(e);\n                                    if (0 === t) return;\n                                    const i = D.C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? \"O\" : \"[\") + (e.deltaY < 0 ? \"A\" : \"B\");\n                                    let s = \"\";\n                                    for(let e = 0; e < Math.abs(t); e++)s += i;\n                                    return this.coreService.triggerDataEvent(s, !0), this.cancel(e, !0);\n                                }\n                                return this.viewport.handleWheel(e) ? this.cancel(e) : void 0;\n                            }\n                        }, {\n                            passive: !1\n                        })), this.register((0, r.addDisposableDomListener)(t, \"touchstart\", (e)=>{\n                            if (!this.coreMouseService.areMouseEventsActive) return this.viewport.handleTouchStart(e), this.cancel(e);\n                        }, {\n                            passive: !0\n                        })), this.register((0, r.addDisposableDomListener)(t, \"touchmove\", (e)=>{\n                            if (!this.coreMouseService.areMouseEventsActive) return this.viewport.handleTouchMove(e) ? void 0 : this.cancel(e);\n                        }, {\n                            passive: !1\n                        }));\n                    }\n                    refresh(e, t) {\n                        var i;\n                        null === (i = this._renderService) || void 0 === i || i.refreshRows(e, t);\n                    }\n                    updateCursorStyle(e) {\n                        var t;\n                        (null === (t = this._selectionService) || void 0 === t ? void 0 : t.shouldColumnSelect(e)) ? this.element.classList.add(\"column-select\") : this.element.classList.remove(\"column-select\");\n                    }\n                    _showCursor() {\n                        this.coreService.isCursorInitialized || (this.coreService.isCursorInitialized = !0, this.refresh(this.buffer.y, this.buffer.y));\n                    }\n                    scrollLines(e, t) {\n                        let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n                        var s;\n                        1 === i ? (super.scrollLines(e, t, i), this.refresh(0, this.rows - 1)) : null === (s = this.viewport) || void 0 === s || s.scrollLines(e);\n                    }\n                    paste(e) {\n                        (0, s.paste)(e, this.textarea, this.coreService, this.optionsService);\n                    }\n                    attachCustomKeyEventHandler(e) {\n                        this._customKeyEventHandler = e;\n                    }\n                    registerLinkProvider(e) {\n                        return this.linkifier2.registerLinkProvider(e);\n                    }\n                    registerCharacterJoiner(e) {\n                        if (!this._characterJoinerService) throw new Error(\"Terminal must be opened first\");\n                        const t = this._characterJoinerService.register(e);\n                        return this.refresh(0, this.rows - 1), t;\n                    }\n                    deregisterCharacterJoiner(e) {\n                        if (!this._characterJoinerService) throw new Error(\"Terminal must be opened first\");\n                        this._characterJoinerService.deregister(e) && this.refresh(0, this.rows - 1);\n                    }\n                    get markers() {\n                        return this.buffer.markers;\n                    }\n                    registerMarker(e) {\n                        return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + e);\n                    }\n                    registerDecoration(e) {\n                        return this._decorationService.registerDecoration(e);\n                    }\n                    hasSelection() {\n                        return !!this._selectionService && this._selectionService.hasSelection;\n                    }\n                    select(e, t, i) {\n                        this._selectionService.setSelection(e, t, i);\n                    }\n                    getSelection() {\n                        return this._selectionService ? this._selectionService.selectionText : \"\";\n                    }\n                    getSelectionPosition() {\n                        if (this._selectionService && this._selectionService.hasSelection) return {\n                            start: {\n                                x: this._selectionService.selectionStart[0],\n                                y: this._selectionService.selectionStart[1]\n                            },\n                            end: {\n                                x: this._selectionService.selectionEnd[0],\n                                y: this._selectionService.selectionEnd[1]\n                            }\n                        };\n                    }\n                    clearSelection() {\n                        var e;\n                        null === (e = this._selectionService) || void 0 === e || e.clearSelection();\n                    }\n                    selectAll() {\n                        var e;\n                        null === (e = this._selectionService) || void 0 === e || e.selectAll();\n                    }\n                    selectLines(e, t) {\n                        var i;\n                        null === (i = this._selectionService) || void 0 === i || i.selectLines(e, t);\n                    }\n                    _keyDown(e) {\n                        if (this._keyDownHandled = !1, this._keyDownSeen = !0, this._customKeyEventHandler && !1 === this._customKeyEventHandler(e)) return !1;\n                        const t = this.browser.isMac && this.options.macOptionIsMeta && e.altKey;\n                        if (!t && !this._compositionHelper.keydown(e)) return this.options.scrollOnUserInput && this.buffer.ybase !== this.buffer.ydisp && this.scrollToBottom(), !1;\n                        t || \"Dead\" !== e.key && \"AltGraph\" !== e.key || (this._unprocessedDeadKey = !0);\n                        const i = (0, R.evaluateKeyboardEvent)(e, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n                        if (this.updateCursorStyle(e), 3 === i.type || 2 === i.type) {\n                            const t = this.rows - 1;\n                            return this.scrollLines(2 === i.type ? -t : t), this.cancel(e, !0);\n                        }\n                        return 1 === i.type && this.selectAll(), !!this._isThirdLevelShift(this.browser, e) || (i.cancel && this.cancel(e, !0), !i.key || !!(e.key && !e.ctrlKey && !e.altKey && !e.metaKey && 1 === e.key.length && e.key.charCodeAt(0) >= 65 && e.key.charCodeAt(0) <= 90) || (this._unprocessedDeadKey ? (this._unprocessedDeadKey = !1, !0) : (i.key !== D.C0.ETX && i.key !== D.C0.CR || (this.textarea.value = \"\"), this._onKey.fire({\n                            key: i.key,\n                            domEvent: e\n                        }), this._showCursor(), this.coreService.triggerDataEvent(i.key, !0), !this.optionsService.rawOptions.screenReaderMode || e.altKey || e.ctrlKey ? this.cancel(e, !0) : void (this._keyDownHandled = !0))));\n                    }\n                    _isThirdLevelShift(e, t) {\n                        const i = e.isMac && !this.options.macOptionIsMeta && t.altKey && !t.ctrlKey && !t.metaKey || e.isWindows && t.altKey && t.ctrlKey && !t.metaKey || e.isWindows && t.getModifierState(\"AltGraph\");\n                        return \"keypress\" === t.type ? i : i && (!t.keyCode || t.keyCode > 47);\n                    }\n                    _keyUp(e) {\n                        this._keyDownSeen = !1, this._customKeyEventHandler && !1 === this._customKeyEventHandler(e) || (function(e) {\n                            return 16 === e.keyCode || 17 === e.keyCode || 18 === e.keyCode;\n                        }(e) || this.focus(), this.updateCursorStyle(e), this._keyPressHandled = !1);\n                    }\n                    _keyPress(e) {\n                        let t;\n                        if (this._keyPressHandled = !1, this._keyDownHandled) return !1;\n                        if (this._customKeyEventHandler && !1 === this._customKeyEventHandler(e)) return !1;\n                        if (this.cancel(e), e.charCode) t = e.charCode;\n                        else if (null === e.which || void 0 === e.which) t = e.keyCode;\n                        else {\n                            if (0 === e.which || 0 === e.charCode) return !1;\n                            t = e.which;\n                        }\n                        return !(!t || (e.altKey || e.ctrlKey || e.metaKey) && !this._isThirdLevelShift(this.browser, e) || (t = String.fromCharCode(t), this._onKey.fire({\n                            key: t,\n                            domEvent: e\n                        }), this._showCursor(), this.coreService.triggerDataEvent(t, !0), this._keyPressHandled = !0, this._unprocessedDeadKey = !1, 0));\n                    }\n                    _inputEvent(e) {\n                        if (e.data && \"insertText\" === e.inputType && (!e.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {\n                            if (this._keyPressHandled) return !1;\n                            this._unprocessedDeadKey = !1;\n                            const t = e.data;\n                            return this.coreService.triggerDataEvent(t, !0), this.cancel(e), !0;\n                        }\n                        return !1;\n                    }\n                    resize(e, t) {\n                        e !== this.cols || t !== this.rows ? super.resize(e, t) : this._charSizeService && !this._charSizeService.hasValidSize && this._charSizeService.measure();\n                    }\n                    _afterResize(e, t) {\n                        var i, s;\n                        null === (i = this._charSizeService) || void 0 === i || i.measure(), null === (s = this.viewport) || void 0 === s || s.syncScrollArea(!0);\n                    }\n                    clear() {\n                        var e;\n                        if (0 !== this.buffer.ybase || 0 !== this.buffer.y) {\n                            this.buffer.clearAllMarkers(), this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)), this.buffer.lines.length = 1, this.buffer.ydisp = 0, this.buffer.ybase = 0, this.buffer.y = 0;\n                            for(let e = 1; e < this.rows; e++)this.buffer.lines.push(this.buffer.getBlankLine(L.DEFAULT_ATTR_DATA));\n                            this._onScroll.fire({\n                                position: this.buffer.ydisp,\n                                source: 0\n                            }), null === (e = this.viewport) || void 0 === e || e.reset(), this.refresh(0, this.rows - 1);\n                        }\n                    }\n                    reset() {\n                        var e, t;\n                        this.options.rows = this.rows, this.options.cols = this.cols;\n                        const i = this._customKeyEventHandler;\n                        this._setup(), super.reset(), null === (e = this._selectionService) || void 0 === e || e.reset(), this._decorationService.reset(), null === (t = this.viewport) || void 0 === t || t.reset(), this._customKeyEventHandler = i, this.refresh(0, this.rows - 1);\n                    }\n                    clearTextureAtlas() {\n                        var e;\n                        null === (e = this._renderService) || void 0 === e || e.clearTextureAtlas();\n                    }\n                    _reportFocus() {\n                        var e;\n                        (null === (e = this.element) || void 0 === e ? void 0 : e.classList.contains(\"focus\")) ? this.coreService.triggerDataEvent(D.C0.ESC + \"[I\") : this.coreService.triggerDataEvent(D.C0.ESC + \"[O\");\n                    }\n                    _reportWindowsOptions(e) {\n                        if (this._renderService) switch(e){\n                            case T.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n                                const e1 = this._renderService.dimensions.css.canvas.width.toFixed(0), t = this._renderService.dimensions.css.canvas.height.toFixed(0);\n                                this.coreService.triggerDataEvent(\"\".concat(D.C0.ESC, \"[4;\").concat(t, \";\").concat(e1, \"t\"));\n                                break;\n                            case T.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n                                const i = this._renderService.dimensions.css.cell.width.toFixed(0), s = this._renderService.dimensions.css.cell.height.toFixed(0);\n                                this.coreService.triggerDataEvent(\"\".concat(D.C0.ESC, \"[6;\").concat(s, \";\").concat(i, \"t\"));\n                        }\n                    }\n                    cancel(e, t) {\n                        if (this.options.cancelEvents || t) return e.preventDefault(), e.stopPropagation(), !1;\n                    }\n                    constructor(e = {}){\n                        super(e), this.browser = k, this._keyDownHandled = !1, this._keyDownSeen = !1, this._keyPressHandled = !1, this._unprocessedDeadKey = !1, this._accessibilityManager = this.register(new E.MutableDisposable), this._onCursorMove = this.register(new w.EventEmitter), this.onCursorMove = this._onCursorMove.event, this._onKey = this.register(new w.EventEmitter), this.onKey = this._onKey.event, this._onRender = this.register(new w.EventEmitter), this.onRender = this._onRender.event, this._onSelectionChange = this.register(new w.EventEmitter), this.onSelectionChange = this._onSelectionChange.event, this._onTitleChange = this.register(new w.EventEmitter), this.onTitleChange = this._onTitleChange.event, this._onBell = this.register(new w.EventEmitter), this.onBell = this._onBell.event, this._onFocus = this.register(new w.EventEmitter), this._onBlur = this.register(new w.EventEmitter), this._onA11yCharEmitter = this.register(new w.EventEmitter), this._onA11yTabEmitter = this.register(new w.EventEmitter), this._onWillOpen = this.register(new w.EventEmitter), this._setup(), this.linkifier2 = this.register(this._instantiationService.createInstance(n.Linkifier2)), this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(a.OscLinkProvider)), this._decorationService = this._instantiationService.createInstance(A.DecorationService), this._instantiationService.setService(B.IDecorationService, this._decorationService), this.register(this._inputHandler.onRequestBell(()=>this._onBell.fire())), this.register(this._inputHandler.onRequestRefreshRows((e, t)=>this.refresh(e, t))), this.register(this._inputHandler.onRequestSendFocus(()=>this._reportFocus())), this.register(this._inputHandler.onRequestReset(()=>this.reset())), this.register(this._inputHandler.onRequestWindowsOptionsReport((e)=>this._reportWindowsOptions(e))), this.register(this._inputHandler.onColor((e)=>this._handleColorEvent(e))), this.register((0, w.forwardEvent)(this._inputHandler.onCursorMove, this._onCursorMove)), this.register((0, w.forwardEvent)(this._inputHandler.onTitleChange, this._onTitleChange)), this.register((0, w.forwardEvent)(this._inputHandler.onA11yChar, this._onA11yCharEmitter)), this.register((0, w.forwardEvent)(this._inputHandler.onA11yTab, this._onA11yTabEmitter)), this.register(this._bufferService.onResize((e)=>this._afterResize(e.cols, e.rows))), this.register((0, E.toDisposable)(()=>{\n                            var e, t;\n                            this._customKeyEventHandler = void 0, null === (t = null === (e = this.element) || void 0 === e ? void 0 : e.parentNode) || void 0 === t || t.removeChild(this.element);\n                        }));\n                    }\n                }\n                t.Terminal = P;\n            },\n            9924: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.TimeBasedDebouncer = void 0, t.TimeBasedDebouncer = class {\n                    dispose() {\n                        this._refreshTimeoutID && clearTimeout(this._refreshTimeoutID);\n                    }\n                    refresh(e, t, i) {\n                        this._rowCount = i, e = void 0 !== e ? e : 0, t = void 0 !== t ? t : this._rowCount - 1, this._rowStart = void 0 !== this._rowStart ? Math.min(this._rowStart, e) : e, this._rowEnd = void 0 !== this._rowEnd ? Math.max(this._rowEnd, t) : t;\n                        const s = Date.now();\n                        if (s - this._lastRefreshMs >= this._debounceThresholdMS) this._lastRefreshMs = s, this._innerRefresh();\n                        else if (!this._additionalRefreshRequested) {\n                            const e = s - this._lastRefreshMs, t = this._debounceThresholdMS - e;\n                            this._additionalRefreshRequested = !0, this._refreshTimeoutID = window.setTimeout(()=>{\n                                this._lastRefreshMs = Date.now(), this._innerRefresh(), this._additionalRefreshRequested = !1, this._refreshTimeoutID = void 0;\n                            }, t);\n                        }\n                    }\n                    _innerRefresh() {\n                        if (void 0 === this._rowStart || void 0 === this._rowEnd || void 0 === this._rowCount) return;\n                        const e = Math.max(this._rowStart, 0), t = Math.min(this._rowEnd, this._rowCount - 1);\n                        this._rowStart = void 0, this._rowEnd = void 0, this._renderCallback(e, t);\n                    }\n                    constructor(e, t = 1e3){\n                        this._renderCallback = e, this._debounceThresholdMS = t, this._lastRefreshMs = 0, this._additionalRefreshRequested = !1;\n                    }\n                };\n            },\n            1680: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.Viewport = void 0;\n                const n = i(3656), o = i(4725), a = i(8460), h = i(844), c = i(2585);\n                let l = t.Viewport = class extends h.Disposable {\n                    _handleThemeChange(e) {\n                        this._viewportElement.style.backgroundColor = e.background.css;\n                    }\n                    reset() {\n                        this._currentRowHeight = 0, this._currentDeviceCellHeight = 0, this._lastRecordedBufferLength = 0, this._lastRecordedViewportHeight = 0, this._lastRecordedBufferHeight = 0, this._lastTouchY = 0, this._lastScrollTop = 0, this._coreBrowserService.window.requestAnimationFrame(()=>this.syncScrollArea());\n                    }\n                    _refresh(e) {\n                        if (e) return this._innerRefresh(), void (null !== this._refreshAnimationFrame && this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame));\n                        null === this._refreshAnimationFrame && (this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(()=>this._innerRefresh()));\n                    }\n                    _innerRefresh() {\n                        if (this._charSizeService.height > 0) {\n                            this._currentRowHeight = this._renderService.dimensions.device.cell.height / this._coreBrowserService.dpr, this._currentDeviceCellHeight = this._renderService.dimensions.device.cell.height, this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n                            const e = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.css.canvas.height);\n                            this._lastRecordedBufferHeight !== e && (this._lastRecordedBufferHeight = e, this._scrollArea.style.height = this._lastRecordedBufferHeight + \"px\");\n                        }\n                        const e = this._bufferService.buffer.ydisp * this._currentRowHeight;\n                        this._viewportElement.scrollTop !== e && (this._ignoreNextScrollEvent = !0, this._viewportElement.scrollTop = e), this._refreshAnimationFrame = null;\n                    }\n                    syncScrollArea() {\n                        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;\n                        if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) return this._lastRecordedBufferLength = this._bufferService.buffer.lines.length, void this._refresh(e);\n                        this._lastRecordedViewportHeight === this._renderService.dimensions.css.canvas.height && this._lastScrollTop === this._activeBuffer.ydisp * this._currentRowHeight && this._renderDimensions.device.cell.height === this._currentDeviceCellHeight || this._refresh(e);\n                    }\n                    _handleScroll(e) {\n                        if (this._lastScrollTop = this._viewportElement.scrollTop, !this._viewportElement.offsetParent) return;\n                        if (this._ignoreNextScrollEvent) return this._ignoreNextScrollEvent = !1, void this._onRequestScrollLines.fire({\n                            amount: 0,\n                            suppressScrollEvent: !0\n                        });\n                        const t = Math.round(this._lastScrollTop / this._currentRowHeight) - this._bufferService.buffer.ydisp;\n                        this._onRequestScrollLines.fire({\n                            amount: t,\n                            suppressScrollEvent: !0\n                        });\n                    }\n                    _smoothScroll() {\n                        if (this._isDisposed || -1 === this._smoothScrollState.origin || -1 === this._smoothScrollState.target) return;\n                        const e = this._smoothScrollPercent();\n                        this._viewportElement.scrollTop = this._smoothScrollState.origin + Math.round(e * (this._smoothScrollState.target - this._smoothScrollState.origin)), e < 1 ? this._coreBrowserService.window.requestAnimationFrame(()=>this._smoothScroll()) : this._clearSmoothScrollState();\n                    }\n                    _smoothScrollPercent() {\n                        return this._optionsService.rawOptions.smoothScrollDuration && this._smoothScrollState.startTime ? Math.max(Math.min((Date.now() - this._smoothScrollState.startTime) / this._optionsService.rawOptions.smoothScrollDuration, 1), 0) : 1;\n                    }\n                    _clearSmoothScrollState() {\n                        this._smoothScrollState.startTime = 0, this._smoothScrollState.origin = -1, this._smoothScrollState.target = -1;\n                    }\n                    _bubbleScroll(e, t) {\n                        const i = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n                        return !(t < 0 && 0 !== this._viewportElement.scrollTop || t > 0 && i < this._lastRecordedBufferHeight) || (e.cancelable && e.preventDefault(), !1);\n                    }\n                    handleWheel(e) {\n                        const t = this._getPixelsScrolled(e);\n                        return 0 !== t && (this._optionsService.rawOptions.smoothScrollDuration ? (this._smoothScrollState.startTime = Date.now(), this._smoothScrollPercent() < 1 ? (this._smoothScrollState.origin = this._viewportElement.scrollTop, -1 === this._smoothScrollState.target ? this._smoothScrollState.target = this._viewportElement.scrollTop + t : this._smoothScrollState.target += t, this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0), this._smoothScroll()) : this._clearSmoothScrollState()) : this._viewportElement.scrollTop += t, this._bubbleScroll(e, t));\n                    }\n                    scrollLines(e) {\n                        if (0 !== e) if (this._optionsService.rawOptions.smoothScrollDuration) {\n                            const t = e * this._currentRowHeight;\n                            this._smoothScrollState.startTime = Date.now(), this._smoothScrollPercent() < 1 ? (this._smoothScrollState.origin = this._viewportElement.scrollTop, this._smoothScrollState.target = this._smoothScrollState.origin + t, this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0), this._smoothScroll()) : this._clearSmoothScrollState();\n                        } else this._onRequestScrollLines.fire({\n                            amount: e,\n                            suppressScrollEvent: !1\n                        });\n                    }\n                    _getPixelsScrolled(e) {\n                        if (0 === e.deltaY || e.shiftKey) return 0;\n                        let t = this._applyScrollModifier(e.deltaY, e);\n                        return e.deltaMode === WheelEvent.DOM_DELTA_LINE ? t *= this._currentRowHeight : e.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t *= this._currentRowHeight * this._bufferService.rows), t;\n                    }\n                    getBufferElements(e, t) {\n                        var i;\n                        let s, r = \"\";\n                        const n = [], o = null != t ? t : this._bufferService.buffer.lines.length, a = this._bufferService.buffer.lines;\n                        for(let t = e; t < o; t++){\n                            const e = a.get(t);\n                            if (!e) continue;\n                            const o = null === (i = a.get(t + 1)) || void 0 === i ? void 0 : i.isWrapped;\n                            if (r += e.translateToString(!o), !o || t === a.length - 1) {\n                                const e = document.createElement(\"div\");\n                                e.textContent = r, n.push(e), r.length > 0 && (s = e), r = \"\";\n                            }\n                        }\n                        return {\n                            bufferElements: n,\n                            cursorElement: s\n                        };\n                    }\n                    getLinesScrolled(e) {\n                        if (0 === e.deltaY || e.shiftKey) return 0;\n                        let t = this._applyScrollModifier(e.deltaY, e);\n                        return e.deltaMode === WheelEvent.DOM_DELTA_PIXEL ? (t /= this._currentRowHeight + 0, this._wheelPartialScroll += t, t = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1), this._wheelPartialScroll %= 1) : e.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t *= this._bufferService.rows), t;\n                    }\n                    _applyScrollModifier(e, t) {\n                        const i = this._optionsService.rawOptions.fastScrollModifier;\n                        return \"alt\" === i && t.altKey || \"ctrl\" === i && t.ctrlKey || \"shift\" === i && t.shiftKey ? e * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity : e * this._optionsService.rawOptions.scrollSensitivity;\n                    }\n                    handleTouchStart(e) {\n                        this._lastTouchY = e.touches[0].pageY;\n                    }\n                    handleTouchMove(e) {\n                        const t = this._lastTouchY - e.touches[0].pageY;\n                        return this._lastTouchY = e.touches[0].pageY, 0 !== t && (this._viewportElement.scrollTop += t, this._bubbleScroll(e, t));\n                    }\n                    constructor(e, t, i, s, r, o, h, c){\n                        super(), this._viewportElement = e, this._scrollArea = t, this._bufferService = i, this._optionsService = s, this._charSizeService = r, this._renderService = o, this._coreBrowserService = h, this.scrollBarWidth = 0, this._currentRowHeight = 0, this._currentDeviceCellHeight = 0, this._lastRecordedBufferLength = 0, this._lastRecordedViewportHeight = 0, this._lastRecordedBufferHeight = 0, this._lastTouchY = 0, this._lastScrollTop = 0, this._wheelPartialScroll = 0, this._refreshAnimationFrame = null, this._ignoreNextScrollEvent = !1, this._smoothScrollState = {\n                            startTime: 0,\n                            origin: -1,\n                            target: -1\n                        }, this._onRequestScrollLines = this.register(new a.EventEmitter), this.onRequestScrollLines = this._onRequestScrollLines.event, this.scrollBarWidth = this._viewportElement.offsetWidth - this._scrollArea.offsetWidth || 15, this.register((0, n.addDisposableDomListener)(this._viewportElement, \"scroll\", this._handleScroll.bind(this))), this._activeBuffer = this._bufferService.buffer, this.register(this._bufferService.buffers.onBufferActivate((e)=>this._activeBuffer = e.activeBuffer)), this._renderDimensions = this._renderService.dimensions, this.register(this._renderService.onDimensionsChange((e)=>this._renderDimensions = e)), this._handleThemeChange(c.colors), this.register(c.onChangeColors((e)=>this._handleThemeChange(e))), this.register(this._optionsService.onSpecificOptionChange(\"scrollback\", ()=>this.syncScrollArea())), setTimeout(()=>this.syncScrollArea());\n                    }\n                };\n                t.Viewport = l = s([\n                    r(2, c.IBufferService),\n                    r(3, c.IOptionsService),\n                    r(4, o.ICharSizeService),\n                    r(5, o.IRenderService),\n                    r(6, o.ICoreBrowserService),\n                    r(7, o.IThemeService)\n                ], l);\n            },\n            3107: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.BufferDecorationRenderer = void 0;\n                const n = i(3656), o = i(4725), a = i(844), h = i(2585);\n                let c = t.BufferDecorationRenderer = class extends a.Disposable {\n                    _queueRefresh() {\n                        void 0 === this._animationFrame && (this._animationFrame = this._renderService.addRefreshCallback(()=>{\n                            this._doRefreshDecorations(), this._animationFrame = void 0;\n                        }));\n                    }\n                    _doRefreshDecorations() {\n                        for (const e of this._decorationService.decorations)this._renderDecoration(e);\n                        this._dimensionsChanged = !1;\n                    }\n                    _renderDecoration(e) {\n                        this._refreshStyle(e), this._dimensionsChanged && this._refreshXPosition(e);\n                    }\n                    _createElement(e) {\n                        var t, i;\n                        const s = document.createElement(\"div\");\n                        s.classList.add(\"xterm-decoration\"), s.classList.toggle(\"xterm-decoration-top-layer\", \"top\" === (null === (t = null == e ? void 0 : e.options) || void 0 === t ? void 0 : t.layer)), s.style.width = \"\".concat(Math.round((e.options.width || 1) * this._renderService.dimensions.css.cell.width), \"px\"), s.style.height = (e.options.height || 1) * this._renderService.dimensions.css.cell.height + \"px\", s.style.top = (e.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.css.cell.height + \"px\", s.style.lineHeight = \"\".concat(this._renderService.dimensions.css.cell.height, \"px\");\n                        const r = null !== (i = e.options.x) && void 0 !== i ? i : 0;\n                        return r && r > this._bufferService.cols && (s.style.display = \"none\"), this._refreshXPosition(e, s), s;\n                    }\n                    _refreshStyle(e) {\n                        const t = e.marker.line - this._bufferService.buffers.active.ydisp;\n                        if (t < 0 || t >= this._bufferService.rows) e.element && (e.element.style.display = \"none\", e.onRenderEmitter.fire(e.element));\n                        else {\n                            let i = this._decorationElements.get(e);\n                            i || (i = this._createElement(e), e.element = i, this._decorationElements.set(e, i), this._container.appendChild(i), e.onDispose(()=>{\n                                this._decorationElements.delete(e), i.remove();\n                            })), i.style.top = t * this._renderService.dimensions.css.cell.height + \"px\", i.style.display = this._altBufferIsActive ? \"none\" : \"block\", e.onRenderEmitter.fire(i);\n                        }\n                    }\n                    _refreshXPosition(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e.element;\n                        var i;\n                        if (!t) return;\n                        const s = null !== (i = e.options.x) && void 0 !== i ? i : 0;\n                        \"right\" === (e.options.anchor || \"left\") ? t.style.right = s ? s * this._renderService.dimensions.css.cell.width + \"px\" : \"\" : t.style.left = s ? s * this._renderService.dimensions.css.cell.width + \"px\" : \"\";\n                    }\n                    _removeDecoration(e) {\n                        var t;\n                        null === (t = this._decorationElements.get(e)) || void 0 === t || t.remove(), this._decorationElements.delete(e), e.dispose();\n                    }\n                    constructor(e, t, i, s){\n                        super(), this._screenElement = e, this._bufferService = t, this._decorationService = i, this._renderService = s, this._decorationElements = new Map, this._altBufferIsActive = !1, this._dimensionsChanged = !1, this._container = document.createElement(\"div\"), this._container.classList.add(\"xterm-decoration-container\"), this._screenElement.appendChild(this._container), this.register(this._renderService.onRenderedViewportChange(()=>this._doRefreshDecorations())), this.register(this._renderService.onDimensionsChange(()=>{\n                            this._dimensionsChanged = !0, this._queueRefresh();\n                        })), this.register((0, n.addDisposableDomListener)(window, \"resize\", ()=>this._queueRefresh())), this.register(this._bufferService.buffers.onBufferActivate(()=>{\n                            this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;\n                        })), this.register(this._decorationService.onDecorationRegistered(()=>this._queueRefresh())), this.register(this._decorationService.onDecorationRemoved((e)=>this._removeDecoration(e))), this.register((0, a.toDisposable)(()=>{\n                            this._container.remove(), this._decorationElements.clear();\n                        }));\n                    }\n                };\n                t.BufferDecorationRenderer = c = s([\n                    r(1, h.IBufferService),\n                    r(2, h.IDecorationService),\n                    r(3, o.IRenderService)\n                ], c);\n            },\n            5871: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.ColorZoneStore = void 0, t.ColorZoneStore = class {\n                    get zones() {\n                        return this._zonePool.length = Math.min(this._zonePool.length, this._zones.length), this._zones;\n                    }\n                    clear() {\n                        this._zones.length = 0, this._zonePoolIndex = 0;\n                    }\n                    addDecoration(e) {\n                        if (e.options.overviewRulerOptions) {\n                            for (const t of this._zones)if (t.color === e.options.overviewRulerOptions.color && t.position === e.options.overviewRulerOptions.position) {\n                                if (this._lineIntersectsZone(t, e.marker.line)) return;\n                                if (this._lineAdjacentToZone(t, e.marker.line, e.options.overviewRulerOptions.position)) return void this._addLineToZone(t, e.marker.line);\n                            }\n                            if (this._zonePoolIndex < this._zonePool.length) return this._zonePool[this._zonePoolIndex].color = e.options.overviewRulerOptions.color, this._zonePool[this._zonePoolIndex].position = e.options.overviewRulerOptions.position, this._zonePool[this._zonePoolIndex].startBufferLine = e.marker.line, this._zonePool[this._zonePoolIndex].endBufferLine = e.marker.line, void this._zones.push(this._zonePool[this._zonePoolIndex++]);\n                            this._zones.push({\n                                color: e.options.overviewRulerOptions.color,\n                                position: e.options.overviewRulerOptions.position,\n                                startBufferLine: e.marker.line,\n                                endBufferLine: e.marker.line\n                            }), this._zonePool.push(this._zones[this._zones.length - 1]), this._zonePoolIndex++;\n                        }\n                    }\n                    setPadding(e) {\n                        this._linePadding = e;\n                    }\n                    _lineIntersectsZone(e, t) {\n                        return t >= e.startBufferLine && t <= e.endBufferLine;\n                    }\n                    _lineAdjacentToZone(e, t, i) {\n                        return t >= e.startBufferLine - this._linePadding[i || \"full\"] && t <= e.endBufferLine + this._linePadding[i || \"full\"];\n                    }\n                    _addLineToZone(e, t) {\n                        e.startBufferLine = Math.min(e.startBufferLine, t), e.endBufferLine = Math.max(e.endBufferLine, t);\n                    }\n                    constructor(){\n                        this._zones = [], this._zonePool = [], this._zonePoolIndex = 0, this._linePadding = {\n                            full: 0,\n                            left: 0,\n                            center: 0,\n                            right: 0\n                        };\n                    }\n                };\n            },\n            5744: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.OverviewRulerRenderer = void 0;\n                const n = i(5871), o = i(3656), a = i(4725), h = i(844), c = i(2585), l = {\n                    full: 0,\n                    left: 0,\n                    center: 0,\n                    right: 0\n                }, d = {\n                    full: 0,\n                    left: 0,\n                    center: 0,\n                    right: 0\n                }, _ = {\n                    full: 0,\n                    left: 0,\n                    center: 0,\n                    right: 0\n                };\n                let u = t.OverviewRulerRenderer = class extends h.Disposable {\n                    get _width() {\n                        return this._optionsService.options.overviewRulerWidth || 0;\n                    }\n                    _registerDecorationListeners() {\n                        this.register(this._decorationService.onDecorationRegistered(()=>this._queueRefresh(void 0, !0))), this.register(this._decorationService.onDecorationRemoved(()=>this._queueRefresh(void 0, !0)));\n                    }\n                    _registerBufferChangeListeners() {\n                        this.register(this._renderService.onRenderedViewportChange(()=>this._queueRefresh())), this.register(this._bufferService.buffers.onBufferActivate(()=>{\n                            this._canvas.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? \"none\" : \"block\";\n                        })), this.register(this._bufferService.onScroll(()=>{\n                            this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length && (this._refreshDrawHeightConstants(), this._refreshColorZonePadding());\n                        }));\n                    }\n                    _registerDimensionChangeListeners() {\n                        this.register(this._renderService.onRender(()=>{\n                            this._containerHeight && this._containerHeight === this._screenElement.clientHeight || (this._queueRefresh(!0), this._containerHeight = this._screenElement.clientHeight);\n                        })), this.register(this._optionsService.onSpecificOptionChange(\"overviewRulerWidth\", ()=>this._queueRefresh(!0))), this.register((0, o.addDisposableDomListener)(this._coreBrowseService.window, \"resize\", ()=>this._queueRefresh(!0))), this._queueRefresh(!0);\n                    }\n                    _refreshDrawConstants() {\n                        const e = Math.floor(this._canvas.width / 3), t = Math.ceil(this._canvas.width / 3);\n                        d.full = this._canvas.width, d.left = e, d.center = t, d.right = e, this._refreshDrawHeightConstants(), _.full = 0, _.left = 0, _.center = d.left, _.right = d.left + d.center;\n                    }\n                    _refreshDrawHeightConstants() {\n                        l.full = Math.round(2 * this._coreBrowseService.dpr);\n                        const e = this._canvas.height / this._bufferService.buffer.lines.length, t = Math.round(Math.max(Math.min(e, 12), 6) * this._coreBrowseService.dpr);\n                        l.left = t, l.center = t, l.right = t;\n                    }\n                    _refreshColorZonePadding() {\n                        this._colorZoneStore.setPadding({\n                            full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l.full),\n                            left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l.left),\n                            center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l.center),\n                            right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l.right)\n                        }), this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;\n                    }\n                    _refreshCanvasDimensions() {\n                        this._canvas.style.width = \"\".concat(this._width, \"px\"), this._canvas.width = Math.round(this._width * this._coreBrowseService.dpr), this._canvas.style.height = \"\".concat(this._screenElement.clientHeight, \"px\"), this._canvas.height = Math.round(this._screenElement.clientHeight * this._coreBrowseService.dpr), this._refreshDrawConstants(), this._refreshColorZonePadding();\n                    }\n                    _refreshDecorations() {\n                        this._shouldUpdateDimensions && this._refreshCanvasDimensions(), this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height), this._colorZoneStore.clear();\n                        for (const e of this._decorationService.decorations)this._colorZoneStore.addDecoration(e);\n                        this._ctx.lineWidth = 1;\n                        const e = this._colorZoneStore.zones;\n                        for (const t of e)\"full\" !== t.position && this._renderColorZone(t);\n                        for (const t of e)\"full\" === t.position && this._renderColorZone(t);\n                        this._shouldUpdateDimensions = !1, this._shouldUpdateAnchor = !1;\n                    }\n                    _renderColorZone(e) {\n                        this._ctx.fillStyle = e.color, this._ctx.fillRect(_[e.position || \"full\"], Math.round((this._canvas.height - 1) * (e.startBufferLine / this._bufferService.buffers.active.lines.length) - l[e.position || \"full\"] / 2), d[e.position || \"full\"], Math.round((this._canvas.height - 1) * ((e.endBufferLine - e.startBufferLine) / this._bufferService.buffers.active.lines.length) + l[e.position || \"full\"]));\n                    }\n                    _queueRefresh(e, t) {\n                        this._shouldUpdateDimensions = e || this._shouldUpdateDimensions, this._shouldUpdateAnchor = t || this._shouldUpdateAnchor, void 0 === this._animationFrame && (this._animationFrame = this._coreBrowseService.window.requestAnimationFrame(()=>{\n                            this._refreshDecorations(), this._animationFrame = void 0;\n                        }));\n                    }\n                    constructor(e, t, i, s, r, o, a){\n                        var c;\n                        super(), this._viewportElement = e, this._screenElement = t, this._bufferService = i, this._decorationService = s, this._renderService = r, this._optionsService = o, this._coreBrowseService = a, this._colorZoneStore = new n.ColorZoneStore, this._shouldUpdateDimensions = !0, this._shouldUpdateAnchor = !0, this._lastKnownBufferLength = 0, this._canvas = document.createElement(\"canvas\"), this._canvas.classList.add(\"xterm-decoration-overview-ruler\"), this._refreshCanvasDimensions(), null === (c = this._viewportElement.parentElement) || void 0 === c || c.insertBefore(this._canvas, this._viewportElement);\n                        const l = this._canvas.getContext(\"2d\");\n                        if (!l) throw new Error(\"Ctx cannot be null\");\n                        this._ctx = l, this._registerDecorationListeners(), this._registerBufferChangeListeners(), this._registerDimensionChangeListeners(), this.register((0, h.toDisposable)(()=>{\n                            var e;\n                            null === (e = this._canvas) || void 0 === e || e.remove();\n                        }));\n                    }\n                };\n                t.OverviewRulerRenderer = u = s([\n                    r(2, c.IBufferService),\n                    r(3, c.IDecorationService),\n                    r(4, a.IRenderService),\n                    r(5, c.IOptionsService),\n                    r(6, a.ICoreBrowserService)\n                ], u);\n            },\n            2950: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CompositionHelper = void 0;\n                const n = i(4725), o = i(2585), a = i(2584);\n                let h = t.CompositionHelper = class {\n                    get isComposing() {\n                        return this._isComposing;\n                    }\n                    compositionstart() {\n                        this._isComposing = !0, this._compositionPosition.start = this._textarea.value.length, this._compositionView.textContent = \"\", this._dataAlreadySent = \"\", this._compositionView.classList.add(\"active\");\n                    }\n                    compositionupdate(e) {\n                        this._compositionView.textContent = e.data, this.updateCompositionElements(), setTimeout(()=>{\n                            this._compositionPosition.end = this._textarea.value.length;\n                        }, 0);\n                    }\n                    compositionend() {\n                        this._finalizeComposition(!0);\n                    }\n                    keydown(e) {\n                        if (this._isComposing || this._isSendingComposition) {\n                            if (229 === e.keyCode) return !1;\n                            if (16 === e.keyCode || 17 === e.keyCode || 18 === e.keyCode) return !1;\n                            this._finalizeComposition(!1);\n                        }\n                        return 229 !== e.keyCode || (this._handleAnyTextareaChanges(), !1);\n                    }\n                    _finalizeComposition(e) {\n                        if (this._compositionView.classList.remove(\"active\"), this._isComposing = !1, e) {\n                            const e = {\n                                start: this._compositionPosition.start,\n                                end: this._compositionPosition.end\n                            };\n                            this._isSendingComposition = !0, setTimeout(()=>{\n                                if (this._isSendingComposition) {\n                                    let t;\n                                    this._isSendingComposition = !1, e.start += this._dataAlreadySent.length, t = this._isComposing ? this._textarea.value.substring(e.start, e.end) : this._textarea.value.substring(e.start), t.length > 0 && this._coreService.triggerDataEvent(t, !0);\n                                }\n                            }, 0);\n                        } else {\n                            this._isSendingComposition = !1;\n                            const e = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n                            this._coreService.triggerDataEvent(e, !0);\n                        }\n                    }\n                    _handleAnyTextareaChanges() {\n                        const e = this._textarea.value;\n                        setTimeout(()=>{\n                            if (!this._isComposing) {\n                                const t = this._textarea.value, i = t.replace(e, \"\");\n                                this._dataAlreadySent = i, t.length > e.length ? this._coreService.triggerDataEvent(i, !0) : t.length < e.length ? this._coreService.triggerDataEvent(\"\".concat(a.C0.DEL), !0) : t.length === e.length && t !== e && this._coreService.triggerDataEvent(t, !0);\n                            }\n                        }, 0);\n                    }\n                    updateCompositionElements(e) {\n                        if (this._isComposing) {\n                            if (this._bufferService.buffer.isCursorInViewport) {\n                                const e = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1), t = this._renderService.dimensions.css.cell.height, i = this._bufferService.buffer.y * this._renderService.dimensions.css.cell.height, s = e * this._renderService.dimensions.css.cell.width;\n                                this._compositionView.style.left = s + \"px\", this._compositionView.style.top = i + \"px\", this._compositionView.style.height = t + \"px\", this._compositionView.style.lineHeight = t + \"px\", this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily, this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + \"px\";\n                                const r = this._compositionView.getBoundingClientRect();\n                                this._textarea.style.left = s + \"px\", this._textarea.style.top = i + \"px\", this._textarea.style.width = Math.max(r.width, 1) + \"px\", this._textarea.style.height = Math.max(r.height, 1) + \"px\", this._textarea.style.lineHeight = r.height + \"px\";\n                            }\n                            e || setTimeout(()=>this.updateCompositionElements(!0), 0);\n                        }\n                    }\n                    constructor(e, t, i, s, r, n){\n                        this._textarea = e, this._compositionView = t, this._bufferService = i, this._optionsService = s, this._coreService = r, this._renderService = n, this._isComposing = !1, this._isSendingComposition = !1, this._compositionPosition = {\n                            start: 0,\n                            end: 0\n                        }, this._dataAlreadySent = \"\";\n                    }\n                };\n                t.CompositionHelper = h = s([\n                    r(2, o.IBufferService),\n                    r(3, o.IOptionsService),\n                    r(4, o.ICoreService),\n                    r(5, n.IRenderService)\n                ], h);\n            },\n            9806: (e, t)=>{\n                function i(e, t, i) {\n                    const s = i.getBoundingClientRect(), r = e.getComputedStyle(i), n = parseInt(r.getPropertyValue(\"padding-left\")), o = parseInt(r.getPropertyValue(\"padding-top\"));\n                    return [\n                        t.clientX - s.left - n,\n                        t.clientY - s.top - o\n                    ];\n                }\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.getCoords = t.getCoordsRelativeToElement = void 0, t.getCoordsRelativeToElement = i, t.getCoords = function(e, t, s, r, n, o, a, h, c) {\n                    if (!o) return;\n                    const l = i(e, t, s);\n                    return l ? (l[0] = Math.ceil((l[0] + (c ? a / 2 : 0)) / a), l[1] = Math.ceil(l[1] / h), l[0] = Math.min(Math.max(l[0], 1), r + (c ? 1 : 0)), l[1] = Math.min(Math.max(l[1], 1), n), l) : void 0;\n                };\n            },\n            9504: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.moveToCellSequence = void 0;\n                const s = i(2584);\n                function r(e, t, i, s) {\n                    const r = e - n(e, i), a = t - n(t, i), l = Math.abs(r - a) - function(e, t, i) {\n                        let s = 0;\n                        const r = e - n(e, i), a = t - n(t, i);\n                        for(let n = 0; n < Math.abs(r - a); n++){\n                            const a = \"A\" === o(e, t) ? -1 : 1, h = i.buffer.lines.get(r + a * n);\n                            (null == h ? void 0 : h.isWrapped) && s++;\n                        }\n                        return s;\n                    }(e, t, i);\n                    return c(l, h(o(e, t), s));\n                }\n                function n(e, t) {\n                    let i = 0, s = t.buffer.lines.get(e), r = null == s ? void 0 : s.isWrapped;\n                    for(; r && e >= 0 && e < t.rows;)i++, s = t.buffer.lines.get(--e), r = null == s ? void 0 : s.isWrapped;\n                    return i;\n                }\n                function o(e, t) {\n                    return e > t ? \"A\" : \"B\";\n                }\n                function a(e, t, i, s, r, n) {\n                    let o = e, a = t, h = \"\";\n                    for(; o !== i || a !== s;)o += r ? 1 : -1, r && o > n.cols - 1 ? (h += n.buffer.translateBufferLineToString(a, !1, e, o), o = 0, e = 0, a++) : !r && o < 0 && (h += n.buffer.translateBufferLineToString(a, !1, 0, e + 1), o = n.cols - 1, e = o, a--);\n                    return h + n.buffer.translateBufferLineToString(a, !1, e, o);\n                }\n                function h(e, t) {\n                    const i = t ? \"O\" : \"[\";\n                    return s.C0.ESC + i + e;\n                }\n                function c(e, t) {\n                    e = Math.floor(e);\n                    let i = \"\";\n                    for(let s = 0; s < e; s++)i += t;\n                    return i;\n                }\n                t.moveToCellSequence = function(e, t, i, s) {\n                    const o = i.buffer.x, l = i.buffer.y;\n                    if (!i.buffer.hasScrollback) return function(e, t, i, s, o, l) {\n                        return 0 === r(t, s, o, l).length ? \"\" : c(a(e, t, e, t - n(t, o), !1, o).length, h(\"D\", l));\n                    }(o, l, 0, t, i, s) + r(l, t, i, s) + function(e, t, i, s, o, l) {\n                        let d;\n                        d = r(t, s, o, l).length > 0 ? s - n(s, o) : t;\n                        const _ = s, u = function(e, t, i, s, o, a) {\n                            let h;\n                            return h = r(i, s, o, a).length > 0 ? s - n(s, o) : t, e < i && h <= s || e >= i && h < s ? \"C\" : \"D\";\n                        }(e, t, i, s, o, l);\n                        return c(a(e, d, i, _, \"C\" === u, o).length, h(u, l));\n                    }(o, l, e, t, i, s);\n                    let d;\n                    if (l === t) return d = o > e ? \"D\" : \"C\", c(Math.abs(o - e), h(d, s));\n                    d = l > t ? \"D\" : \"C\";\n                    const _ = Math.abs(l - t);\n                    return c(function(e, t) {\n                        return t.cols - e;\n                    }(l > t ? e : o, i) + (_ - 1) * i.cols + 1 + ((l > t ? o : e) - 1), h(d, s));\n                };\n            },\n            1296: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.DomRenderer = void 0;\n                const n = i(3787), o = i(2550), a = i(2223), h = i(6171), c = i(4725), l = i(8055), d = i(8460), _ = i(844), u = i(2585), f = \"xterm-dom-renderer-owner-\", v = \"xterm-rows\", p = \"xterm-fg-\", g = \"xterm-bg-\", m = \"xterm-focus\", S = \"xterm-selection\";\n                let C = 1, b = t.DomRenderer = class extends _.Disposable {\n                    _updateDimensions() {\n                        const e = this._coreBrowserService.dpr;\n                        this.dimensions.device.char.width = this._charSizeService.width * e, this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * e), this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing), this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight), this.dimensions.device.char.left = 0, this.dimensions.device.char.top = 0, this.dimensions.device.canvas.width = this.dimensions.device.cell.width * this._bufferService.cols, this.dimensions.device.canvas.height = this.dimensions.device.cell.height * this._bufferService.rows, this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / e), this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / e), this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols, this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;\n                        for (const e of this._rowElements)e.style.width = \"\".concat(this.dimensions.css.canvas.width, \"px\"), e.style.height = \"\".concat(this.dimensions.css.cell.height, \"px\"), e.style.lineHeight = \"\".concat(this.dimensions.css.cell.height, \"px\"), e.style.overflow = \"hidden\";\n                        this._dimensionsStyleElement || (this._dimensionsStyleElement = document.createElement(\"style\"), this._screenElement.appendChild(this._dimensionsStyleElement));\n                        const t = \"\".concat(this._terminalSelector, \" .\").concat(v, \" span { display: inline-block; height: 100%; vertical-align: top;}\");\n                        this._dimensionsStyleElement.textContent = t, this._selectionContainer.style.height = this._viewportElement.style.height, this._screenElement.style.width = \"\".concat(this.dimensions.css.canvas.width, \"px\"), this._screenElement.style.height = \"\".concat(this.dimensions.css.canvas.height, \"px\");\n                    }\n                    _injectCss(e) {\n                        this._themeStyleElement || (this._themeStyleElement = document.createElement(\"style\"), this._screenElement.appendChild(this._themeStyleElement));\n                        let t = \"\".concat(this._terminalSelector, \" .\").concat(v, \" { color: \").concat(e.foreground.css, \"; font-family: \").concat(this._optionsService.rawOptions.fontFamily, \"; font-size: \").concat(this._optionsService.rawOptions.fontSize, \"px; font-kerning: none; white-space: pre}\");\n                        t += \"\".concat(this._terminalSelector, \" .\").concat(v, \" .xterm-dim { color: \").concat(l.color.multiplyOpacity(e.foreground, .5).css, \";}\"), t += \"\".concat(this._terminalSelector, \" span:not(.xterm-bold) { font-weight: \").concat(this._optionsService.rawOptions.fontWeight, \";}\").concat(this._terminalSelector, \" span.xterm-bold { font-weight: \").concat(this._optionsService.rawOptions.fontWeightBold, \";}\").concat(this._terminalSelector, \" span.xterm-italic { font-style: italic;}\"), t += \"@keyframes blink_box_shadow_\" + this._terminalClass + \" { 50% {  border-bottom-style: hidden; }}\", t += \"@keyframes blink_block_\" + this._terminalClass + \" { 0% {\" + \"  background-color: \".concat(e.cursor.css, \";\") + \"  color: \".concat(e.cursorAccent.css, \"; } 50% {  background-color: inherit;\") + \"  color: \".concat(e.cursor.css, \"; }}\"), t += \"\".concat(this._terminalSelector, \" .\").concat(v, \".\").concat(m, \" .xterm-cursor.xterm-cursor-blink:not(.xterm-cursor-block) { animation: blink_box_shadow_\") + this._terminalClass + \" 1s step-end infinite;}\" + \"\".concat(this._terminalSelector, \" .\").concat(v, \".\").concat(m, \" .xterm-cursor.xterm-cursor-blink.xterm-cursor-block { animation: blink_block_\") + this._terminalClass + \" 1s step-end infinite;}\" + \"\".concat(this._terminalSelector, \" .\").concat(v, \" .xterm-cursor.xterm-cursor-block {\") + \" background-color: \".concat(e.cursor.css, \";\") + \" color: \".concat(e.cursorAccent.css, \";}\") + \"\".concat(this._terminalSelector, \" .\").concat(v, \" .xterm-cursor.xterm-cursor-outline {\") + \" outline: 1px solid \".concat(e.cursor.css, \"; outline-offset: -1px;}\") + \"\".concat(this._terminalSelector, \" .\").concat(v, \" .xterm-cursor.xterm-cursor-bar {\") + \" box-shadow: \".concat(this._optionsService.rawOptions.cursorWidth, \"px 0 0 \").concat(e.cursor.css, \" inset;}\") + \"\".concat(this._terminalSelector, \" .\").concat(v, \" .xterm-cursor.xterm-cursor-underline {\") + \" border-bottom: 1px \".concat(e.cursor.css, \"; border-bottom-style: solid; height: calc(100% - 1px);}\"), t += \"\".concat(this._terminalSelector, \" .\").concat(S, \" { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}\").concat(this._terminalSelector, \".focus .\").concat(S, \" div { position: absolute; background-color: \").concat(e.selectionBackgroundOpaque.css, \";}\").concat(this._terminalSelector, \" .\").concat(S, \" div { position: absolute; background-color: \").concat(e.selectionInactiveBackgroundOpaque.css, \";}\");\n                        for (const [i, s] of e.ansi.entries())t += \"\".concat(this._terminalSelector, \" .\").concat(p).concat(i, \" { color: \").concat(s.css, \"; }\").concat(this._terminalSelector, \" .\").concat(p).concat(i, \".xterm-dim { color: \").concat(l.color.multiplyOpacity(s, .5).css, \"; }\").concat(this._terminalSelector, \" .\").concat(g).concat(i, \" { background-color: \").concat(s.css, \"; }\");\n                        t += \"\".concat(this._terminalSelector, \" .\").concat(p).concat(a.INVERTED_DEFAULT_COLOR, \" { color: \").concat(l.color.opaque(e.background).css, \"; }\").concat(this._terminalSelector, \" .\").concat(p).concat(a.INVERTED_DEFAULT_COLOR, \".xterm-dim { color: \").concat(l.color.multiplyOpacity(l.color.opaque(e.background), .5).css, \"; }\").concat(this._terminalSelector, \" .\").concat(g).concat(a.INVERTED_DEFAULT_COLOR, \" { background-color: \").concat(e.foreground.css, \"; }\"), this._themeStyleElement.textContent = t;\n                    }\n                    _setDefaultSpacing() {\n                        const e = this.dimensions.css.cell.width - this._widthCache.get(\"W\", !1, !1);\n                        this._rowContainer.style.letterSpacing = \"\".concat(e, \"px\"), this._rowFactory.defaultSpacing = e;\n                    }\n                    handleDevicePixelRatioChange() {\n                        this._updateDimensions(), this._widthCache.clear(), this._setDefaultSpacing();\n                    }\n                    _refreshRowElements(e, t) {\n                        for(let e = this._rowElements.length; e <= t; e++){\n                            const e = document.createElement(\"div\");\n                            this._rowContainer.appendChild(e), this._rowElements.push(e);\n                        }\n                        for(; this._rowElements.length > t;)this._rowContainer.removeChild(this._rowElements.pop());\n                    }\n                    handleResize(e, t) {\n                        this._refreshRowElements(e, t), this._updateDimensions();\n                    }\n                    handleCharSizeChanged() {\n                        this._updateDimensions(), this._widthCache.clear(), this._setDefaultSpacing();\n                    }\n                    handleBlur() {\n                        this._rowContainer.classList.remove(m);\n                    }\n                    handleFocus() {\n                        this._rowContainer.classList.add(m), this.renderRows(this._bufferService.buffer.y, this._bufferService.buffer.y);\n                    }\n                    handleSelectionChanged(e, t, i) {\n                        if (this._selectionContainer.replaceChildren(), this._rowFactory.handleSelectionChanged(e, t, i), this.renderRows(0, this._bufferService.rows - 1), !e || !t) return;\n                        const s = e[1] - this._bufferService.buffer.ydisp, r = t[1] - this._bufferService.buffer.ydisp, n = Math.max(s, 0), o = Math.min(r, this._bufferService.rows - 1);\n                        if (n >= this._bufferService.rows || o < 0) return;\n                        const a = document.createDocumentFragment();\n                        if (i) {\n                            const i = e[0] > t[0];\n                            a.appendChild(this._createSelectionElement(n, i ? t[0] : e[0], i ? e[0] : t[0], o - n + 1));\n                        } else {\n                            const i = s === n ? e[0] : 0, h = n === r ? t[0] : this._bufferService.cols;\n                            a.appendChild(this._createSelectionElement(n, i, h));\n                            const c = o - n - 1;\n                            if (a.appendChild(this._createSelectionElement(n + 1, 0, this._bufferService.cols, c)), n !== o) {\n                                const e = r === o ? t[0] : this._bufferService.cols;\n                                a.appendChild(this._createSelectionElement(o, 0, e));\n                            }\n                        }\n                        this._selectionContainer.appendChild(a);\n                    }\n                    _createSelectionElement(e, t, i) {\n                        let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n                        const r = document.createElement(\"div\");\n                        return r.style.height = s * this.dimensions.css.cell.height + \"px\", r.style.top = e * this.dimensions.css.cell.height + \"px\", r.style.left = t * this.dimensions.css.cell.width + \"px\", r.style.width = this.dimensions.css.cell.width * (i - t) + \"px\", r;\n                    }\n                    handleCursorMove() {}\n                    _handleOptionsChanged() {\n                        this._updateDimensions(), this._injectCss(this._themeService.colors), this._widthCache.setFont(this._optionsService.rawOptions.fontFamily, this._optionsService.rawOptions.fontSize, this._optionsService.rawOptions.fontWeight, this._optionsService.rawOptions.fontWeightBold), this._setDefaultSpacing();\n                    }\n                    clear() {\n                        for (const e of this._rowElements)e.replaceChildren();\n                    }\n                    renderRows(e, t) {\n                        const i = this._bufferService.buffer, s = i.ybase + i.y, r = Math.min(i.x, this._bufferService.cols - 1), n = this._optionsService.rawOptions.cursorBlink, o = this._optionsService.rawOptions.cursorStyle, a = this._optionsService.rawOptions.cursorInactiveStyle;\n                        for(let h = e; h <= t; h++){\n                            const e = h + i.ydisp, t = this._rowElements[h], c = i.lines.get(e);\n                            if (!t || !c) break;\n                            t.replaceChildren(...this._rowFactory.createRow(c, e, e === s, o, a, r, n, this.dimensions.css.cell.width, this._widthCache, -1, -1));\n                        }\n                    }\n                    get _terminalSelector() {\n                        return \".\".concat(f).concat(this._terminalClass);\n                    }\n                    _handleLinkHover(e) {\n                        this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, !0);\n                    }\n                    _handleLinkLeave(e) {\n                        this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, !1);\n                    }\n                    _setCellUnderline(e, t, i, s, r, n) {\n                        i < 0 && (e = 0), s < 0 && (t = 0);\n                        const o = this._bufferService.rows - 1;\n                        i = Math.max(Math.min(i, o), 0), s = Math.max(Math.min(s, o), 0), r = Math.min(r, this._bufferService.cols);\n                        const a = this._bufferService.buffer, h = a.ybase + a.y, c = Math.min(a.x, r - 1), l = this._optionsService.rawOptions.cursorBlink, d = this._optionsService.rawOptions.cursorStyle, _ = this._optionsService.rawOptions.cursorInactiveStyle;\n                        for(let o = i; o <= s; ++o){\n                            const u = o + a.ydisp, f = this._rowElements[o], v = a.lines.get(u);\n                            if (!f || !v) break;\n                            f.replaceChildren(...this._rowFactory.createRow(v, u, u === h, d, _, c, l, this.dimensions.css.cell.width, this._widthCache, n ? o === i ? e : 0 : -1, n ? (o === s ? t : r) - 1 : -1));\n                        }\n                    }\n                    constructor(e, t, i, s, r, a, c, l, u, p){\n                        super(), this._element = e, this._screenElement = t, this._viewportElement = i, this._linkifier2 = s, this._charSizeService = a, this._optionsService = c, this._bufferService = l, this._coreBrowserService = u, this._themeService = p, this._terminalClass = C++, this._rowElements = [], this.onRequestRedraw = this.register(new d.EventEmitter).event, this._rowContainer = document.createElement(\"div\"), this._rowContainer.classList.add(v), this._rowContainer.style.lineHeight = \"normal\", this._rowContainer.setAttribute(\"aria-hidden\", \"true\"), this._refreshRowElements(this._bufferService.cols, this._bufferService.rows), this._selectionContainer = document.createElement(\"div\"), this._selectionContainer.classList.add(S), this._selectionContainer.setAttribute(\"aria-hidden\", \"true\"), this.dimensions = (0, h.createRenderDimensions)(), this._updateDimensions(), this.register(this._optionsService.onOptionChange(()=>this._handleOptionsChanged())), this.register(this._themeService.onChangeColors((e)=>this._injectCss(e))), this._injectCss(this._themeService.colors), this._rowFactory = r.createInstance(n.DomRendererRowFactory, document), this._element.classList.add(f + this._terminalClass), this._screenElement.appendChild(this._rowContainer), this._screenElement.appendChild(this._selectionContainer), this.register(this._linkifier2.onShowLinkUnderline((e)=>this._handleLinkHover(e))), this.register(this._linkifier2.onHideLinkUnderline((e)=>this._handleLinkLeave(e))), this.register((0, _.toDisposable)(()=>{\n                            this._element.classList.remove(f + this._terminalClass), this._rowContainer.remove(), this._selectionContainer.remove(), this._widthCache.dispose(), this._themeStyleElement.remove(), this._dimensionsStyleElement.remove();\n                        })), this._widthCache = new o.WidthCache(document), this._widthCache.setFont(this._optionsService.rawOptions.fontFamily, this._optionsService.rawOptions.fontSize, this._optionsService.rawOptions.fontWeight, this._optionsService.rawOptions.fontWeightBold), this._setDefaultSpacing();\n                    }\n                };\n                t.DomRenderer = b = s([\n                    r(4, u.IInstantiationService),\n                    r(5, c.ICharSizeService),\n                    r(6, u.IOptionsService),\n                    r(7, u.IBufferService),\n                    r(8, c.ICoreBrowserService),\n                    r(9, c.IThemeService)\n                ], b);\n            },\n            3787: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.DomRendererRowFactory = void 0;\n                const n = i(2223), o = i(643), a = i(511), h = i(2585), c = i(8055), l = i(4725), d = i(4269), _ = i(6171), u = i(3734);\n                let f = t.DomRendererRowFactory = class {\n                    handleSelectionChanged(e, t, i) {\n                        this._selectionStart = e, this._selectionEnd = t, this._columnSelectMode = i;\n                    }\n                    createRow(e, t, i, s, r, a, h, l, _, f, p) {\n                        const g = [], m = this._characterJoinerService.getJoinedCharacters(t), S = this._themeService.colors;\n                        let C, b = e.getNoBgTrimmedLength();\n                        i && b < a + 1 && (b = a + 1);\n                        let y = 0, w = \"\", E = 0, k = 0, L = 0, D = !1, R = 0, x = !1, A = 0;\n                        const B = [], T = -1 !== f && -1 !== p;\n                        for(let M = 0; M < b; M++){\n                            e.loadCell(M, this._workCell);\n                            let b = this._workCell.getWidth();\n                            if (0 === b) continue;\n                            let O = !1, P = M, I = this._workCell;\n                            if (m.length > 0 && M === m[0][0]) {\n                                O = !0;\n                                const t = m.shift();\n                                I = new d.JoinedCellData(this._workCell, e.translateToString(!0, t[0], t[1]), t[1] - t[0]), P = t[1] - 1, b = I.getWidth();\n                            }\n                            const H = this._isCellInSelection(M, t), F = i && M === a, W = T && M >= f && M <= p;\n                            let U = !1;\n                            this._decorationService.forEachDecorationAtCell(M, t, void 0, (e)=>{\n                                U = !0;\n                            });\n                            let N = I.getChars() || o.WHITESPACE_CELL_CHAR;\n                            if (\" \" === N && (I.isUnderline() || I.isOverline()) && (N = \"\\xa0\"), A = b * l - _.get(N, I.isBold(), I.isItalic()), C) {\n                                if (y && (H && x || !H && !x && I.bg === E) && (H && x && S.selectionForeground || I.fg === k) && I.extended.ext === L && W === D && A === R && !F && !O && !U) {\n                                    w += N, y++;\n                                    continue;\n                                }\n                                y && (C.textContent = w), C = this._document.createElement(\"span\"), y = 0, w = \"\";\n                            } else C = this._document.createElement(\"span\");\n                            if (E = I.bg, k = I.fg, L = I.extended.ext, D = W, R = A, x = H, O && a >= M && a <= P && (a = M), !this._coreService.isCursorHidden && F) {\n                                if (B.push(\"xterm-cursor\"), this._coreBrowserService.isFocused) h && B.push(\"xterm-cursor-blink\"), B.push(\"bar\" === s ? \"xterm-cursor-bar\" : \"underline\" === s ? \"xterm-cursor-underline\" : \"xterm-cursor-block\");\n                                else if (r) switch(r){\n                                    case \"outline\":\n                                        B.push(\"xterm-cursor-outline\");\n                                        break;\n                                    case \"block\":\n                                        B.push(\"xterm-cursor-block\");\n                                        break;\n                                    case \"bar\":\n                                        B.push(\"xterm-cursor-bar\");\n                                        break;\n                                    case \"underline\":\n                                        B.push(\"xterm-cursor-underline\");\n                                }\n                            }\n                            if (I.isBold() && B.push(\"xterm-bold\"), I.isItalic() && B.push(\"xterm-italic\"), I.isDim() && B.push(\"xterm-dim\"), w = I.isInvisible() ? o.WHITESPACE_CELL_CHAR : I.getChars() || o.WHITESPACE_CELL_CHAR, I.isUnderline() && (B.push(\"xterm-underline-\".concat(I.extended.underlineStyle)), \" \" === w && (w = \"\\xa0\"), !I.isUnderlineColorDefault())) if (I.isUnderlineColorRGB()) C.style.textDecorationColor = \"rgb(\".concat(u.AttributeData.toColorRGB(I.getUnderlineColor()).join(\",\"), \")\");\n                            else {\n                                let e = I.getUnderlineColor();\n                                this._optionsService.rawOptions.drawBoldTextInBrightColors && I.isBold() && e < 8 && (e += 8), C.style.textDecorationColor = S.ansi[e].css;\n                            }\n                            I.isOverline() && (B.push(\"xterm-overline\"), \" \" === w && (w = \"\\xa0\")), I.isStrikethrough() && B.push(\"xterm-strikethrough\"), W && (C.style.textDecoration = \"underline\");\n                            let $ = I.getFgColor(), j = I.getFgColorMode(), z = I.getBgColor(), K = I.getBgColorMode();\n                            const q = !!I.isInverse();\n                            if (q) {\n                                const e = $;\n                                $ = z, z = e;\n                                const t = j;\n                                j = K, K = t;\n                            }\n                            let V, G, X, J = !1;\n                            switch(this._decorationService.forEachDecorationAtCell(M, t, void 0, (e)=>{\n                                \"top\" !== e.options.layer && J || (e.backgroundColorRGB && (K = 50331648, z = e.backgroundColorRGB.rgba >> 8 & 16777215, V = e.backgroundColorRGB), e.foregroundColorRGB && (j = 50331648, $ = e.foregroundColorRGB.rgba >> 8 & 16777215, G = e.foregroundColorRGB), J = \"top\" === e.options.layer);\n                            }), !J && H && (V = this._coreBrowserService.isFocused ? S.selectionBackgroundOpaque : S.selectionInactiveBackgroundOpaque, z = V.rgba >> 8 & 16777215, K = 50331648, J = !0, S.selectionForeground && (j = 50331648, $ = S.selectionForeground.rgba >> 8 & 16777215, G = S.selectionForeground)), J && B.push(\"xterm-decoration-top\"), K){\n                                case 16777216:\n                                case 33554432:\n                                    X = S.ansi[z], B.push(\"xterm-bg-\".concat(z));\n                                    break;\n                                case 50331648:\n                                    X = c.rgba.toColor(z >> 16, z >> 8 & 255, 255 & z), this._addStyle(C, \"background-color:#\".concat(v((z >>> 0).toString(16), \"0\", 6)));\n                                    break;\n                                default:\n                                    q ? (X = S.foreground, B.push(\"xterm-bg-\".concat(n.INVERTED_DEFAULT_COLOR))) : X = S.background;\n                            }\n                            switch(V || I.isDim() && (V = c.color.multiplyOpacity(X, .5)), j){\n                                case 16777216:\n                                case 33554432:\n                                    I.isBold() && $ < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors && ($ += 8), this._applyMinimumContrast(C, X, S.ansi[$], I, V, void 0) || B.push(\"xterm-fg-\".concat($));\n                                    break;\n                                case 50331648:\n                                    const e1 = c.rgba.toColor($ >> 16 & 255, $ >> 8 & 255, 255 & $);\n                                    this._applyMinimumContrast(C, X, e1, I, V, G) || this._addStyle(C, \"color:#\".concat(v($.toString(16), \"0\", 6)));\n                                    break;\n                                default:\n                                    this._applyMinimumContrast(C, X, S.foreground, I, V, void 0) || q && B.push(\"xterm-fg-\".concat(n.INVERTED_DEFAULT_COLOR));\n                            }\n                            B.length && (C.className = B.join(\" \"), B.length = 0), F || O || U ? C.textContent = w : y++, A !== this.defaultSpacing && (C.style.letterSpacing = \"\".concat(A, \"px\")), g.push(C), M = P;\n                        }\n                        return C && y && (C.textContent = w), g;\n                    }\n                    _applyMinimumContrast(e, t, i, s, r, n) {\n                        if (1 === this._optionsService.rawOptions.minimumContrastRatio || (0, _.excludeFromContrastRatioDemands)(s.getCode())) return !1;\n                        const o = this._getContrastCache(s);\n                        let a;\n                        if (r || n || (a = o.getColor(t.rgba, i.rgba)), void 0 === a) {\n                            const e = this._optionsService.rawOptions.minimumContrastRatio / (s.isDim() ? 2 : 1);\n                            a = c.color.ensureContrastRatio(r || t, n || i, e), o.setColor((r || t).rgba, (n || i).rgba, null != a ? a : null);\n                        }\n                        return !!a && (this._addStyle(e, \"color:\".concat(a.css)), !0);\n                    }\n                    _getContrastCache(e) {\n                        return e.isDim() ? this._themeService.colors.halfContrastCache : this._themeService.colors.contrastCache;\n                    }\n                    _addStyle(e, t) {\n                        e.setAttribute(\"style\", \"\".concat(e.getAttribute(\"style\") || \"\").concat(t, \";\"));\n                    }\n                    _isCellInSelection(e, t) {\n                        const i = this._selectionStart, s = this._selectionEnd;\n                        return !(!i || !s) && (this._columnSelectMode ? i[0] <= s[0] ? e >= i[0] && t >= i[1] && e < s[0] && t <= s[1] : e < i[0] && t >= i[1] && e >= s[0] && t <= s[1] : t > i[1] && t < s[1] || i[1] === s[1] && t === i[1] && e >= i[0] && e < s[0] || i[1] < s[1] && t === s[1] && e < s[0] || i[1] < s[1] && t === i[1] && e >= i[0]);\n                    }\n                    constructor(e, t, i, s, r, n, o){\n                        this._document = e, this._characterJoinerService = t, this._optionsService = i, this._coreBrowserService = s, this._coreService = r, this._decorationService = n, this._themeService = o, this._workCell = new a.CellData, this._columnSelectMode = !1, this.defaultSpacing = 0;\n                    }\n                };\n                function v(e, t, i) {\n                    for(; e.length < i;)e = t + e;\n                    return e;\n                }\n                t.DomRendererRowFactory = f = s([\n                    r(1, l.ICharacterJoinerService),\n                    r(2, h.IOptionsService),\n                    r(3, l.ICoreBrowserService),\n                    r(4, h.ICoreService),\n                    r(5, h.IDecorationService),\n                    r(6, l.IThemeService)\n                ], f);\n            },\n            2550: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.WidthCache = void 0, t.WidthCache = class {\n                    dispose() {\n                        this._container.remove(), this._measureElements.length = 0, this._holey = void 0;\n                    }\n                    clear() {\n                        this._flat.fill(-9999), this._holey = new Map;\n                    }\n                    setFont(e, t, i, s) {\n                        e === this._font && t === this._fontSize && i === this._weight && s === this._weightBold || (this._font = e, this._fontSize = t, this._weight = i, this._weightBold = s, this._container.style.fontFamily = this._font, this._container.style.fontSize = \"\".concat(this._fontSize, \"px\"), this._measureElements[0].style.fontWeight = \"\".concat(i), this._measureElements[1].style.fontWeight = \"\".concat(s), this._measureElements[2].style.fontWeight = \"\".concat(i), this._measureElements[3].style.fontWeight = \"\".concat(s), this.clear());\n                    }\n                    get(e, t, i) {\n                        let s = 0;\n                        if (!t && !i && 1 === e.length && (s = e.charCodeAt(0)) < 256) return -9999 !== this._flat[s] ? this._flat[s] : this._flat[s] = this._measure(e, 0);\n                        let r = e;\n                        t && (r += \"B\"), i && (r += \"I\");\n                        let n = this._holey.get(r);\n                        if (void 0 === n) {\n                            let s = 0;\n                            t && (s |= 1), i && (s |= 2), n = this._measure(e, s), this._holey.set(r, n);\n                        }\n                        return n;\n                    }\n                    _measure(e, t) {\n                        const i = this._measureElements[t];\n                        return i.textContent = e.repeat(32), i.offsetWidth / 32;\n                    }\n                    constructor(e){\n                        this._flat = new Float32Array(256), this._font = \"\", this._fontSize = 0, this._weight = \"normal\", this._weightBold = \"bold\", this._measureElements = [], this._container = e.createElement(\"div\"), this._container.style.position = \"absolute\", this._container.style.top = \"-50000px\", this._container.style.width = \"50000px\", this._container.style.whiteSpace = \"pre\", this._container.style.fontKerning = \"none\";\n                        const t = e.createElement(\"span\"), i = e.createElement(\"span\");\n                        i.style.fontWeight = \"bold\";\n                        const s = e.createElement(\"span\");\n                        s.style.fontStyle = \"italic\";\n                        const r = e.createElement(\"span\");\n                        r.style.fontWeight = \"bold\", r.style.fontStyle = \"italic\", this._measureElements = [\n                            t,\n                            i,\n                            s,\n                            r\n                        ], this._container.appendChild(t), this._container.appendChild(i), this._container.appendChild(s), this._container.appendChild(r), e.body.appendChild(this._container), this.clear();\n                    }\n                };\n            },\n            2223: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.TEXT_BASELINE = t.DIM_OPACITY = t.INVERTED_DEFAULT_COLOR = void 0;\n                const s = i(6114);\n                t.INVERTED_DEFAULT_COLOR = 257, t.DIM_OPACITY = .5, t.TEXT_BASELINE = s.isFirefox || s.isLegacyEdge ? \"bottom\" : \"ideographic\";\n            },\n            6171: (e, t)=>{\n                function i(e) {\n                    return 57508 <= e && e <= 57558;\n                }\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.createRenderDimensions = t.excludeFromContrastRatioDemands = t.isRestrictedPowerlineGlyph = t.isPowerlineGlyph = t.throwIfFalsy = void 0, t.throwIfFalsy = function(e) {\n                    if (!e) throw new Error(\"value must not be falsy\");\n                    return e;\n                }, t.isPowerlineGlyph = i, t.isRestrictedPowerlineGlyph = function(e) {\n                    return 57520 <= e && e <= 57527;\n                }, t.excludeFromContrastRatioDemands = function(e) {\n                    return i(e) || function(e) {\n                        return 9472 <= e && e <= 9631;\n                    }(e);\n                }, t.createRenderDimensions = function() {\n                    return {\n                        css: {\n                            canvas: {\n                                width: 0,\n                                height: 0\n                            },\n                            cell: {\n                                width: 0,\n                                height: 0\n                            }\n                        },\n                        device: {\n                            canvas: {\n                                width: 0,\n                                height: 0\n                            },\n                            cell: {\n                                width: 0,\n                                height: 0\n                            },\n                            char: {\n                                width: 0,\n                                height: 0,\n                                left: 0,\n                                top: 0\n                            }\n                        }\n                    };\n                };\n            },\n            456: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.SelectionModel = void 0, t.SelectionModel = class {\n                    clearSelection() {\n                        this.selectionStart = void 0, this.selectionEnd = void 0, this.isSelectAllActive = !1, this.selectionStartLength = 0;\n                    }\n                    get finalSelectionStart() {\n                        return this.isSelectAllActive ? [\n                            0,\n                            0\n                        ] : this.selectionEnd && this.selectionStart && this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n                    }\n                    get finalSelectionEnd() {\n                        if (this.isSelectAllActive) return [\n                            this._bufferService.cols,\n                            this._bufferService.buffer.ybase + this._bufferService.rows - 1\n                        ];\n                        if (this.selectionStart) {\n                            if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n                                const e = this.selectionStart[0] + this.selectionStartLength;\n                                return e > this._bufferService.cols ? e % this._bufferService.cols == 0 ? [\n                                    this._bufferService.cols,\n                                    this.selectionStart[1] + Math.floor(e / this._bufferService.cols) - 1\n                                ] : [\n                                    e % this._bufferService.cols,\n                                    this.selectionStart[1] + Math.floor(e / this._bufferService.cols)\n                                ] : [\n                                    e,\n                                    this.selectionStart[1]\n                                ];\n                            }\n                            if (this.selectionStartLength && this.selectionEnd[1] === this.selectionStart[1]) {\n                                const e = this.selectionStart[0] + this.selectionStartLength;\n                                return e > this._bufferService.cols ? [\n                                    e % this._bufferService.cols,\n                                    this.selectionStart[1] + Math.floor(e / this._bufferService.cols)\n                                ] : [\n                                    Math.max(e, this.selectionEnd[0]),\n                                    this.selectionEnd[1]\n                                ];\n                            }\n                            return this.selectionEnd;\n                        }\n                    }\n                    areSelectionValuesReversed() {\n                        const e = this.selectionStart, t = this.selectionEnd;\n                        return !(!e || !t) && (e[1] > t[1] || e[1] === t[1] && e[0] > t[0]);\n                    }\n                    handleTrim(e) {\n                        return this.selectionStart && (this.selectionStart[1] -= e), this.selectionEnd && (this.selectionEnd[1] -= e), this.selectionEnd && this.selectionEnd[1] < 0 ? (this.clearSelection(), !0) : (this.selectionStart && this.selectionStart[1] < 0 && (this.selectionStart[1] = 0), !1);\n                    }\n                    constructor(e){\n                        this._bufferService = e, this.isSelectAllActive = !1, this.selectionStartLength = 0;\n                    }\n                };\n            },\n            428: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CharSizeService = void 0;\n                const n = i(2585), o = i(8460), a = i(844);\n                let h = t.CharSizeService = class extends a.Disposable {\n                    get hasValidSize() {\n                        return this.width > 0 && this.height > 0;\n                    }\n                    measure() {\n                        const e = this._measureStrategy.measure();\n                        e.width === this.width && e.height === this.height || (this.width = e.width, this.height = e.height, this._onCharSizeChange.fire());\n                    }\n                    constructor(e, t, i){\n                        super(), this._optionsService = i, this.width = 0, this.height = 0, this._onCharSizeChange = this.register(new o.EventEmitter), this.onCharSizeChange = this._onCharSizeChange.event, this._measureStrategy = new c(e, t, this._optionsService), this.register(this._optionsService.onMultipleOptionChange([\n                            \"fontFamily\",\n                            \"fontSize\"\n                        ], ()=>this.measure()));\n                    }\n                };\n                t.CharSizeService = h = s([\n                    r(2, n.IOptionsService)\n                ], h);\n                class c {\n                    measure() {\n                        this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily, this._measureElement.style.fontSize = \"\".concat(this._optionsService.rawOptions.fontSize, \"px\");\n                        const e = {\n                            height: Number(this._measureElement.offsetHeight),\n                            width: Number(this._measureElement.offsetWidth)\n                        };\n                        return 0 !== e.width && 0 !== e.height && (this._result.width = e.width / 32, this._result.height = Math.ceil(e.height)), this._result;\n                    }\n                    constructor(e, t, i){\n                        this._document = e, this._parentElement = t, this._optionsService = i, this._result = {\n                            width: 0,\n                            height: 0\n                        }, this._measureElement = this._document.createElement(\"span\"), this._measureElement.classList.add(\"xterm-char-measure-element\"), this._measureElement.textContent = \"W\".repeat(32), this._measureElement.setAttribute(\"aria-hidden\", \"true\"), this._measureElement.style.whiteSpace = \"pre\", this._measureElement.style.fontKerning = \"none\", this._parentElement.appendChild(this._measureElement);\n                    }\n                }\n            },\n            4269: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CharacterJoinerService = t.JoinedCellData = void 0;\n                const n = i(3734), o = i(643), a = i(511), h = i(2585);\n                class c extends n.AttributeData {\n                    isCombined() {\n                        return 2097152;\n                    }\n                    getWidth() {\n                        return this._width;\n                    }\n                    getChars() {\n                        return this.combinedData;\n                    }\n                    getCode() {\n                        return 2097151;\n                    }\n                    setFromCharData(e) {\n                        throw new Error(\"not implemented\");\n                    }\n                    getAsCharData() {\n                        return [\n                            this.fg,\n                            this.getChars(),\n                            this.getWidth(),\n                            this.getCode()\n                        ];\n                    }\n                    constructor(e, t, i){\n                        super(), this.content = 0, this.combinedData = \"\", this.fg = e.fg, this.bg = e.bg, this.combinedData = t, this._width = i;\n                    }\n                }\n                t.JoinedCellData = c;\n                let l = t.CharacterJoinerService = class e {\n                    register(e) {\n                        const t = {\n                            id: this._nextCharacterJoinerId++,\n                            handler: e\n                        };\n                        return this._characterJoiners.push(t), t.id;\n                    }\n                    deregister(e) {\n                        for(let t = 0; t < this._characterJoiners.length; t++)if (this._characterJoiners[t].id === e) return this._characterJoiners.splice(t, 1), !0;\n                        return !1;\n                    }\n                    getJoinedCharacters(e) {\n                        if (0 === this._characterJoiners.length) return [];\n                        const t = this._bufferService.buffer.lines.get(e);\n                        if (!t || 0 === t.length) return [];\n                        const i = [], s = t.translateToString(!0);\n                        let r = 0, n = 0, a = 0, h = t.getFg(0), c = t.getBg(0);\n                        for(let e = 0; e < t.getTrimmedLength(); e++)if (t.loadCell(e, this._workCell), 0 !== this._workCell.getWidth()) {\n                            if (this._workCell.fg !== h || this._workCell.bg !== c) {\n                                if (e - r > 1) {\n                                    const e = this._getJoinedRanges(s, a, n, t, r);\n                                    for(let t = 0; t < e.length; t++)i.push(e[t]);\n                                }\n                                r = e, a = n, h = this._workCell.fg, c = this._workCell.bg;\n                            }\n                            n += this._workCell.getChars().length || o.WHITESPACE_CELL_CHAR.length;\n                        }\n                        if (this._bufferService.cols - r > 1) {\n                            const e = this._getJoinedRanges(s, a, n, t, r);\n                            for(let t = 0; t < e.length; t++)i.push(e[t]);\n                        }\n                        return i;\n                    }\n                    _getJoinedRanges(t, i, s, r, n) {\n                        const o = t.substring(i, s);\n                        let a = [];\n                        try {\n                            a = this._characterJoiners[0].handler(o);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                        for(let t = 1; t < this._characterJoiners.length; t++)try {\n                            const i = this._characterJoiners[t].handler(o);\n                            for(let t = 0; t < i.length; t++)e._mergeRanges(a, i[t]);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                        return this._stringRangesToCellRanges(a, r, n), a;\n                    }\n                    _stringRangesToCellRanges(e, t, i) {\n                        let s = 0, r = !1, n = 0, a = e[s];\n                        if (a) {\n                            for(let h = i; h < this._bufferService.cols; h++){\n                                const i = t.getWidth(h), c = t.getString(h).length || o.WHITESPACE_CELL_CHAR.length;\n                                if (0 !== i) {\n                                    if (!r && a[0] <= n && (a[0] = h, r = !0), a[1] <= n) {\n                                        if (a[1] = h, a = e[++s], !a) break;\n                                        a[0] <= n ? (a[0] = h, r = !0) : r = !1;\n                                    }\n                                    n += c;\n                                }\n                            }\n                            a && (a[1] = this._bufferService.cols);\n                        }\n                    }\n                    static _mergeRanges(e, t) {\n                        let i = !1;\n                        for(let s = 0; s < e.length; s++){\n                            const r = e[s];\n                            if (i) {\n                                if (t[1] <= r[0]) return e[s - 1][1] = t[1], e;\n                                if (t[1] <= r[1]) return e[s - 1][1] = Math.max(t[1], r[1]), e.splice(s, 1), e;\n                                e.splice(s, 1), s--;\n                            } else {\n                                if (t[1] <= r[0]) return e.splice(s, 0, t), e;\n                                if (t[1] <= r[1]) return r[0] = Math.min(t[0], r[0]), e;\n                                t[0] < r[1] && (r[0] = Math.min(t[0], r[0]), i = !0);\n                            }\n                        }\n                        return i ? e[e.length - 1][1] = t[1] : e.push(t), e;\n                    }\n                    constructor(e){\n                        this._bufferService = e, this._characterJoiners = [], this._nextCharacterJoinerId = 0, this._workCell = new a.CellData;\n                    }\n                };\n                t.CharacterJoinerService = l = s([\n                    r(0, h.IBufferService)\n                ], l);\n            },\n            5114: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CoreBrowserService = void 0, t.CoreBrowserService = class {\n                    get dpr() {\n                        return this.window.devicePixelRatio;\n                    }\n                    get isFocused() {\n                        return void 0 === this._cachedIsFocused && (this._cachedIsFocused = this._isFocused && this._textarea.ownerDocument.hasFocus(), queueMicrotask(()=>this._cachedIsFocused = void 0)), this._cachedIsFocused;\n                    }\n                    constructor(e, t){\n                        this._textarea = e, this.window = t, this._isFocused = !1, this._cachedIsFocused = void 0, this._textarea.addEventListener(\"focus\", ()=>this._isFocused = !0), this._textarea.addEventListener(\"blur\", ()=>this._isFocused = !1);\n                    }\n                };\n            },\n            8934: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.MouseService = void 0;\n                const n = i(4725), o = i(9806);\n                let a = t.MouseService = class {\n                    getCoords(e, t, i, s, r) {\n                        return (0, o.getCoords)(window, e, t, i, s, this._charSizeService.hasValidSize, this._renderService.dimensions.css.cell.width, this._renderService.dimensions.css.cell.height, r);\n                    }\n                    getMouseReportCoords(e, t) {\n                        const i = (0, o.getCoordsRelativeToElement)(window, e, t);\n                        if (this._charSizeService.hasValidSize) return i[0] = Math.min(Math.max(i[0], 0), this._renderService.dimensions.css.canvas.width - 1), i[1] = Math.min(Math.max(i[1], 0), this._renderService.dimensions.css.canvas.height - 1), {\n                            col: Math.floor(i[0] / this._renderService.dimensions.css.cell.width),\n                            row: Math.floor(i[1] / this._renderService.dimensions.css.cell.height),\n                            x: Math.floor(i[0]),\n                            y: Math.floor(i[1])\n                        };\n                    }\n                    constructor(e, t){\n                        this._renderService = e, this._charSizeService = t;\n                    }\n                };\n                t.MouseService = a = s([\n                    r(0, n.IRenderService),\n                    r(1, n.ICharSizeService)\n                ], a);\n            },\n            3230: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.RenderService = void 0;\n                const n = i(3656), o = i(6193), a = i(5596), h = i(4725), c = i(8460), l = i(844), d = i(7226), _ = i(2585);\n                let u = t.RenderService = class extends l.Disposable {\n                    get dimensions() {\n                        return this._renderer.value.dimensions;\n                    }\n                    _handleIntersectionChange(e) {\n                        this._isPaused = void 0 === e.isIntersecting ? 0 === e.intersectionRatio : !e.isIntersecting, this._isPaused || this._charSizeService.hasValidSize || this._charSizeService.measure(), !this._isPaused && this._needsFullRefresh && (this._pausedResizeTask.flush(), this.refreshRows(0, this._rowCount - 1), this._needsFullRefresh = !1);\n                    }\n                    refreshRows(e, t) {\n                        let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n                        this._isPaused ? this._needsFullRefresh = !0 : (i || (this._isNextRenderRedrawOnly = !1), this._renderDebouncer.refresh(e, t, this._rowCount));\n                    }\n                    _renderRows(e, t) {\n                        this._renderer.value && (e = Math.min(e, this._rowCount - 1), t = Math.min(t, this._rowCount - 1), this._renderer.value.renderRows(e, t), this._needsSelectionRefresh && (this._renderer.value.handleSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode), this._needsSelectionRefresh = !1), this._isNextRenderRedrawOnly || this._onRenderedViewportChange.fire({\n                            start: e,\n                            end: t\n                        }), this._onRender.fire({\n                            start: e,\n                            end: t\n                        }), this._isNextRenderRedrawOnly = !0);\n                    }\n                    resize(e, t) {\n                        this._rowCount = t, this._fireOnCanvasResize();\n                    }\n                    _handleOptionsChanged() {\n                        this._renderer.value && (this.refreshRows(0, this._rowCount - 1), this._fireOnCanvasResize());\n                    }\n                    _fireOnCanvasResize() {\n                        this._renderer.value && (this._renderer.value.dimensions.css.canvas.width === this._canvasWidth && this._renderer.value.dimensions.css.canvas.height === this._canvasHeight || this._onDimensionsChange.fire(this._renderer.value.dimensions));\n                    }\n                    hasRenderer() {\n                        return !!this._renderer.value;\n                    }\n                    setRenderer(e) {\n                        this._renderer.value = e, this._renderer.value.onRequestRedraw((e)=>this.refreshRows(e.start, e.end, !0)), this._needsSelectionRefresh = !0, this._fullRefresh();\n                    }\n                    addRefreshCallback(e) {\n                        return this._renderDebouncer.addRefreshCallback(e);\n                    }\n                    _fullRefresh() {\n                        this._isPaused ? this._needsFullRefresh = !0 : this.refreshRows(0, this._rowCount - 1);\n                    }\n                    clearTextureAtlas() {\n                        var e, t;\n                        this._renderer.value && (null === (t = (e = this._renderer.value).clearTextureAtlas) || void 0 === t || t.call(e), this._fullRefresh());\n                    }\n                    handleDevicePixelRatioChange() {\n                        this._charSizeService.measure(), this._renderer.value && (this._renderer.value.handleDevicePixelRatioChange(), this.refreshRows(0, this._rowCount - 1));\n                    }\n                    handleResize(e, t) {\n                        this._renderer.value && (this._isPaused ? this._pausedResizeTask.set(()=>this._renderer.value.handleResize(e, t)) : this._renderer.value.handleResize(e, t), this._fullRefresh());\n                    }\n                    handleCharSizeChanged() {\n                        var e;\n                        null === (e = this._renderer.value) || void 0 === e || e.handleCharSizeChanged();\n                    }\n                    handleBlur() {\n                        var e;\n                        null === (e = this._renderer.value) || void 0 === e || e.handleBlur();\n                    }\n                    handleFocus() {\n                        var e;\n                        null === (e = this._renderer.value) || void 0 === e || e.handleFocus();\n                    }\n                    handleSelectionChanged(e, t, i) {\n                        var s;\n                        this._selectionState.start = e, this._selectionState.end = t, this._selectionState.columnSelectMode = i, null === (s = this._renderer.value) || void 0 === s || s.handleSelectionChanged(e, t, i);\n                    }\n                    handleCursorMove() {\n                        var e;\n                        null === (e = this._renderer.value) || void 0 === e || e.handleCursorMove();\n                    }\n                    clear() {\n                        var e;\n                        null === (e = this._renderer.value) || void 0 === e || e.clear();\n                    }\n                    constructor(e, t, i, s, r, h, _, u){\n                        if (super(), this._rowCount = e, this._charSizeService = s, this._renderer = this.register(new l.MutableDisposable), this._pausedResizeTask = new d.DebouncedIdleTask, this._isPaused = !1, this._needsFullRefresh = !1, this._isNextRenderRedrawOnly = !0, this._needsSelectionRefresh = !1, this._canvasWidth = 0, this._canvasHeight = 0, this._selectionState = {\n                            start: void 0,\n                            end: void 0,\n                            columnSelectMode: !1\n                        }, this._onDimensionsChange = this.register(new c.EventEmitter), this.onDimensionsChange = this._onDimensionsChange.event, this._onRenderedViewportChange = this.register(new c.EventEmitter), this.onRenderedViewportChange = this._onRenderedViewportChange.event, this._onRender = this.register(new c.EventEmitter), this.onRender = this._onRender.event, this._onRefreshRequest = this.register(new c.EventEmitter), this.onRefreshRequest = this._onRefreshRequest.event, this._renderDebouncer = new o.RenderDebouncer(_.window, (e, t)=>this._renderRows(e, t)), this.register(this._renderDebouncer), this._screenDprMonitor = new a.ScreenDprMonitor(_.window), this._screenDprMonitor.setListener(()=>this.handleDevicePixelRatioChange()), this.register(this._screenDprMonitor), this.register(h.onResize(()=>this._fullRefresh())), this.register(h.buffers.onBufferActivate(()=>{\n                            var e;\n                            return null === (e = this._renderer.value) || void 0 === e ? void 0 : e.clear();\n                        })), this.register(i.onOptionChange(()=>this._handleOptionsChanged())), this.register(this._charSizeService.onCharSizeChange(()=>this.handleCharSizeChanged())), this.register(r.onDecorationRegistered(()=>this._fullRefresh())), this.register(r.onDecorationRemoved(()=>this._fullRefresh())), this.register(i.onMultipleOptionChange([\n                            \"customGlyphs\",\n                            \"drawBoldTextInBrightColors\",\n                            \"letterSpacing\",\n                            \"lineHeight\",\n                            \"fontFamily\",\n                            \"fontSize\",\n                            \"fontWeight\",\n                            \"fontWeightBold\",\n                            \"minimumContrastRatio\"\n                        ], ()=>{\n                            this.clear(), this.handleResize(h.cols, h.rows), this._fullRefresh();\n                        })), this.register(i.onMultipleOptionChange([\n                            \"cursorBlink\",\n                            \"cursorStyle\"\n                        ], ()=>this.refreshRows(h.buffer.y, h.buffer.y, !0))), this.register((0, n.addDisposableDomListener)(_.window, \"resize\", ()=>this.handleDevicePixelRatioChange())), this.register(u.onChangeColors(()=>this._fullRefresh())), \"IntersectionObserver\" in _.window) {\n                            const e = new _.window.IntersectionObserver((e)=>this._handleIntersectionChange(e[e.length - 1]), {\n                                threshold: 0\n                            });\n                            e.observe(t), this.register({\n                                dispose: ()=>e.disconnect()\n                            });\n                        }\n                    }\n                };\n                t.RenderService = u = s([\n                    r(2, _.IOptionsService),\n                    r(3, h.ICharSizeService),\n                    r(4, _.IDecorationService),\n                    r(5, _.IBufferService),\n                    r(6, h.ICoreBrowserService),\n                    r(7, h.IThemeService)\n                ], u);\n            },\n            9312: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.SelectionService = void 0;\n                const n = i(9806), o = i(9504), a = i(456), h = i(4725), c = i(8460), l = i(844), d = i(6114), _ = i(4841), u = i(511), f = i(2585), v = String.fromCharCode(160), p = new RegExp(v, \"g\");\n                let g = t.SelectionService = class extends l.Disposable {\n                    reset() {\n                        this.clearSelection();\n                    }\n                    disable() {\n                        this.clearSelection(), this._enabled = !1;\n                    }\n                    enable() {\n                        this._enabled = !0;\n                    }\n                    get selectionStart() {\n                        return this._model.finalSelectionStart;\n                    }\n                    get selectionEnd() {\n                        return this._model.finalSelectionEnd;\n                    }\n                    get hasSelection() {\n                        const e = this._model.finalSelectionStart, t = this._model.finalSelectionEnd;\n                        return !(!e || !t || e[0] === t[0] && e[1] === t[1]);\n                    }\n                    get selectionText() {\n                        const e = this._model.finalSelectionStart, t = this._model.finalSelectionEnd;\n                        if (!e || !t) return \"\";\n                        const i = this._bufferService.buffer, s = [];\n                        if (3 === this._activeSelectionMode) {\n                            if (e[0] === t[0]) return \"\";\n                            const r = e[0] < t[0] ? e[0] : t[0], n = e[0] < t[0] ? t[0] : e[0];\n                            for(let o = e[1]; o <= t[1]; o++){\n                                const e = i.translateBufferLineToString(o, !0, r, n);\n                                s.push(e);\n                            }\n                        } else {\n                            const r = e[1] === t[1] ? t[0] : void 0;\n                            s.push(i.translateBufferLineToString(e[1], !0, e[0], r));\n                            for(let r = e[1] + 1; r <= t[1] - 1; r++){\n                                const e = i.lines.get(r), t = i.translateBufferLineToString(r, !0);\n                                (null == e ? void 0 : e.isWrapped) ? s[s.length - 1] += t : s.push(t);\n                            }\n                            if (e[1] !== t[1]) {\n                                const e = i.lines.get(t[1]), r = i.translateBufferLineToString(t[1], !0, 0, t[0]);\n                                e && e.isWrapped ? s[s.length - 1] += r : s.push(r);\n                            }\n                        }\n                        return s.map((e)=>e.replace(p, \" \")).join(d.isWindows ? \"\\r\\n\" : \"\\n\");\n                    }\n                    clearSelection() {\n                        this._model.clearSelection(), this._removeMouseDownListeners(), this.refresh(), this._onSelectionChange.fire();\n                    }\n                    refresh(e) {\n                        this._refreshAnimationFrame || (this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(()=>this._refresh())), d.isLinux && e && this.selectionText.length && this._onLinuxMouseSelection.fire(this.selectionText);\n                    }\n                    _refresh() {\n                        this._refreshAnimationFrame = void 0, this._onRedrawRequest.fire({\n                            start: this._model.finalSelectionStart,\n                            end: this._model.finalSelectionEnd,\n                            columnSelectMode: 3 === this._activeSelectionMode\n                        });\n                    }\n                    _isClickInSelection(e) {\n                        const t = this._getMouseBufferCoords(e), i = this._model.finalSelectionStart, s = this._model.finalSelectionEnd;\n                        return !!(i && s && t) && this._areCoordsInSelection(t, i, s);\n                    }\n                    isCellInSelection(e, t) {\n                        const i = this._model.finalSelectionStart, s = this._model.finalSelectionEnd;\n                        return !(!i || !s) && this._areCoordsInSelection([\n                            e,\n                            t\n                        ], i, s);\n                    }\n                    _areCoordsInSelection(e, t, i) {\n                        return e[1] > t[1] && e[1] < i[1] || t[1] === i[1] && e[1] === t[1] && e[0] >= t[0] && e[0] < i[0] || t[1] < i[1] && e[1] === i[1] && e[0] < i[0] || t[1] < i[1] && e[1] === t[1] && e[0] >= t[0];\n                    }\n                    _selectWordAtCursor(e, t) {\n                        var i, s;\n                        const r = null === (s = null === (i = this._linkifier.currentLink) || void 0 === i ? void 0 : i.link) || void 0 === s ? void 0 : s.range;\n                        if (r) return this._model.selectionStart = [\n                            r.start.x - 1,\n                            r.start.y - 1\n                        ], this._model.selectionStartLength = (0, _.getRangeLength)(r, this._bufferService.cols), this._model.selectionEnd = void 0, !0;\n                        const n = this._getMouseBufferCoords(e);\n                        return !!n && (this._selectWordAt(n, t), this._model.selectionEnd = void 0, !0);\n                    }\n                    selectAll() {\n                        this._model.isSelectAllActive = !0, this.refresh(), this._onSelectionChange.fire();\n                    }\n                    selectLines(e, t) {\n                        this._model.clearSelection(), e = Math.max(e, 0), t = Math.min(t, this._bufferService.buffer.lines.length - 1), this._model.selectionStart = [\n                            0,\n                            e\n                        ], this._model.selectionEnd = [\n                            this._bufferService.cols,\n                            t\n                        ], this.refresh(), this._onSelectionChange.fire();\n                    }\n                    _handleTrim(e) {\n                        this._model.handleTrim(e) && this.refresh();\n                    }\n                    _getMouseBufferCoords(e) {\n                        const t = this._mouseService.getCoords(e, this._screenElement, this._bufferService.cols, this._bufferService.rows, !0);\n                        if (t) return t[0]--, t[1]--, t[1] += this._bufferService.buffer.ydisp, t;\n                    }\n                    _getMouseEventScrollAmount(e) {\n                        let t = (0, n.getCoordsRelativeToElement)(this._coreBrowserService.window, e, this._screenElement)[1];\n                        const i = this._renderService.dimensions.css.canvas.height;\n                        return t >= 0 && t <= i ? 0 : (t > i && (t -= i), t = Math.min(Math.max(t, -50), 50), t /= 50, t / Math.abs(t) + Math.round(14 * t));\n                    }\n                    shouldForceSelection(e) {\n                        return d.isMac ? e.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection : e.shiftKey;\n                    }\n                    handleMouseDown(e) {\n                        if (this._mouseDownTimeStamp = e.timeStamp, (2 !== e.button || !this.hasSelection) && 0 === e.button) {\n                            if (!this._enabled) {\n                                if (!this.shouldForceSelection(e)) return;\n                                e.stopPropagation();\n                            }\n                            e.preventDefault(), this._dragScrollAmount = 0, this._enabled && e.shiftKey ? this._handleIncrementalClick(e) : 1 === e.detail ? this._handleSingleClick(e) : 2 === e.detail ? this._handleDoubleClick(e) : 3 === e.detail && this._handleTripleClick(e), this._addMouseDownListeners(), this.refresh(!0);\n                        }\n                    }\n                    _addMouseDownListeners() {\n                        this._screenElement.ownerDocument && (this._screenElement.ownerDocument.addEventListener(\"mousemove\", this._mouseMoveListener), this._screenElement.ownerDocument.addEventListener(\"mouseup\", this._mouseUpListener)), this._dragScrollIntervalTimer = this._coreBrowserService.window.setInterval(()=>this._dragScroll(), 50);\n                    }\n                    _removeMouseDownListeners() {\n                        this._screenElement.ownerDocument && (this._screenElement.ownerDocument.removeEventListener(\"mousemove\", this._mouseMoveListener), this._screenElement.ownerDocument.removeEventListener(\"mouseup\", this._mouseUpListener)), this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer), this._dragScrollIntervalTimer = void 0;\n                    }\n                    _handleIncrementalClick(e) {\n                        this._model.selectionStart && (this._model.selectionEnd = this._getMouseBufferCoords(e));\n                    }\n                    _handleSingleClick(e) {\n                        if (this._model.selectionStartLength = 0, this._model.isSelectAllActive = !1, this._activeSelectionMode = this.shouldColumnSelect(e) ? 3 : 0, this._model.selectionStart = this._getMouseBufferCoords(e), !this._model.selectionStart) return;\n                        this._model.selectionEnd = void 0;\n                        const t = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n                        t && t.length !== this._model.selectionStart[0] && 0 === t.hasWidth(this._model.selectionStart[0]) && this._model.selectionStart[0]++;\n                    }\n                    _handleDoubleClick(e) {\n                        this._selectWordAtCursor(e, !0) && (this._activeSelectionMode = 1);\n                    }\n                    _handleTripleClick(e) {\n                        const t = this._getMouseBufferCoords(e);\n                        t && (this._activeSelectionMode = 2, this._selectLineAt(t[1]));\n                    }\n                    shouldColumnSelect(e) {\n                        return e.altKey && !(d.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n                    }\n                    _handleMouseMove(e) {\n                        if (e.stopImmediatePropagation(), !this._model.selectionStart) return;\n                        const t = this._model.selectionEnd ? [\n                            this._model.selectionEnd[0],\n                            this._model.selectionEnd[1]\n                        ] : null;\n                        if (this._model.selectionEnd = this._getMouseBufferCoords(e), !this._model.selectionEnd) return void this.refresh(!0);\n                        2 === this._activeSelectionMode ? this._model.selectionEnd[1] < this._model.selectionStart[1] ? this._model.selectionEnd[0] = 0 : this._model.selectionEnd[0] = this._bufferService.cols : 1 === this._activeSelectionMode && this._selectToWordAt(this._model.selectionEnd), this._dragScrollAmount = this._getMouseEventScrollAmount(e), 3 !== this._activeSelectionMode && (this._dragScrollAmount > 0 ? this._model.selectionEnd[0] = this._bufferService.cols : this._dragScrollAmount < 0 && (this._model.selectionEnd[0] = 0));\n                        const i = this._bufferService.buffer;\n                        if (this._model.selectionEnd[1] < i.lines.length) {\n                            const e = i.lines.get(this._model.selectionEnd[1]);\n                            e && 0 === e.hasWidth(this._model.selectionEnd[0]) && this._model.selectionEnd[0]++;\n                        }\n                        t && t[0] === this._model.selectionEnd[0] && t[1] === this._model.selectionEnd[1] || this.refresh(!0);\n                    }\n                    _dragScroll() {\n                        if (this._model.selectionEnd && this._model.selectionStart && this._dragScrollAmount) {\n                            this._onRequestScrollLines.fire({\n                                amount: this._dragScrollAmount,\n                                suppressScrollEvent: !1\n                            });\n                            const e = this._bufferService.buffer;\n                            this._dragScrollAmount > 0 ? (3 !== this._activeSelectionMode && (this._model.selectionEnd[0] = this._bufferService.cols), this._model.selectionEnd[1] = Math.min(e.ydisp + this._bufferService.rows, e.lines.length - 1)) : (3 !== this._activeSelectionMode && (this._model.selectionEnd[0] = 0), this._model.selectionEnd[1] = e.ydisp), this.refresh();\n                        }\n                    }\n                    _handleMouseUp(e) {\n                        const t = e.timeStamp - this._mouseDownTimeStamp;\n                        if (this._removeMouseDownListeners(), this.selectionText.length <= 1 && t < 500 && e.altKey && this._optionsService.rawOptions.altClickMovesCursor) {\n                            if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n                                const t = this._mouseService.getCoords(e, this._element, this._bufferService.cols, this._bufferService.rows, !1);\n                                if (t && void 0 !== t[0] && void 0 !== t[1]) {\n                                    const e = (0, o.moveToCellSequence)(t[0] - 1, t[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n                                    this._coreService.triggerDataEvent(e, !0);\n                                }\n                            }\n                        } else this._fireEventIfSelectionChanged();\n                    }\n                    _fireEventIfSelectionChanged() {\n                        const e = this._model.finalSelectionStart, t = this._model.finalSelectionEnd, i = !(!e || !t || e[0] === t[0] && e[1] === t[1]);\n                        i ? e && t && (this._oldSelectionStart && this._oldSelectionEnd && e[0] === this._oldSelectionStart[0] && e[1] === this._oldSelectionStart[1] && t[0] === this._oldSelectionEnd[0] && t[1] === this._oldSelectionEnd[1] || this._fireOnSelectionChange(e, t, i)) : this._oldHasSelection && this._fireOnSelectionChange(e, t, i);\n                    }\n                    _fireOnSelectionChange(e, t, i) {\n                        this._oldSelectionStart = e, this._oldSelectionEnd = t, this._oldHasSelection = i, this._onSelectionChange.fire();\n                    }\n                    _handleBufferActivate(e) {\n                        this.clearSelection(), this._trimListener.dispose(), this._trimListener = e.activeBuffer.lines.onTrim((e)=>this._handleTrim(e));\n                    }\n                    _convertViewportColToCharacterIndex(e, t) {\n                        let i = t;\n                        for(let s = 0; t >= s; s++){\n                            const r = e.loadCell(s, this._workCell).getChars().length;\n                            0 === this._workCell.getWidth() ? i-- : r > 1 && t !== s && (i += r - 1);\n                        }\n                        return i;\n                    }\n                    setSelection(e, t, i) {\n                        this._model.clearSelection(), this._removeMouseDownListeners(), this._model.selectionStart = [\n                            e,\n                            t\n                        ], this._model.selectionStartLength = i, this.refresh(), this._fireEventIfSelectionChanged();\n                    }\n                    rightClickSelect(e) {\n                        this._isClickInSelection(e) || (this._selectWordAtCursor(e, !1) && this.refresh(!0), this._fireEventIfSelectionChanged());\n                    }\n                    _getWordAt(e, t) {\n                        let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !0;\n                        if (e[0] >= this._bufferService.cols) return;\n                        const r = this._bufferService.buffer, n = r.lines.get(e[1]);\n                        if (!n) return;\n                        const o = r.translateBufferLineToString(e[1], !1);\n                        let a = this._convertViewportColToCharacterIndex(n, e[0]), h = a;\n                        const c = e[0] - a;\n                        let l = 0, d = 0, _ = 0, u = 0;\n                        if (\" \" === o.charAt(a)) {\n                            for(; a > 0 && \" \" === o.charAt(a - 1);)a--;\n                            for(; h < o.length && \" \" === o.charAt(h + 1);)h++;\n                        } else {\n                            let t = e[0], i = e[0];\n                            0 === n.getWidth(t) && (l++, t--), 2 === n.getWidth(i) && (d++, i++);\n                            const s = n.getString(i).length;\n                            for(s > 1 && (u += s - 1, h += s - 1); t > 0 && a > 0 && !this._isCharWordSeparator(n.loadCell(t - 1, this._workCell));){\n                                n.loadCell(t - 1, this._workCell);\n                                const e = this._workCell.getChars().length;\n                                0 === this._workCell.getWidth() ? (l++, t--) : e > 1 && (_ += e - 1, a -= e - 1), a--, t--;\n                            }\n                            for(; i < n.length && h + 1 < o.length && !this._isCharWordSeparator(n.loadCell(i + 1, this._workCell));){\n                                n.loadCell(i + 1, this._workCell);\n                                const e = this._workCell.getChars().length;\n                                2 === this._workCell.getWidth() ? (d++, i++) : e > 1 && (u += e - 1, h += e - 1), h++, i++;\n                            }\n                        }\n                        h++;\n                        let f = a + c - l + _, v = Math.min(this._bufferService.cols, h - a + l + d - _ - u);\n                        if (t || \"\" !== o.slice(a, h).trim()) {\n                            if (i && 0 === f && 32 !== n.getCodePoint(0)) {\n                                const t = r.lines.get(e[1] - 1);\n                                if (t && n.isWrapped && 32 !== t.getCodePoint(this._bufferService.cols - 1)) {\n                                    const t = this._getWordAt([\n                                        this._bufferService.cols - 1,\n                                        e[1] - 1\n                                    ], !1, !0, !1);\n                                    if (t) {\n                                        const e = this._bufferService.cols - t.start;\n                                        f -= e, v += e;\n                                    }\n                                }\n                            }\n                            if (s && f + v === this._bufferService.cols && 32 !== n.getCodePoint(this._bufferService.cols - 1)) {\n                                const t = r.lines.get(e[1] + 1);\n                                if ((null == t ? void 0 : t.isWrapped) && 32 !== t.getCodePoint(0)) {\n                                    const t = this._getWordAt([\n                                        0,\n                                        e[1] + 1\n                                    ], !1, !1, !0);\n                                    t && (v += t.length);\n                                }\n                            }\n                            return {\n                                start: f,\n                                length: v\n                            };\n                        }\n                    }\n                    _selectWordAt(e, t) {\n                        const i = this._getWordAt(e, t);\n                        if (i) {\n                            for(; i.start < 0;)i.start += this._bufferService.cols, e[1]--;\n                            this._model.selectionStart = [\n                                i.start,\n                                e[1]\n                            ], this._model.selectionStartLength = i.length;\n                        }\n                    }\n                    _selectToWordAt(e) {\n                        const t = this._getWordAt(e, !0);\n                        if (t) {\n                            let i = e[1];\n                            for(; t.start < 0;)t.start += this._bufferService.cols, i--;\n                            if (!this._model.areSelectionValuesReversed()) for(; t.start + t.length > this._bufferService.cols;)t.length -= this._bufferService.cols, i++;\n                            this._model.selectionEnd = [\n                                this._model.areSelectionValuesReversed() ? t.start : t.start + t.length,\n                                i\n                            ];\n                        }\n                    }\n                    _isCharWordSeparator(e) {\n                        return 0 !== e.getWidth() && this._optionsService.rawOptions.wordSeparator.indexOf(e.getChars()) >= 0;\n                    }\n                    _selectLineAt(e) {\n                        const t = this._bufferService.buffer.getWrappedRangeForLine(e), i = {\n                            start: {\n                                x: 0,\n                                y: t.first\n                            },\n                            end: {\n                                x: this._bufferService.cols - 1,\n                                y: t.last\n                            }\n                        };\n                        this._model.selectionStart = [\n                            0,\n                            t.first\n                        ], this._model.selectionEnd = void 0, this._model.selectionStartLength = (0, _.getRangeLength)(i, this._bufferService.cols);\n                    }\n                    constructor(e, t, i, s, r, n, o, h, d){\n                        super(), this._element = e, this._screenElement = t, this._linkifier = i, this._bufferService = s, this._coreService = r, this._mouseService = n, this._optionsService = o, this._renderService = h, this._coreBrowserService = d, this._dragScrollAmount = 0, this._enabled = !0, this._workCell = new u.CellData, this._mouseDownTimeStamp = 0, this._oldHasSelection = !1, this._oldSelectionStart = void 0, this._oldSelectionEnd = void 0, this._onLinuxMouseSelection = this.register(new c.EventEmitter), this.onLinuxMouseSelection = this._onLinuxMouseSelection.event, this._onRedrawRequest = this.register(new c.EventEmitter), this.onRequestRedraw = this._onRedrawRequest.event, this._onSelectionChange = this.register(new c.EventEmitter), this.onSelectionChange = this._onSelectionChange.event, this._onRequestScrollLines = this.register(new c.EventEmitter), this.onRequestScrollLines = this._onRequestScrollLines.event, this._mouseMoveListener = (e)=>this._handleMouseMove(e), this._mouseUpListener = (e)=>this._handleMouseUp(e), this._coreService.onUserInput(()=>{\n                            this.hasSelection && this.clearSelection();\n                        }), this._trimListener = this._bufferService.buffer.lines.onTrim((e)=>this._handleTrim(e)), this.register(this._bufferService.buffers.onBufferActivate((e)=>this._handleBufferActivate(e))), this.enable(), this._model = new a.SelectionModel(this._bufferService), this._activeSelectionMode = 0, this.register((0, l.toDisposable)(()=>{\n                            this._removeMouseDownListeners();\n                        }));\n                    }\n                };\n                t.SelectionService = g = s([\n                    r(3, f.IBufferService),\n                    r(4, f.ICoreService),\n                    r(5, h.IMouseService),\n                    r(6, f.IOptionsService),\n                    r(7, h.IRenderService),\n                    r(8, h.ICoreBrowserService)\n                ], g);\n            },\n            4725: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.IThemeService = t.ICharacterJoinerService = t.ISelectionService = t.IRenderService = t.IMouseService = t.ICoreBrowserService = t.ICharSizeService = void 0;\n                const s = i(8343);\n                t.ICharSizeService = (0, s.createDecorator)(\"CharSizeService\"), t.ICoreBrowserService = (0, s.createDecorator)(\"CoreBrowserService\"), t.IMouseService = (0, s.createDecorator)(\"MouseService\"), t.IRenderService = (0, s.createDecorator)(\"RenderService\"), t.ISelectionService = (0, s.createDecorator)(\"SelectionService\"), t.ICharacterJoinerService = (0, s.createDecorator)(\"CharacterJoinerService\"), t.IThemeService = (0, s.createDecorator)(\"ThemeService\");\n            },\n            6731: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.ThemeService = t.DEFAULT_ANSI_COLORS = void 0;\n                const n = i(7239), o = i(8055), a = i(8460), h = i(844), c = i(2585), l = o.css.toColor(\"#ffffff\"), d = o.css.toColor(\"#000000\"), _ = o.css.toColor(\"#ffffff\"), u = o.css.toColor(\"#000000\"), f = {\n                    css: \"rgba(255, 255, 255, 0.3)\",\n                    rgba: 4294967117\n                };\n                t.DEFAULT_ANSI_COLORS = Object.freeze((()=>{\n                    const e = [\n                        o.css.toColor(\"#2e3436\"),\n                        o.css.toColor(\"#cc0000\"),\n                        o.css.toColor(\"#4e9a06\"),\n                        o.css.toColor(\"#c4a000\"),\n                        o.css.toColor(\"#3465a4\"),\n                        o.css.toColor(\"#75507b\"),\n                        o.css.toColor(\"#06989a\"),\n                        o.css.toColor(\"#d3d7cf\"),\n                        o.css.toColor(\"#555753\"),\n                        o.css.toColor(\"#ef2929\"),\n                        o.css.toColor(\"#8ae234\"),\n                        o.css.toColor(\"#fce94f\"),\n                        o.css.toColor(\"#729fcf\"),\n                        o.css.toColor(\"#ad7fa8\"),\n                        o.css.toColor(\"#34e2e2\"),\n                        o.css.toColor(\"#eeeeec\")\n                    ], t = [\n                        0,\n                        95,\n                        135,\n                        175,\n                        215,\n                        255\n                    ];\n                    for(let i = 0; i < 216; i++){\n                        const s = t[i / 36 % 6 | 0], r = t[i / 6 % 6 | 0], n = t[i % 6];\n                        e.push({\n                            css: o.channels.toCss(s, r, n),\n                            rgba: o.channels.toRgba(s, r, n)\n                        });\n                    }\n                    for(let t = 0; t < 24; t++){\n                        const i = 8 + 10 * t;\n                        e.push({\n                            css: o.channels.toCss(i, i, i),\n                            rgba: o.channels.toRgba(i, i, i)\n                        });\n                    }\n                    return e;\n                })());\n                let v = t.ThemeService = class extends h.Disposable {\n                    get colors() {\n                        return this._colors;\n                    }\n                    _setTheme() {\n                        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n                        const i = this._colors;\n                        if (i.foreground = p(e.foreground, l), i.background = p(e.background, d), i.cursor = p(e.cursor, _), i.cursorAccent = p(e.cursorAccent, u), i.selectionBackgroundTransparent = p(e.selectionBackground, f), i.selectionBackgroundOpaque = o.color.blend(i.background, i.selectionBackgroundTransparent), i.selectionInactiveBackgroundTransparent = p(e.selectionInactiveBackground, i.selectionBackgroundTransparent), i.selectionInactiveBackgroundOpaque = o.color.blend(i.background, i.selectionInactiveBackgroundTransparent), i.selectionForeground = e.selectionForeground ? p(e.selectionForeground, o.NULL_COLOR) : void 0, i.selectionForeground === o.NULL_COLOR && (i.selectionForeground = void 0), o.color.isOpaque(i.selectionBackgroundTransparent)) {\n                            const e = .3;\n                            i.selectionBackgroundTransparent = o.color.opacity(i.selectionBackgroundTransparent, e);\n                        }\n                        if (o.color.isOpaque(i.selectionInactiveBackgroundTransparent)) {\n                            const e = .3;\n                            i.selectionInactiveBackgroundTransparent = o.color.opacity(i.selectionInactiveBackgroundTransparent, e);\n                        }\n                        if (i.ansi = t.DEFAULT_ANSI_COLORS.slice(), i.ansi[0] = p(e.black, t.DEFAULT_ANSI_COLORS[0]), i.ansi[1] = p(e.red, t.DEFAULT_ANSI_COLORS[1]), i.ansi[2] = p(e.green, t.DEFAULT_ANSI_COLORS[2]), i.ansi[3] = p(e.yellow, t.DEFAULT_ANSI_COLORS[3]), i.ansi[4] = p(e.blue, t.DEFAULT_ANSI_COLORS[4]), i.ansi[5] = p(e.magenta, t.DEFAULT_ANSI_COLORS[5]), i.ansi[6] = p(e.cyan, t.DEFAULT_ANSI_COLORS[6]), i.ansi[7] = p(e.white, t.DEFAULT_ANSI_COLORS[7]), i.ansi[8] = p(e.brightBlack, t.DEFAULT_ANSI_COLORS[8]), i.ansi[9] = p(e.brightRed, t.DEFAULT_ANSI_COLORS[9]), i.ansi[10] = p(e.brightGreen, t.DEFAULT_ANSI_COLORS[10]), i.ansi[11] = p(e.brightYellow, t.DEFAULT_ANSI_COLORS[11]), i.ansi[12] = p(e.brightBlue, t.DEFAULT_ANSI_COLORS[12]), i.ansi[13] = p(e.brightMagenta, t.DEFAULT_ANSI_COLORS[13]), i.ansi[14] = p(e.brightCyan, t.DEFAULT_ANSI_COLORS[14]), i.ansi[15] = p(e.brightWhite, t.DEFAULT_ANSI_COLORS[15]), e.extendedAnsi) {\n                            const s = Math.min(i.ansi.length - 16, e.extendedAnsi.length);\n                            for(let r = 0; r < s; r++)i.ansi[r + 16] = p(e.extendedAnsi[r], t.DEFAULT_ANSI_COLORS[r + 16]);\n                        }\n                        this._contrastCache.clear(), this._halfContrastCache.clear(), this._updateRestoreColors(), this._onChangeColors.fire(this.colors);\n                    }\n                    restoreColor(e) {\n                        this._restoreColor(e), this._onChangeColors.fire(this.colors);\n                    }\n                    _restoreColor(e) {\n                        if (void 0 !== e) switch(e){\n                            case 256:\n                                this._colors.foreground = this._restoreColors.foreground;\n                                break;\n                            case 257:\n                                this._colors.background = this._restoreColors.background;\n                                break;\n                            case 258:\n                                this._colors.cursor = this._restoreColors.cursor;\n                                break;\n                            default:\n                                this._colors.ansi[e] = this._restoreColors.ansi[e];\n                        }\n                        else for(let e = 0; e < this._restoreColors.ansi.length; ++e)this._colors.ansi[e] = this._restoreColors.ansi[e];\n                    }\n                    modifyColors(e) {\n                        e(this._colors), this._onChangeColors.fire(this.colors);\n                    }\n                    _updateRestoreColors() {\n                        this._restoreColors = {\n                            foreground: this._colors.foreground,\n                            background: this._colors.background,\n                            cursor: this._colors.cursor,\n                            ansi: this._colors.ansi.slice()\n                        };\n                    }\n                    constructor(e){\n                        super(), this._optionsService = e, this._contrastCache = new n.ColorContrastCache, this._halfContrastCache = new n.ColorContrastCache, this._onChangeColors = this.register(new a.EventEmitter), this.onChangeColors = this._onChangeColors.event, this._colors = {\n                            foreground: l,\n                            background: d,\n                            cursor: _,\n                            cursorAccent: u,\n                            selectionForeground: void 0,\n                            selectionBackgroundTransparent: f,\n                            selectionBackgroundOpaque: o.color.blend(d, f),\n                            selectionInactiveBackgroundTransparent: f,\n                            selectionInactiveBackgroundOpaque: o.color.blend(d, f),\n                            ansi: t.DEFAULT_ANSI_COLORS.slice(),\n                            contrastCache: this._contrastCache,\n                            halfContrastCache: this._halfContrastCache\n                        }, this._updateRestoreColors(), this._setTheme(this._optionsService.rawOptions.theme), this.register(this._optionsService.onSpecificOptionChange(\"minimumContrastRatio\", ()=>this._contrastCache.clear())), this.register(this._optionsService.onSpecificOptionChange(\"theme\", ()=>this._setTheme(this._optionsService.rawOptions.theme)));\n                    }\n                };\n                function p(e, t) {\n                    if (void 0 !== e) try {\n                        return o.css.toColor(e);\n                    } catch (e) {}\n                    return t;\n                }\n                t.ThemeService = v = s([\n                    r(0, c.IOptionsService)\n                ], v);\n            },\n            6349: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CircularList = void 0;\n                const s = i(8460), r = i(844);\n                class n extends r.Disposable {\n                    get maxLength() {\n                        return this._maxLength;\n                    }\n                    set maxLength(e) {\n                        if (this._maxLength === e) return;\n                        const t = new Array(e);\n                        for(let i = 0; i < Math.min(e, this.length); i++)t[i] = this._array[this._getCyclicIndex(i)];\n                        this._array = t, this._maxLength = e, this._startIndex = 0;\n                    }\n                    get length() {\n                        return this._length;\n                    }\n                    set length(e) {\n                        if (e > this._length) for(let t = this._length; t < e; t++)this._array[t] = void 0;\n                        this._length = e;\n                    }\n                    get(e) {\n                        return this._array[this._getCyclicIndex(e)];\n                    }\n                    set(e, t) {\n                        this._array[this._getCyclicIndex(e)] = t;\n                    }\n                    push(e) {\n                        this._array[this._getCyclicIndex(this._length)] = e, this._length === this._maxLength ? (this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1)) : this._length++;\n                    }\n                    recycle() {\n                        if (this._length !== this._maxLength) throw new Error(\"Can only recycle when the buffer is full\");\n                        return this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1), this._array[this._getCyclicIndex(this._length - 1)];\n                    }\n                    get isFull() {\n                        return this._length === this._maxLength;\n                    }\n                    pop() {\n                        return this._array[this._getCyclicIndex(this._length-- - 1)];\n                    }\n                    splice(e, t) {\n                        for(var _len = arguments.length, i = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n                            i[_key - 2] = arguments[_key];\n                        }\n                        if (t) {\n                            for(let i = e; i < this._length - t; i++)this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + t)];\n                            this._length -= t, this.onDeleteEmitter.fire({\n                                index: e,\n                                amount: t\n                            });\n                        }\n                        for(let t = this._length - 1; t >= e; t--)this._array[this._getCyclicIndex(t + i.length)] = this._array[this._getCyclicIndex(t)];\n                        for(let t = 0; t < i.length; t++)this._array[this._getCyclicIndex(e + t)] = i[t];\n                        if (i.length && this.onInsertEmitter.fire({\n                            index: e,\n                            amount: i.length\n                        }), this._length + i.length > this._maxLength) {\n                            const e = this._length + i.length - this._maxLength;\n                            this._startIndex += e, this._length = this._maxLength, this.onTrimEmitter.fire(e);\n                        } else this._length += i.length;\n                    }\n                    trimStart(e) {\n                        e > this._length && (e = this._length), this._startIndex += e, this._length -= e, this.onTrimEmitter.fire(e);\n                    }\n                    shiftElements(e, t, i) {\n                        if (!(t <= 0)) {\n                            if (e < 0 || e >= this._length) throw new Error(\"start argument out of range\");\n                            if (e + i < 0) throw new Error(\"Cannot shift elements in list beyond index 0\");\n                            if (i > 0) {\n                                for(let s = t - 1; s >= 0; s--)this.set(e + s + i, this.get(e + s));\n                                const s = e + t + i - this._length;\n                                if (s > 0) for(this._length += s; this._length > this._maxLength;)this._length--, this._startIndex++, this.onTrimEmitter.fire(1);\n                            } else for(let s = 0; s < t; s++)this.set(e + s + i, this.get(e + s));\n                        }\n                    }\n                    _getCyclicIndex(e) {\n                        return (this._startIndex + e) % this._maxLength;\n                    }\n                    constructor(e){\n                        super(), this._maxLength = e, this.onDeleteEmitter = this.register(new s.EventEmitter), this.onDelete = this.onDeleteEmitter.event, this.onInsertEmitter = this.register(new s.EventEmitter), this.onInsert = this.onInsertEmitter.event, this.onTrimEmitter = this.register(new s.EventEmitter), this.onTrim = this.onTrimEmitter.event, this._array = new Array(this._maxLength), this._startIndex = 0, this._length = 0;\n                    }\n                }\n                t.CircularList = n;\n            },\n            1439: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.clone = void 0, t.clone = function e(t) {\n                    let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;\n                    if (\"object\" != typeof t) return t;\n                    const s = Array.isArray(t) ? [] : {};\n                    for(const r in t)s[r] = i <= 1 ? t[r] : t[r] && e(t[r], i - 1);\n                    return s;\n                };\n            },\n            8055: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.contrastRatio = t.toPaddedHex = t.rgba = t.rgb = t.css = t.color = t.channels = t.NULL_COLOR = void 0;\n                const s = i(6114);\n                let r = 0, n = 0, o = 0, a = 0;\n                var h, c, l, d, _;\n                function u(e) {\n                    const t = e.toString(16);\n                    return t.length < 2 ? \"0\" + t : t;\n                }\n                function f(e, t) {\n                    return e < t ? (t + .05) / (e + .05) : (e + .05) / (t + .05);\n                }\n                t.NULL_COLOR = {\n                    css: \"#00000000\",\n                    rgba: 0\n                }, function(e) {\n                    e.toCss = function(e, t, i, s) {\n                        return void 0 !== s ? \"#\".concat(u(e)).concat(u(t)).concat(u(i)).concat(u(s)) : \"#\".concat(u(e)).concat(u(t)).concat(u(i));\n                    }, e.toRgba = function(e, t, i) {\n                        let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 255;\n                        return (e << 24 | t << 16 | i << 8 | s) >>> 0;\n                    };\n                }(h || (t.channels = h = {})), function(e) {\n                    function t(e, t) {\n                        return a = Math.round(255 * t), [r, n, o] = _.toChannels(e.rgba), {\n                            css: h.toCss(r, n, o, a),\n                            rgba: h.toRgba(r, n, o, a)\n                        };\n                    }\n                    e.blend = function(e, t) {\n                        if (a = (255 & t.rgba) / 255, 1 === a) return {\n                            css: t.css,\n                            rgba: t.rgba\n                        };\n                        const i = t.rgba >> 24 & 255, s = t.rgba >> 16 & 255, c = t.rgba >> 8 & 255, l = e.rgba >> 24 & 255, d = e.rgba >> 16 & 255, _ = e.rgba >> 8 & 255;\n                        return r = l + Math.round((i - l) * a), n = d + Math.round((s - d) * a), o = _ + Math.round((c - _) * a), {\n                            css: h.toCss(r, n, o),\n                            rgba: h.toRgba(r, n, o)\n                        };\n                    }, e.isOpaque = function(e) {\n                        return 255 == (255 & e.rgba);\n                    }, e.ensureContrastRatio = function(e, t, i) {\n                        const s = _.ensureContrastRatio(e.rgba, t.rgba, i);\n                        if (s) return _.toColor(s >> 24 & 255, s >> 16 & 255, s >> 8 & 255);\n                    }, e.opaque = function(e) {\n                        const t = (255 | e.rgba) >>> 0;\n                        return [r, n, o] = _.toChannels(t), {\n                            css: h.toCss(r, n, o),\n                            rgba: t\n                        };\n                    }, e.opacity = t, e.multiplyOpacity = function(e, i) {\n                        return a = 255 & e.rgba, t(e, a * i / 255);\n                    }, e.toColorRGB = function(e) {\n                        return [\n                            e.rgba >> 24 & 255,\n                            e.rgba >> 16 & 255,\n                            e.rgba >> 8 & 255\n                        ];\n                    };\n                }(c || (t.color = c = {})), function(e) {\n                    let t, i;\n                    if (!s.isNode) {\n                        const e = document.createElement(\"canvas\");\n                        e.width = 1, e.height = 1;\n                        const s = e.getContext(\"2d\", {\n                            willReadFrequently: !0\n                        });\n                        s && (t = s, t.globalCompositeOperation = \"copy\", i = t.createLinearGradient(0, 0, 1, 1));\n                    }\n                    e.toColor = function(e) {\n                        if (e.match(/#[\\da-f]{3,8}/i)) switch(e.length){\n                            case 4:\n                                return r = parseInt(e.slice(1, 2).repeat(2), 16), n = parseInt(e.slice(2, 3).repeat(2), 16), o = parseInt(e.slice(3, 4).repeat(2), 16), _.toColor(r, n, o);\n                            case 5:\n                                return r = parseInt(e.slice(1, 2).repeat(2), 16), n = parseInt(e.slice(2, 3).repeat(2), 16), o = parseInt(e.slice(3, 4).repeat(2), 16), a = parseInt(e.slice(4, 5).repeat(2), 16), _.toColor(r, n, o, a);\n                            case 7:\n                                return {\n                                    css: e,\n                                    rgba: (parseInt(e.slice(1), 16) << 8 | 255) >>> 0\n                                };\n                            case 9:\n                                return {\n                                    css: e,\n                                    rgba: parseInt(e.slice(1), 16) >>> 0\n                                };\n                        }\n                        const s = e.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n                        if (s) return r = parseInt(s[1]), n = parseInt(s[2]), o = parseInt(s[3]), a = Math.round(255 * (void 0 === s[5] ? 1 : parseFloat(s[5]))), _.toColor(r, n, o, a);\n                        if (!t || !i) throw new Error(\"css.toColor: Unsupported css format\");\n                        if (t.fillStyle = i, t.fillStyle = e, \"string\" != typeof t.fillStyle) throw new Error(\"css.toColor: Unsupported css format\");\n                        if (t.fillRect(0, 0, 1, 1), [r, n, o, a] = t.getImageData(0, 0, 1, 1).data, 255 !== a) throw new Error(\"css.toColor: Unsupported css format\");\n                        return {\n                            rgba: h.toRgba(r, n, o, a),\n                            css: e\n                        };\n                    };\n                }(l || (t.css = l = {})), function(e) {\n                    function t(e, t, i) {\n                        const s = e / 255, r = t / 255, n = i / 255;\n                        return .2126 * (s <= .03928 ? s / 12.92 : Math.pow((s + .055) / 1.055, 2.4)) + .7152 * (r <= .03928 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4)) + .0722 * (n <= .03928 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4));\n                    }\n                    e.relativeLuminance = function(e) {\n                        return t(e >> 16 & 255, e >> 8 & 255, 255 & e);\n                    }, e.relativeLuminance2 = t;\n                }(d || (t.rgb = d = {})), function(e) {\n                    function t(e, t, i) {\n                        const s = e >> 24 & 255, r = e >> 16 & 255, n = e >> 8 & 255;\n                        let o = t >> 24 & 255, a = t >> 16 & 255, h = t >> 8 & 255, c = f(d.relativeLuminance2(o, a, h), d.relativeLuminance2(s, r, n));\n                        for(; c < i && (o > 0 || a > 0 || h > 0);)o -= Math.max(0, Math.ceil(.1 * o)), a -= Math.max(0, Math.ceil(.1 * a)), h -= Math.max(0, Math.ceil(.1 * h)), c = f(d.relativeLuminance2(o, a, h), d.relativeLuminance2(s, r, n));\n                        return (o << 24 | a << 16 | h << 8 | 255) >>> 0;\n                    }\n                    function i(e, t, i) {\n                        const s = e >> 24 & 255, r = e >> 16 & 255, n = e >> 8 & 255;\n                        let o = t >> 24 & 255, a = t >> 16 & 255, h = t >> 8 & 255, c = f(d.relativeLuminance2(o, a, h), d.relativeLuminance2(s, r, n));\n                        for(; c < i && (o < 255 || a < 255 || h < 255);)o = Math.min(255, o + Math.ceil(.1 * (255 - o))), a = Math.min(255, a + Math.ceil(.1 * (255 - a))), h = Math.min(255, h + Math.ceil(.1 * (255 - h))), c = f(d.relativeLuminance2(o, a, h), d.relativeLuminance2(s, r, n));\n                        return (o << 24 | a << 16 | h << 8 | 255) >>> 0;\n                    }\n                    e.ensureContrastRatio = function(e, s, r) {\n                        const n = d.relativeLuminance(e >> 8), o = d.relativeLuminance(s >> 8);\n                        if (f(n, o) < r) {\n                            if (o < n) {\n                                const o = t(e, s, r), a = f(n, d.relativeLuminance(o >> 8));\n                                if (a < r) {\n                                    const t = i(e, s, r);\n                                    return a > f(n, d.relativeLuminance(t >> 8)) ? o : t;\n                                }\n                                return o;\n                            }\n                            const a = i(e, s, r), h = f(n, d.relativeLuminance(a >> 8));\n                            if (h < r) {\n                                const i = t(e, s, r);\n                                return h > f(n, d.relativeLuminance(i >> 8)) ? a : i;\n                            }\n                            return a;\n                        }\n                    }, e.reduceLuminance = t, e.increaseLuminance = i, e.toChannels = function(e) {\n                        return [\n                            e >> 24 & 255,\n                            e >> 16 & 255,\n                            e >> 8 & 255,\n                            255 & e\n                        ];\n                    }, e.toColor = function(e, t, i, s) {\n                        return {\n                            css: h.toCss(e, t, i, s),\n                            rgba: h.toRgba(e, t, i, s)\n                        };\n                    };\n                }(_ || (t.rgba = _ = {})), t.toPaddedHex = u, t.contrastRatio = f;\n            },\n            8969: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CoreTerminal = void 0;\n                const s = i(844), r = i(2585), n = i(4348), o = i(7866), a = i(744), h = i(7302), c = i(6975), l = i(8460), d = i(1753), _ = i(1480), u = i(7994), f = i(9282), v = i(5435), p = i(5981), g = i(2660);\n                let m = !1;\n                class S extends s.Disposable {\n                    get onScroll() {\n                        return this._onScrollApi || (this._onScrollApi = this.register(new l.EventEmitter), this._onScroll.event((e)=>{\n                            var t;\n                            null === (t = this._onScrollApi) || void 0 === t || t.fire(e.position);\n                        })), this._onScrollApi.event;\n                    }\n                    get cols() {\n                        return this._bufferService.cols;\n                    }\n                    get rows() {\n                        return this._bufferService.rows;\n                    }\n                    get buffers() {\n                        return this._bufferService.buffers;\n                    }\n                    get options() {\n                        return this.optionsService.options;\n                    }\n                    set options(e) {\n                        for(const t in e)this.optionsService.options[t] = e[t];\n                    }\n                    write(e, t) {\n                        this._writeBuffer.write(e, t);\n                    }\n                    writeSync(e, t) {\n                        this._logService.logLevel <= r.LogLevelEnum.WARN && !m && (this._logService.warn(\"writeSync is unreliable and will be removed soon.\"), m = !0), this._writeBuffer.writeSync(e, t);\n                    }\n                    resize(e, t) {\n                        isNaN(e) || isNaN(t) || (e = Math.max(e, a.MINIMUM_COLS), t = Math.max(t, a.MINIMUM_ROWS), this._bufferService.resize(e, t));\n                    }\n                    scroll(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        this._bufferService.scroll(e, t);\n                    }\n                    scrollLines(e, t, i) {\n                        this._bufferService.scrollLines(e, t, i);\n                    }\n                    scrollPages(e) {\n                        this.scrollLines(e * (this.rows - 1));\n                    }\n                    scrollToTop() {\n                        this.scrollLines(-this._bufferService.buffer.ydisp);\n                    }\n                    scrollToBottom() {\n                        this.scrollLines(this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);\n                    }\n                    scrollToLine(e) {\n                        const t = e - this._bufferService.buffer.ydisp;\n                        0 !== t && this.scrollLines(t);\n                    }\n                    registerEscHandler(e, t) {\n                        return this._inputHandler.registerEscHandler(e, t);\n                    }\n                    registerDcsHandler(e, t) {\n                        return this._inputHandler.registerDcsHandler(e, t);\n                    }\n                    registerCsiHandler(e, t) {\n                        return this._inputHandler.registerCsiHandler(e, t);\n                    }\n                    registerOscHandler(e, t) {\n                        return this._inputHandler.registerOscHandler(e, t);\n                    }\n                    _setup() {\n                        this._handleWindowsPtyOptionChange();\n                    }\n                    reset() {\n                        this._inputHandler.reset(), this._bufferService.reset(), this._charsetService.reset(), this.coreService.reset(), this.coreMouseService.reset();\n                    }\n                    _handleWindowsPtyOptionChange() {\n                        let e = !1;\n                        const t = this.optionsService.rawOptions.windowsPty;\n                        t && void 0 !== t.buildNumber && void 0 !== t.buildNumber ? e = !!(\"conpty\" === t.backend && t.buildNumber < 21376) : this.optionsService.rawOptions.windowsMode && (e = !0), e ? this._enableWindowsWrappingHeuristics() : this._windowsWrappingHeuristics.clear();\n                    }\n                    _enableWindowsWrappingHeuristics() {\n                        if (!this._windowsWrappingHeuristics.value) {\n                            const e = [];\n                            e.push(this.onLineFeed(f.updateWindowsModeWrappedState.bind(null, this._bufferService))), e.push(this.registerCsiHandler({\n                                final: \"H\"\n                            }, ()=>((0, f.updateWindowsModeWrappedState)(this._bufferService), !1))), this._windowsWrappingHeuristics.value = (0, s.toDisposable)(()=>{\n                                for (const t of e)t.dispose();\n                            });\n                        }\n                    }\n                    constructor(e){\n                        super(), this._windowsWrappingHeuristics = this.register(new s.MutableDisposable), this._onBinary = this.register(new l.EventEmitter), this.onBinary = this._onBinary.event, this._onData = this.register(new l.EventEmitter), this.onData = this._onData.event, this._onLineFeed = this.register(new l.EventEmitter), this.onLineFeed = this._onLineFeed.event, this._onResize = this.register(new l.EventEmitter), this.onResize = this._onResize.event, this._onWriteParsed = this.register(new l.EventEmitter), this.onWriteParsed = this._onWriteParsed.event, this._onScroll = this.register(new l.EventEmitter), this._instantiationService = new n.InstantiationService, this.optionsService = this.register(new h.OptionsService(e)), this._instantiationService.setService(r.IOptionsService, this.optionsService), this._bufferService = this.register(this._instantiationService.createInstance(a.BufferService)), this._instantiationService.setService(r.IBufferService, this._bufferService), this._logService = this.register(this._instantiationService.createInstance(o.LogService)), this._instantiationService.setService(r.ILogService, this._logService), this.coreService = this.register(this._instantiationService.createInstance(c.CoreService)), this._instantiationService.setService(r.ICoreService, this.coreService), this.coreMouseService = this.register(this._instantiationService.createInstance(d.CoreMouseService)), this._instantiationService.setService(r.ICoreMouseService, this.coreMouseService), this.unicodeService = this.register(this._instantiationService.createInstance(_.UnicodeService)), this._instantiationService.setService(r.IUnicodeService, this.unicodeService), this._charsetService = this._instantiationService.createInstance(u.CharsetService), this._instantiationService.setService(r.ICharsetService, this._charsetService), this._oscLinkService = this._instantiationService.createInstance(g.OscLinkService), this._instantiationService.setService(r.IOscLinkService, this._oscLinkService), this._inputHandler = this.register(new v.InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService)), this.register((0, l.forwardEvent)(this._inputHandler.onLineFeed, this._onLineFeed)), this.register(this._inputHandler), this.register((0, l.forwardEvent)(this._bufferService.onResize, this._onResize)), this.register((0, l.forwardEvent)(this.coreService.onData, this._onData)), this.register((0, l.forwardEvent)(this.coreService.onBinary, this._onBinary)), this.register(this.coreService.onRequestScrollToBottom(()=>this.scrollToBottom())), this.register(this.coreService.onUserInput(()=>this._writeBuffer.handleUserInput())), this.register(this.optionsService.onMultipleOptionChange([\n                            \"windowsMode\",\n                            \"windowsPty\"\n                        ], ()=>this._handleWindowsPtyOptionChange())), this.register(this._bufferService.onScroll((e)=>{\n                            this._onScroll.fire({\n                                position: this._bufferService.buffer.ydisp,\n                                source: 0\n                            }), this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n                        })), this.register(this._inputHandler.onScroll((e)=>{\n                            this._onScroll.fire({\n                                position: this._bufferService.buffer.ydisp,\n                                source: 0\n                            }), this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n                        })), this._writeBuffer = this.register(new p.WriteBuffer((e, t)=>this._inputHandler.parse(e, t))), this.register((0, l.forwardEvent)(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n                    }\n                }\n                t.CoreTerminal = S;\n            },\n            8460: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.forwardEvent = t.EventEmitter = void 0, t.EventEmitter = class {\n                    get event() {\n                        return this._event || (this._event = (e)=>(this._listeners.push(e), {\n                                dispose: ()=>{\n                                    if (!this._disposed) {\n                                        for(let t = 0; t < this._listeners.length; t++)if (this._listeners[t] === e) return void this._listeners.splice(t, 1);\n                                    }\n                                }\n                            })), this._event;\n                    }\n                    fire(e, t) {\n                        const i = [];\n                        for(let e = 0; e < this._listeners.length; e++)i.push(this._listeners[e]);\n                        for(let s = 0; s < i.length; s++)i[s].call(void 0, e, t);\n                    }\n                    dispose() {\n                        this.clearListeners(), this._disposed = !0;\n                    }\n                    clearListeners() {\n                        this._listeners && (this._listeners.length = 0);\n                    }\n                    constructor(){\n                        this._listeners = [], this._disposed = !1;\n                    }\n                }, t.forwardEvent = function(e, t) {\n                    return e((e)=>t.fire(e));\n                };\n            },\n            5435: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.InputHandler = t.WindowsOptionsReportType = void 0;\n                const n = i(2584), o = i(7116), a = i(2015), h = i(844), c = i(482), l = i(8437), d = i(8460), _ = i(643), u = i(511), f = i(3734), v = i(2585), p = i(6242), g = i(6351), m = i(5941), S = {\n                    \"(\": 0,\n                    \")\": 1,\n                    \"*\": 2,\n                    \"+\": 3,\n                    \"-\": 1,\n                    \".\": 2\n                }, C = 131072;\n                function b(e, t) {\n                    if (e > 24) return t.setWinLines || !1;\n                    switch(e){\n                        case 1:\n                            return !!t.restoreWin;\n                        case 2:\n                            return !!t.minimizeWin;\n                        case 3:\n                            return !!t.setWinPosition;\n                        case 4:\n                            return !!t.setWinSizePixels;\n                        case 5:\n                            return !!t.raiseWin;\n                        case 6:\n                            return !!t.lowerWin;\n                        case 7:\n                            return !!t.refreshWin;\n                        case 8:\n                            return !!t.setWinSizeChars;\n                        case 9:\n                            return !!t.maximizeWin;\n                        case 10:\n                            return !!t.fullscreenWin;\n                        case 11:\n                            return !!t.getWinState;\n                        case 13:\n                            return !!t.getWinPosition;\n                        case 14:\n                            return !!t.getWinSizePixels;\n                        case 15:\n                            return !!t.getScreenSizePixels;\n                        case 16:\n                            return !!t.getCellSizePixels;\n                        case 18:\n                            return !!t.getWinSizeChars;\n                        case 19:\n                            return !!t.getScreenSizeChars;\n                        case 20:\n                            return !!t.getIconTitle;\n                        case 21:\n                            return !!t.getWinTitle;\n                        case 22:\n                            return !!t.pushTitle;\n                        case 23:\n                            return !!t.popTitle;\n                        case 24:\n                            return !!t.setWinLines;\n                    }\n                    return !1;\n                }\n                var y;\n                !function(e) {\n                    e[e.GET_WIN_SIZE_PIXELS = 0] = \"GET_WIN_SIZE_PIXELS\", e[e.GET_CELL_SIZE_PIXELS = 1] = \"GET_CELL_SIZE_PIXELS\";\n                }(y || (t.WindowsOptionsReportType = y = {}));\n                let w = 0;\n                class E extends h.Disposable {\n                    getAttrData() {\n                        return this._curAttrData;\n                    }\n                    _preserveStack(e, t, i, s) {\n                        this._parseStack.paused = !0, this._parseStack.cursorStartX = e, this._parseStack.cursorStartY = t, this._parseStack.decodedLength = i, this._parseStack.position = s;\n                    }\n                    _logSlowResolvingAsync(e) {\n                        this._logService.logLevel <= v.LogLevelEnum.WARN && Promise.race([\n                            e,\n                            new Promise((e, t)=>setTimeout(()=>t(\"#SLOW_TIMEOUT\"), 5e3))\n                        ]).catch((e)=>{\n                            if (\"#SLOW_TIMEOUT\" !== e) throw e;\n                            console.warn(\"async parser handler taking longer than 5000 ms\");\n                        });\n                    }\n                    _getCurrentLinkId() {\n                        return this._curAttrData.extended.urlId;\n                    }\n                    parse(e, t) {\n                        let i, s = this._activeBuffer.x, r = this._activeBuffer.y, n = 0;\n                        const o = this._parseStack.paused;\n                        if (o) {\n                            if (i = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, t)) return this._logSlowResolvingAsync(i), i;\n                            s = this._parseStack.cursorStartX, r = this._parseStack.cursorStartY, this._parseStack.paused = !1, e.length > C && (n = this._parseStack.position + C);\n                        }\n                        if (this._logService.logLevel <= v.LogLevelEnum.DEBUG && this._logService.debug(\"parsing data\" + (\"string\" == typeof e ? ' \"'.concat(e, '\"') : ' \"'.concat(Array.prototype.map.call(e, (e)=>String.fromCharCode(e)).join(\"\"), '\"')), \"string\" == typeof e ? e.split(\"\").map((e)=>e.charCodeAt(0)) : e), this._parseBuffer.length < e.length && this._parseBuffer.length < C && (this._parseBuffer = new Uint32Array(Math.min(e.length, C))), o || this._dirtyRowTracker.clearRange(), e.length > C) for(let t = n; t < e.length; t += C){\n                            const n = t + C < e.length ? t + C : e.length, o = \"string\" == typeof e ? this._stringDecoder.decode(e.substring(t, n), this._parseBuffer) : this._utf8Decoder.decode(e.subarray(t, n), this._parseBuffer);\n                            if (i = this._parser.parse(this._parseBuffer, o)) return this._preserveStack(s, r, o, t), this._logSlowResolvingAsync(i), i;\n                        }\n                        else if (!o) {\n                            const t = \"string\" == typeof e ? this._stringDecoder.decode(e, this._parseBuffer) : this._utf8Decoder.decode(e, this._parseBuffer);\n                            if (i = this._parser.parse(this._parseBuffer, t)) return this._preserveStack(s, r, t, 0), this._logSlowResolvingAsync(i), i;\n                        }\n                        this._activeBuffer.x === s && this._activeBuffer.y === r || this._onCursorMove.fire(), this._onRequestRefreshRows.fire(this._dirtyRowTracker.start, this._dirtyRowTracker.end);\n                    }\n                    print(e, t, i) {\n                        let s, r;\n                        const n = this._charsetService.charset, o = this._optionsService.rawOptions.screenReaderMode, a = this._bufferService.cols, h = this._coreService.decPrivateModes.wraparound, l = this._coreService.modes.insertMode, d = this._curAttrData;\n                        let u = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n                        this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._activeBuffer.x && i - t > 0 && 2 === u.getWidth(this._activeBuffer.x - 1) && u.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, d.fg, d.bg, d.extended);\n                        for(let f = t; f < i; ++f){\n                            if (s = e[f], r = this._unicodeService.wcwidth(s), s < 127 && n) {\n                                const e = n[String.fromCharCode(s)];\n                                e && (s = e.charCodeAt(0));\n                            }\n                            if (o && this._onA11yChar.fire((0, c.stringFromCodePoint)(s)), this._getCurrentLinkId() && this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y), r || !this._activeBuffer.x) {\n                                if (this._activeBuffer.x + r - 1 >= a) {\n                                    if (h) {\n                                        for(; this._activeBuffer.x < a;)u.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, d.fg, d.bg, d.extended);\n                                        this._activeBuffer.x = 0, this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData(), !0)) : (this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = !0), u = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n                                    } else if (this._activeBuffer.x = a - 1, 2 === r) continue;\n                                }\n                                if (l && (u.insertCells(this._activeBuffer.x, r, this._activeBuffer.getNullCell(d), d), 2 === u.getWidth(a - 1) && u.setCellFromCodePoint(a - 1, _.NULL_CELL_CODE, _.NULL_CELL_WIDTH, d.fg, d.bg, d.extended)), u.setCellFromCodePoint(this._activeBuffer.x++, s, r, d.fg, d.bg, d.extended), r > 0) for(; --r;)u.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, d.fg, d.bg, d.extended);\n                            } else u.getWidth(this._activeBuffer.x - 1) ? u.addCodepointToCell(this._activeBuffer.x - 1, s) : u.addCodepointToCell(this._activeBuffer.x - 2, s);\n                        }\n                        i - t > 0 && (u.loadCell(this._activeBuffer.x - 1, this._workCell), 2 === this._workCell.getWidth() || this._workCell.getCode() > 65535 ? this._parser.precedingCodepoint = 0 : this._workCell.isCombined() ? this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0) : this._parser.precedingCodepoint = this._workCell.content), this._activeBuffer.x < a && i - t > 0 && 0 === u.getWidth(this._activeBuffer.x) && !u.hasContent(this._activeBuffer.x) && u.setCellFromCodePoint(this._activeBuffer.x, 0, 1, d.fg, d.bg, d.extended), this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n                    }\n                    registerCsiHandler(e, t) {\n                        return \"t\" !== e.final || e.prefix || e.intermediates ? this._parser.registerCsiHandler(e, t) : this._parser.registerCsiHandler(e, (e)=>!b(e.params[0], this._optionsService.rawOptions.windowOptions) || t(e));\n                    }\n                    registerDcsHandler(e, t) {\n                        return this._parser.registerDcsHandler(e, new g.DcsHandler(t));\n                    }\n                    registerEscHandler(e, t) {\n                        return this._parser.registerEscHandler(e, t);\n                    }\n                    registerOscHandler(e, t) {\n                        return this._parser.registerOscHandler(e, new p.OscHandler(t));\n                    }\n                    bell() {\n                        return this._onRequestBell.fire(), !0;\n                    }\n                    lineFeed() {\n                        return this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._optionsService.rawOptions.convertEol && (this._activeBuffer.x = 0), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows ? this._activeBuffer.y = this._bufferService.rows - 1 : this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = !1, this._activeBuffer.x >= this._bufferService.cols && this._activeBuffer.x--, this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._onLineFeed.fire(), !0;\n                    }\n                    carriageReturn() {\n                        return this._activeBuffer.x = 0, !0;\n                    }\n                    backspace() {\n                        var e;\n                        if (!this._coreService.decPrivateModes.reverseWraparound) return this._restrictCursor(), this._activeBuffer.x > 0 && this._activeBuffer.x--, !0;\n                        if (this._restrictCursor(this._bufferService.cols), this._activeBuffer.x > 0) this._activeBuffer.x--;\n                        else if (0 === this._activeBuffer.x && this._activeBuffer.y > this._activeBuffer.scrollTop && this._activeBuffer.y <= this._activeBuffer.scrollBottom && (null === (e = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)) || void 0 === e ? void 0 : e.isWrapped)) {\n                            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = !1, this._activeBuffer.y--, this._activeBuffer.x = this._bufferService.cols - 1;\n                            const e = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n                            e.hasWidth(this._activeBuffer.x) && !e.hasContent(this._activeBuffer.x) && this._activeBuffer.x--;\n                        }\n                        return this._restrictCursor(), !0;\n                    }\n                    tab() {\n                        if (this._activeBuffer.x >= this._bufferService.cols) return !0;\n                        const e = this._activeBuffer.x;\n                        return this._activeBuffer.x = this._activeBuffer.nextStop(), this._optionsService.rawOptions.screenReaderMode && this._onA11yTab.fire(this._activeBuffer.x - e), !0;\n                    }\n                    shiftOut() {\n                        return this._charsetService.setgLevel(1), !0;\n                    }\n                    shiftIn() {\n                        return this._charsetService.setgLevel(0), !0;\n                    }\n                    _restrictCursor() {\n                        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this._bufferService.cols - 1;\n                        this._activeBuffer.x = Math.min(e, Math.max(0, this._activeBuffer.x)), this._activeBuffer.y = this._coreService.decPrivateModes.origin ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y)) : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y)), this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n                    }\n                    _setCursor(e, t) {\n                        this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._coreService.decPrivateModes.origin ? (this._activeBuffer.x = e, this._activeBuffer.y = this._activeBuffer.scrollTop + t) : (this._activeBuffer.x = e, this._activeBuffer.y = t), this._restrictCursor(), this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n                    }\n                    _moveCursor(e, t) {\n                        this._restrictCursor(), this._setCursor(this._activeBuffer.x + e, this._activeBuffer.y + t);\n                    }\n                    cursorUp(e) {\n                        const t = this._activeBuffer.y - this._activeBuffer.scrollTop;\n                        return t >= 0 ? this._moveCursor(0, -Math.min(t, e.params[0] || 1)) : this._moveCursor(0, -(e.params[0] || 1)), !0;\n                    }\n                    cursorDown(e) {\n                        const t = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n                        return t >= 0 ? this._moveCursor(0, Math.min(t, e.params[0] || 1)) : this._moveCursor(0, e.params[0] || 1), !0;\n                    }\n                    cursorForward(e) {\n                        return this._moveCursor(e.params[0] || 1, 0), !0;\n                    }\n                    cursorBackward(e) {\n                        return this._moveCursor(-(e.params[0] || 1), 0), !0;\n                    }\n                    cursorNextLine(e) {\n                        return this.cursorDown(e), this._activeBuffer.x = 0, !0;\n                    }\n                    cursorPrecedingLine(e) {\n                        return this.cursorUp(e), this._activeBuffer.x = 0, !0;\n                    }\n                    cursorCharAbsolute(e) {\n                        return this._setCursor((e.params[0] || 1) - 1, this._activeBuffer.y), !0;\n                    }\n                    cursorPosition(e) {\n                        return this._setCursor(e.length >= 2 ? (e.params[1] || 1) - 1 : 0, (e.params[0] || 1) - 1), !0;\n                    }\n                    charPosAbsolute(e) {\n                        return this._setCursor((e.params[0] || 1) - 1, this._activeBuffer.y), !0;\n                    }\n                    hPositionRelative(e) {\n                        return this._moveCursor(e.params[0] || 1, 0), !0;\n                    }\n                    linePosAbsolute(e) {\n                        return this._setCursor(this._activeBuffer.x, (e.params[0] || 1) - 1), !0;\n                    }\n                    vPositionRelative(e) {\n                        return this._moveCursor(0, e.params[0] || 1), !0;\n                    }\n                    hVPosition(e) {\n                        return this.cursorPosition(e), !0;\n                    }\n                    tabClear(e) {\n                        const t = e.params[0];\n                        return 0 === t ? delete this._activeBuffer.tabs[this._activeBuffer.x] : 3 === t && (this._activeBuffer.tabs = {}), !0;\n                    }\n                    cursorForwardTab(e) {\n                        if (this._activeBuffer.x >= this._bufferService.cols) return !0;\n                        let t = e.params[0] || 1;\n                        for(; t--;)this._activeBuffer.x = this._activeBuffer.nextStop();\n                        return !0;\n                    }\n                    cursorBackwardTab(e) {\n                        if (this._activeBuffer.x >= this._bufferService.cols) return !0;\n                        let t = e.params[0] || 1;\n                        for(; t--;)this._activeBuffer.x = this._activeBuffer.prevStop();\n                        return !0;\n                    }\n                    selectProtected(e) {\n                        const t = e.params[0];\n                        return 1 === t && (this._curAttrData.bg |= 536870912), 2 !== t && 0 !== t || (this._curAttrData.bg &= -536870913), !0;\n                    }\n                    _eraseInBufferLine(e, t, i) {\n                        let s = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;\n                        const n = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);\n                        n.replaceCells(t, i, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData(), r), s && (n.isWrapped = !1);\n                    }\n                    _resetBufferLine(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);\n                        i && (i.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), t), this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + e), i.isWrapped = !1);\n                    }\n                    eraseInDisplay(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        let i;\n                        switch(this._restrictCursor(this._bufferService.cols), e.params[0]){\n                            case 0:\n                                for(i = this._activeBuffer.y, this._dirtyRowTracker.markDirty(i), this._eraseInBufferLine(i++, this._activeBuffer.x, this._bufferService.cols, 0 === this._activeBuffer.x, t); i < this._bufferService.rows; i++)this._resetBufferLine(i, t);\n                                this._dirtyRowTracker.markDirty(i);\n                                break;\n                            case 1:\n                                for(i = this._activeBuffer.y, this._dirtyRowTracker.markDirty(i), this._eraseInBufferLine(i, 0, this._activeBuffer.x + 1, !0, t), this._activeBuffer.x + 1 >= this._bufferService.cols && (this._activeBuffer.lines.get(i + 1).isWrapped = !1); i--;)this._resetBufferLine(i, t);\n                                this._dirtyRowTracker.markDirty(0);\n                                break;\n                            case 2:\n                                for(i = this._bufferService.rows, this._dirtyRowTracker.markDirty(i - 1); i--;)this._resetBufferLine(i, t);\n                                this._dirtyRowTracker.markDirty(0);\n                                break;\n                            case 3:\n                                const e1 = this._activeBuffer.lines.length - this._bufferService.rows;\n                                e1 > 0 && (this._activeBuffer.lines.trimStart(e1), this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - e1, 0), this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - e1, 0), this._onScroll.fire(0));\n                        }\n                        return !0;\n                    }\n                    eraseInLine(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        switch(this._restrictCursor(this._bufferService.cols), e.params[0]){\n                            case 0:\n                                this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, 0 === this._activeBuffer.x, t);\n                                break;\n                            case 1:\n                                this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, !1, t);\n                                break;\n                            case 2:\n                                this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, !0, t);\n                        }\n                        return this._dirtyRowTracker.markDirty(this._activeBuffer.y), !0;\n                    }\n                    insertLines(e) {\n                        this._restrictCursor();\n                        let t = e.params[0] || 1;\n                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;\n                        const i = this._activeBuffer.ybase + this._activeBuffer.y, s = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, r = this._bufferService.rows - 1 + this._activeBuffer.ybase - s + 1;\n                        for(; t--;)this._activeBuffer.lines.splice(r - 1, 1), this._activeBuffer.lines.splice(i, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, !0;\n                    }\n                    deleteLines(e) {\n                        this._restrictCursor();\n                        let t = e.params[0] || 1;\n                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;\n                        const i = this._activeBuffer.ybase + this._activeBuffer.y;\n                        let s;\n                        for(s = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, s = this._bufferService.rows - 1 + this._activeBuffer.ybase - s; t--;)this._activeBuffer.lines.splice(i, 1), this._activeBuffer.lines.splice(s, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, !0;\n                    }\n                    insertChars(e) {\n                        this._restrictCursor();\n                        const t = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n                        return t && (t.insertCells(this._activeBuffer.x, e.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), !0;\n                    }\n                    deleteChars(e) {\n                        this._restrictCursor();\n                        const t = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n                        return t && (t.deleteCells(this._activeBuffer.x, e.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), !0;\n                    }\n                    scrollUp(e) {\n                        let t = e.params[0] || 1;\n                        for(; t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;\n                    }\n                    scrollDown(e) {\n                        let t = e.params[0] || 1;\n                        for(; t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(l.DEFAULT_ATTR_DATA));\n                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;\n                    }\n                    scrollLeft(e) {\n                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;\n                        const t = e.params[0] || 1;\n                        for(let e = this._activeBuffer.scrollTop; e <= this._activeBuffer.scrollBottom; ++e){\n                            const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);\n                            i.deleteCells(0, t, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i.isWrapped = !1;\n                        }\n                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;\n                    }\n                    scrollRight(e) {\n                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;\n                        const t = e.params[0] || 1;\n                        for(let e = this._activeBuffer.scrollTop; e <= this._activeBuffer.scrollBottom; ++e){\n                            const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);\n                            i.insertCells(0, t, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i.isWrapped = !1;\n                        }\n                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;\n                    }\n                    insertColumns(e) {\n                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;\n                        const t = e.params[0] || 1;\n                        for(let e = this._activeBuffer.scrollTop; e <= this._activeBuffer.scrollBottom; ++e){\n                            const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);\n                            i.insertCells(this._activeBuffer.x, t, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i.isWrapped = !1;\n                        }\n                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;\n                    }\n                    deleteColumns(e) {\n                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;\n                        const t = e.params[0] || 1;\n                        for(let e = this._activeBuffer.scrollTop; e <= this._activeBuffer.scrollBottom; ++e){\n                            const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);\n                            i.deleteCells(this._activeBuffer.x, t, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i.isWrapped = !1;\n                        }\n                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;\n                    }\n                    eraseChars(e) {\n                        this._restrictCursor();\n                        const t = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n                        return t && (t.replaceCells(this._activeBuffer.x, this._activeBuffer.x + (e.params[0] || 1), this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), !0;\n                    }\n                    repeatPrecedingCharacter(e) {\n                        if (!this._parser.precedingCodepoint) return !0;\n                        const t = e.params[0] || 1, i = new Uint32Array(t);\n                        for(let e = 0; e < t; ++e)i[e] = this._parser.precedingCodepoint;\n                        return this.print(i, 0, i.length), !0;\n                    }\n                    sendDeviceAttributesPrimary(e) {\n                        return e.params[0] > 0 || (this._is(\"xterm\") || this._is(\"rxvt-unicode\") || this._is(\"screen\") ? this._coreService.triggerDataEvent(n.C0.ESC + \"[?1;2c\") : this._is(\"linux\") && this._coreService.triggerDataEvent(n.C0.ESC + \"[?6c\")), !0;\n                    }\n                    sendDeviceAttributesSecondary(e) {\n                        return e.params[0] > 0 || (this._is(\"xterm\") ? this._coreService.triggerDataEvent(n.C0.ESC + \"[>0;276;0c\") : this._is(\"rxvt-unicode\") ? this._coreService.triggerDataEvent(n.C0.ESC + \"[>85;95;0c\") : this._is(\"linux\") ? this._coreService.triggerDataEvent(e.params[0] + \"c\") : this._is(\"screen\") && this._coreService.triggerDataEvent(n.C0.ESC + \"[>83;40003;0c\")), !0;\n                    }\n                    _is(e) {\n                        return 0 === (this._optionsService.rawOptions.termName + \"\").indexOf(e);\n                    }\n                    setMode(e) {\n                        for(let t = 0; t < e.length; t++)switch(e.params[t]){\n                            case 4:\n                                this._coreService.modes.insertMode = !0;\n                                break;\n                            case 20:\n                                this._optionsService.options.convertEol = !0;\n                        }\n                        return !0;\n                    }\n                    setModePrivate(e) {\n                        for(let t = 0; t < e.length; t++)switch(e.params[t]){\n                            case 1:\n                                this._coreService.decPrivateModes.applicationCursorKeys = !0;\n                                break;\n                            case 2:\n                                this._charsetService.setgCharset(0, o.DEFAULT_CHARSET), this._charsetService.setgCharset(1, o.DEFAULT_CHARSET), this._charsetService.setgCharset(2, o.DEFAULT_CHARSET), this._charsetService.setgCharset(3, o.DEFAULT_CHARSET);\n                                break;\n                            case 3:\n                                this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(132, this._bufferService.rows), this._onRequestReset.fire());\n                                break;\n                            case 6:\n                                this._coreService.decPrivateModes.origin = !0, this._setCursor(0, 0);\n                                break;\n                            case 7:\n                                this._coreService.decPrivateModes.wraparound = !0;\n                                break;\n                            case 12:\n                                this._optionsService.options.cursorBlink = !0;\n                                break;\n                            case 45:\n                                this._coreService.decPrivateModes.reverseWraparound = !0;\n                                break;\n                            case 66:\n                                this._logService.debug(\"Serial port requested application keypad.\"), this._coreService.decPrivateModes.applicationKeypad = !0, this._onRequestSyncScrollBar.fire();\n                                break;\n                            case 9:\n                                this._coreMouseService.activeProtocol = \"X10\";\n                                break;\n                            case 1e3:\n                                this._coreMouseService.activeProtocol = \"VT200\";\n                                break;\n                            case 1002:\n                                this._coreMouseService.activeProtocol = \"DRAG\";\n                                break;\n                            case 1003:\n                                this._coreMouseService.activeProtocol = \"ANY\";\n                                break;\n                            case 1004:\n                                this._coreService.decPrivateModes.sendFocus = !0, this._onRequestSendFocus.fire();\n                                break;\n                            case 1005:\n                                this._logService.debug(\"DECSET 1005 not supported (see #2507)\");\n                                break;\n                            case 1006:\n                                this._coreMouseService.activeEncoding = \"SGR\";\n                                break;\n                            case 1015:\n                                this._logService.debug(\"DECSET 1015 not supported (see #2507)\");\n                                break;\n                            case 1016:\n                                this._coreMouseService.activeEncoding = \"SGR_PIXELS\";\n                                break;\n                            case 25:\n                                this._coreService.isCursorHidden = !1;\n                                break;\n                            case 1048:\n                                this.saveCursor();\n                                break;\n                            case 1049:\n                                this.saveCursor();\n                            case 47:\n                            case 1047:\n                                this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()), this._coreService.isCursorInitialized = !0, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();\n                                break;\n                            case 2004:\n                                this._coreService.decPrivateModes.bracketedPasteMode = !0;\n                        }\n                        return !0;\n                    }\n                    resetMode(e) {\n                        for(let t = 0; t < e.length; t++)switch(e.params[t]){\n                            case 4:\n                                this._coreService.modes.insertMode = !1;\n                                break;\n                            case 20:\n                                this._optionsService.options.convertEol = !1;\n                        }\n                        return !0;\n                    }\n                    resetModePrivate(e) {\n                        for(let t = 0; t < e.length; t++)switch(e.params[t]){\n                            case 1:\n                                this._coreService.decPrivateModes.applicationCursorKeys = !1;\n                                break;\n                            case 3:\n                                this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(80, this._bufferService.rows), this._onRequestReset.fire());\n                                break;\n                            case 6:\n                                this._coreService.decPrivateModes.origin = !1, this._setCursor(0, 0);\n                                break;\n                            case 7:\n                                this._coreService.decPrivateModes.wraparound = !1;\n                                break;\n                            case 12:\n                                this._optionsService.options.cursorBlink = !1;\n                                break;\n                            case 45:\n                                this._coreService.decPrivateModes.reverseWraparound = !1;\n                                break;\n                            case 66:\n                                this._logService.debug(\"Switching back to normal keypad.\"), this._coreService.decPrivateModes.applicationKeypad = !1, this._onRequestSyncScrollBar.fire();\n                                break;\n                            case 9:\n                            case 1e3:\n                            case 1002:\n                            case 1003:\n                                this._coreMouseService.activeProtocol = \"NONE\";\n                                break;\n                            case 1004:\n                                this._coreService.decPrivateModes.sendFocus = !1;\n                                break;\n                            case 1005:\n                                this._logService.debug(\"DECRST 1005 not supported (see #2507)\");\n                                break;\n                            case 1006:\n                            case 1016:\n                                this._coreMouseService.activeEncoding = \"DEFAULT\";\n                                break;\n                            case 1015:\n                                this._logService.debug(\"DECRST 1015 not supported (see #2507)\");\n                                break;\n                            case 25:\n                                this._coreService.isCursorHidden = !0;\n                                break;\n                            case 1048:\n                                this.restoreCursor();\n                                break;\n                            case 1049:\n                            case 47:\n                            case 1047:\n                                this._bufferService.buffers.activateNormalBuffer(), 1049 === e.params[t] && this.restoreCursor(), this._coreService.isCursorInitialized = !0, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();\n                                break;\n                            case 2004:\n                                this._coreService.decPrivateModes.bracketedPasteMode = !1;\n                        }\n                        return !0;\n                    }\n                    requestMode(e, t) {\n                        const i = this._coreService.decPrivateModes, { activeProtocol: s, activeEncoding: r } = this._coreMouseService, o = this._coreService, { buffers: a, cols: h } = this._bufferService, { active: c, alt: l } = a, d = this._optionsService.rawOptions, _ = (e)=>e ? 1 : 2, u = e.params[0];\n                        return f = u, v = t ? 2 === u ? 4 : 4 === u ? _(o.modes.insertMode) : 12 === u ? 3 : 20 === u ? _(d.convertEol) : 0 : 1 === u ? _(i.applicationCursorKeys) : 3 === u ? d.windowOptions.setWinLines ? 80 === h ? 2 : 132 === h ? 1 : 0 : 0 : 6 === u ? _(i.origin) : 7 === u ? _(i.wraparound) : 8 === u ? 3 : 9 === u ? _(\"X10\" === s) : 12 === u ? _(d.cursorBlink) : 25 === u ? _(!o.isCursorHidden) : 45 === u ? _(i.reverseWraparound) : 66 === u ? _(i.applicationKeypad) : 67 === u ? 4 : 1e3 === u ? _(\"VT200\" === s) : 1002 === u ? _(\"DRAG\" === s) : 1003 === u ? _(\"ANY\" === s) : 1004 === u ? _(i.sendFocus) : 1005 === u ? 4 : 1006 === u ? _(\"SGR\" === r) : 1015 === u ? 4 : 1016 === u ? _(\"SGR_PIXELS\" === r) : 1048 === u ? 1 : 47 === u || 1047 === u || 1049 === u ? _(c === l) : 2004 === u ? _(i.bracketedPasteMode) : 0, o.triggerDataEvent(\"\".concat(n.C0.ESC, \"[\").concat(t ? \"\" : \"?\").concat(f, \";\").concat(v, \"$y\")), !0;\n                        var f, v;\n                    }\n                    _updateAttrColor(e, t, i, s, r) {\n                        return 2 === t ? (e |= 50331648, e &= -16777216, e |= f.AttributeData.fromColorRGB([\n                            i,\n                            s,\n                            r\n                        ])) : 5 === t && (e &= -50331904, e |= 33554432 | 255 & i), e;\n                    }\n                    _extractColor(e, t, i) {\n                        const s = [\n                            0,\n                            0,\n                            -1,\n                            0,\n                            0,\n                            0\n                        ];\n                        let r = 0, n = 0;\n                        do {\n                            if (s[n + r] = e.params[t + n], e.hasSubParams(t + n)) {\n                                const i = e.getSubParams(t + n);\n                                let o = 0;\n                                do {\n                                    5 === s[1] && (r = 1), s[n + o + 1 + r] = i[o];\n                                }while (++o < i.length && o + n + 1 + r < s.length);\n                                break;\n                            }\n                            if (5 === s[1] && n + r >= 2 || 2 === s[1] && n + r >= 5) break;\n                            s[1] && (r = 1);\n                        }while (++n + t < e.length && n + r < s.length);\n                        for(let e = 2; e < s.length; ++e)-1 === s[e] && (s[e] = 0);\n                        switch(s[0]){\n                            case 38:\n                                i.fg = this._updateAttrColor(i.fg, s[1], s[3], s[4], s[5]);\n                                break;\n                            case 48:\n                                i.bg = this._updateAttrColor(i.bg, s[1], s[3], s[4], s[5]);\n                                break;\n                            case 58:\n                                i.extended = i.extended.clone(), i.extended.underlineColor = this._updateAttrColor(i.extended.underlineColor, s[1], s[3], s[4], s[5]);\n                        }\n                        return n;\n                    }\n                    _processUnderline(e, t) {\n                        t.extended = t.extended.clone(), (!~e || e > 5) && (e = 1), t.extended.underlineStyle = e, t.fg |= 268435456, 0 === e && (t.fg &= -268435457), t.updateExtended();\n                    }\n                    _processSGR0(e) {\n                        e.fg = l.DEFAULT_ATTR_DATA.fg, e.bg = l.DEFAULT_ATTR_DATA.bg, e.extended = e.extended.clone(), e.extended.underlineStyle = 0, e.extended.underlineColor &= -67108864, e.updateExtended();\n                    }\n                    charAttributes(e) {\n                        if (1 === e.length && 0 === e.params[0]) return this._processSGR0(this._curAttrData), !0;\n                        const t = e.length;\n                        let i;\n                        const s = this._curAttrData;\n                        for(let r = 0; r < t; r++)i = e.params[r], i >= 30 && i <= 37 ? (s.fg &= -50331904, s.fg |= 16777216 | i - 30) : i >= 40 && i <= 47 ? (s.bg &= -50331904, s.bg |= 16777216 | i - 40) : i >= 90 && i <= 97 ? (s.fg &= -50331904, s.fg |= 16777224 | i - 90) : i >= 100 && i <= 107 ? (s.bg &= -50331904, s.bg |= 16777224 | i - 100) : 0 === i ? this._processSGR0(s) : 1 === i ? s.fg |= 134217728 : 3 === i ? s.bg |= 67108864 : 4 === i ? (s.fg |= 268435456, this._processUnderline(e.hasSubParams(r) ? e.getSubParams(r)[0] : 1, s)) : 5 === i ? s.fg |= 536870912 : 7 === i ? s.fg |= 67108864 : 8 === i ? s.fg |= 1073741824 : 9 === i ? s.fg |= 2147483648 : 2 === i ? s.bg |= 134217728 : 21 === i ? this._processUnderline(2, s) : 22 === i ? (s.fg &= -134217729, s.bg &= -134217729) : 23 === i ? s.bg &= -67108865 : 24 === i ? (s.fg &= -268435457, this._processUnderline(0, s)) : 25 === i ? s.fg &= -536870913 : 27 === i ? s.fg &= -67108865 : 28 === i ? s.fg &= -1073741825 : 29 === i ? s.fg &= 2147483647 : 39 === i ? (s.fg &= -67108864, s.fg |= 16777215 & l.DEFAULT_ATTR_DATA.fg) : 49 === i ? (s.bg &= -67108864, s.bg |= 16777215 & l.DEFAULT_ATTR_DATA.bg) : 38 === i || 48 === i || 58 === i ? r += this._extractColor(e, r, s) : 53 === i ? s.bg |= 1073741824 : 55 === i ? s.bg &= -1073741825 : 59 === i ? (s.extended = s.extended.clone(), s.extended.underlineColor = -1, s.updateExtended()) : 100 === i ? (s.fg &= -67108864, s.fg |= 16777215 & l.DEFAULT_ATTR_DATA.fg, s.bg &= -67108864, s.bg |= 16777215 & l.DEFAULT_ATTR_DATA.bg) : this._logService.debug(\"Unknown SGR attribute: %d.\", i);\n                        return !0;\n                    }\n                    deviceStatus(e) {\n                        switch(e.params[0]){\n                            case 5:\n                                this._coreService.triggerDataEvent(\"\".concat(n.C0.ESC, \"[0n\"));\n                                break;\n                            case 6:\n                                const e1 = this._activeBuffer.y + 1, t = this._activeBuffer.x + 1;\n                                this._coreService.triggerDataEvent(\"\".concat(n.C0.ESC, \"[\").concat(e1, \";\").concat(t, \"R\"));\n                        }\n                        return !0;\n                    }\n                    deviceStatusPrivate(e) {\n                        if (6 === e.params[0]) {\n                            const e = this._activeBuffer.y + 1, t = this._activeBuffer.x + 1;\n                            this._coreService.triggerDataEvent(\"\".concat(n.C0.ESC, \"[?\").concat(e, \";\").concat(t, \"R\"));\n                        }\n                        return !0;\n                    }\n                    softReset(e) {\n                        return this._coreService.isCursorHidden = !1, this._onRequestSyncScrollBar.fire(), this._activeBuffer.scrollTop = 0, this._activeBuffer.scrollBottom = this._bufferService.rows - 1, this._curAttrData = l.DEFAULT_ATTR_DATA.clone(), this._coreService.reset(), this._charsetService.reset(), this._activeBuffer.savedX = 0, this._activeBuffer.savedY = this._activeBuffer.ybase, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, this._coreService.decPrivateModes.origin = !1, !0;\n                    }\n                    setCursorStyle(e) {\n                        const t = e.params[0] || 1;\n                        switch(t){\n                            case 1:\n                            case 2:\n                                this._optionsService.options.cursorStyle = \"block\";\n                                break;\n                            case 3:\n                            case 4:\n                                this._optionsService.options.cursorStyle = \"underline\";\n                                break;\n                            case 5:\n                            case 6:\n                                this._optionsService.options.cursorStyle = \"bar\";\n                        }\n                        const i = t % 2 == 1;\n                        return this._optionsService.options.cursorBlink = i, !0;\n                    }\n                    setScrollRegion(e) {\n                        const t = e.params[0] || 1;\n                        let i;\n                        return (e.length < 2 || (i = e.params[1]) > this._bufferService.rows || 0 === i) && (i = this._bufferService.rows), i > t && (this._activeBuffer.scrollTop = t - 1, this._activeBuffer.scrollBottom = i - 1, this._setCursor(0, 0)), !0;\n                    }\n                    windowOptions(e) {\n                        if (!b(e.params[0], this._optionsService.rawOptions.windowOptions)) return !0;\n                        const t = e.length > 1 ? e.params[1] : 0;\n                        switch(e.params[0]){\n                            case 14:\n                                2 !== t && this._onRequestWindowsOptionsReport.fire(y.GET_WIN_SIZE_PIXELS);\n                                break;\n                            case 16:\n                                this._onRequestWindowsOptionsReport.fire(y.GET_CELL_SIZE_PIXELS);\n                                break;\n                            case 18:\n                                this._bufferService && this._coreService.triggerDataEvent(\"\".concat(n.C0.ESC, \"[8;\").concat(this._bufferService.rows, \";\").concat(this._bufferService.cols, \"t\"));\n                                break;\n                            case 22:\n                                0 !== t && 2 !== t || (this._windowTitleStack.push(this._windowTitle), this._windowTitleStack.length > 10 && this._windowTitleStack.shift()), 0 !== t && 1 !== t || (this._iconNameStack.push(this._iconName), this._iconNameStack.length > 10 && this._iconNameStack.shift());\n                                break;\n                            case 23:\n                                0 !== t && 2 !== t || this._windowTitleStack.length && this.setTitle(this._windowTitleStack.pop()), 0 !== t && 1 !== t || this._iconNameStack.length && this.setIconName(this._iconNameStack.pop());\n                        }\n                        return !0;\n                    }\n                    saveCursor(e) {\n                        return this._activeBuffer.savedX = this._activeBuffer.x, this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, !0;\n                    }\n                    restoreCursor(e) {\n                        return this._activeBuffer.x = this._activeBuffer.savedX || 0, this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0), this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg, this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg, this._charsetService.charset = this._savedCharset, this._activeBuffer.savedCharset && (this._charsetService.charset = this._activeBuffer.savedCharset), this._restrictCursor(), !0;\n                    }\n                    setTitle(e) {\n                        return this._windowTitle = e, this._onTitleChange.fire(e), !0;\n                    }\n                    setIconName(e) {\n                        return this._iconName = e, !0;\n                    }\n                    setOrReportIndexedColor(e) {\n                        const t = [], i = e.split(\";\");\n                        for(; i.length > 1;){\n                            const e = i.shift(), s = i.shift();\n                            if (/^\\d+$/.exec(e)) {\n                                const i = parseInt(e);\n                                if (L(i)) if (\"?\" === s) t.push({\n                                    type: 0,\n                                    index: i\n                                });\n                                else {\n                                    const e = (0, m.parseColor)(s);\n                                    e && t.push({\n                                        type: 1,\n                                        index: i,\n                                        color: e\n                                    });\n                                }\n                            }\n                        }\n                        return t.length && this._onColor.fire(t), !0;\n                    }\n                    setHyperlink(e) {\n                        const t = e.split(\";\");\n                        return !(t.length < 2) && (t[1] ? this._createHyperlink(t[0], t[1]) : !t[0] && this._finishHyperlink());\n                    }\n                    _createHyperlink(e, t) {\n                        this._getCurrentLinkId() && this._finishHyperlink();\n                        const i = e.split(\":\");\n                        let s;\n                        const r = i.findIndex((e)=>e.startsWith(\"id=\"));\n                        return -1 !== r && (s = i[r].slice(3) || void 0), this._curAttrData.extended = this._curAttrData.extended.clone(), this._curAttrData.extended.urlId = this._oscLinkService.registerLink({\n                            id: s,\n                            uri: t\n                        }), this._curAttrData.updateExtended(), !0;\n                    }\n                    _finishHyperlink() {\n                        return this._curAttrData.extended = this._curAttrData.extended.clone(), this._curAttrData.extended.urlId = 0, this._curAttrData.updateExtended(), !0;\n                    }\n                    _setOrReportSpecialColor(e, t) {\n                        const i = e.split(\";\");\n                        for(let e = 0; e < i.length && !(t >= this._specialColors.length); ++e, ++t)if (\"?\" === i[e]) this._onColor.fire([\n                            {\n                                type: 0,\n                                index: this._specialColors[t]\n                            }\n                        ]);\n                        else {\n                            const s = (0, m.parseColor)(i[e]);\n                            s && this._onColor.fire([\n                                {\n                                    type: 1,\n                                    index: this._specialColors[t],\n                                    color: s\n                                }\n                            ]);\n                        }\n                        return !0;\n                    }\n                    setOrReportFgColor(e) {\n                        return this._setOrReportSpecialColor(e, 0);\n                    }\n                    setOrReportBgColor(e) {\n                        return this._setOrReportSpecialColor(e, 1);\n                    }\n                    setOrReportCursorColor(e) {\n                        return this._setOrReportSpecialColor(e, 2);\n                    }\n                    restoreIndexedColor(e) {\n                        if (!e) return this._onColor.fire([\n                            {\n                                type: 2\n                            }\n                        ]), !0;\n                        const t = [], i = e.split(\";\");\n                        for(let e = 0; e < i.length; ++e)if (/^\\d+$/.exec(i[e])) {\n                            const s = parseInt(i[e]);\n                            L(s) && t.push({\n                                type: 2,\n                                index: s\n                            });\n                        }\n                        return t.length && this._onColor.fire(t), !0;\n                    }\n                    restoreFgColor(e) {\n                        return this._onColor.fire([\n                            {\n                                type: 2,\n                                index: 256\n                            }\n                        ]), !0;\n                    }\n                    restoreBgColor(e) {\n                        return this._onColor.fire([\n                            {\n                                type: 2,\n                                index: 257\n                            }\n                        ]), !0;\n                    }\n                    restoreCursorColor(e) {\n                        return this._onColor.fire([\n                            {\n                                type: 2,\n                                index: 258\n                            }\n                        ]), !0;\n                    }\n                    nextLine() {\n                        return this._activeBuffer.x = 0, this.index(), !0;\n                    }\n                    keypadApplicationMode() {\n                        return this._logService.debug(\"Serial port requested application keypad.\"), this._coreService.decPrivateModes.applicationKeypad = !0, this._onRequestSyncScrollBar.fire(), !0;\n                    }\n                    keypadNumericMode() {\n                        return this._logService.debug(\"Switching back to normal keypad.\"), this._coreService.decPrivateModes.applicationKeypad = !1, this._onRequestSyncScrollBar.fire(), !0;\n                    }\n                    selectDefaultCharset() {\n                        return this._charsetService.setgLevel(0), this._charsetService.setgCharset(0, o.DEFAULT_CHARSET), !0;\n                    }\n                    selectCharset(e) {\n                        return 2 !== e.length ? (this.selectDefaultCharset(), !0) : (\"/\" === e[0] || this._charsetService.setgCharset(S[e[0]], o.CHARSETS[e[1]] || o.DEFAULT_CHARSET), !0);\n                    }\n                    index() {\n                        return this._restrictCursor(), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._restrictCursor(), !0;\n                    }\n                    tabSet() {\n                        return this._activeBuffer.tabs[this._activeBuffer.x] = !0, !0;\n                    }\n                    reverseIndex() {\n                        if (this._restrictCursor(), this._activeBuffer.y === this._activeBuffer.scrollTop) {\n                            const e = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n                            this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, e, 1), this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData())), this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n                        } else this._activeBuffer.y--, this._restrictCursor();\n                        return !0;\n                    }\n                    fullReset() {\n                        return this._parser.reset(), this._onRequestReset.fire(), !0;\n                    }\n                    reset() {\n                        this._curAttrData = l.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = l.DEFAULT_ATTR_DATA.clone();\n                    }\n                    _eraseAttrData() {\n                        return this._eraseAttrDataInternal.bg &= -67108864, this._eraseAttrDataInternal.bg |= 67108863 & this._curAttrData.bg, this._eraseAttrDataInternal;\n                    }\n                    setgLevel(e) {\n                        return this._charsetService.setgLevel(e), !0;\n                    }\n                    screenAlignmentPattern() {\n                        const e = new u.CellData;\n                        e.content = 1 << 22 | \"E\".charCodeAt(0), e.fg = this._curAttrData.fg, e.bg = this._curAttrData.bg, this._setCursor(0, 0);\n                        for(let t = 0; t < this._bufferService.rows; ++t){\n                            const i = this._activeBuffer.ybase + this._activeBuffer.y + t, s = this._activeBuffer.lines.get(i);\n                            s && (s.fill(e), s.isWrapped = !1);\n                        }\n                        return this._dirtyRowTracker.markAllDirty(), this._setCursor(0, 0), !0;\n                    }\n                    requestStatusString(e, t) {\n                        const i = this._bufferService.buffer, s = this._optionsService.rawOptions;\n                        return ((e)=>(this._coreService.triggerDataEvent(\"\".concat(n.C0.ESC).concat(e).concat(n.C0.ESC, \"\\\\\")), !0))('\"q' === e ? \"P1$r\".concat(this._curAttrData.isProtected() ? 1 : 0, '\"q') : '\"p' === e ? 'P1$r61;1\"p' : \"r\" === e ? \"P1$r\".concat(i.scrollTop + 1, \";\").concat(i.scrollBottom + 1, \"r\") : \"m\" === e ? \"P1$r0m\" : \" q\" === e ? \"P1$r\".concat({\n                            block: 2,\n                            underline: 4,\n                            bar: 6\n                        }[s.cursorStyle] - (s.cursorBlink ? 1 : 0), \" q\") : \"P0$r\");\n                    }\n                    markRangeDirty(e, t) {\n                        this._dirtyRowTracker.markRangeDirty(e, t);\n                    }\n                    constructor(e, t, i, s, r, h, _, f, v = new a.EscapeSequenceParser){\n                        super(), this._bufferService = e, this._charsetService = t, this._coreService = i, this._logService = s, this._optionsService = r, this._oscLinkService = h, this._coreMouseService = _, this._unicodeService = f, this._parser = v, this._parseBuffer = new Uint32Array(4096), this._stringDecoder = new c.StringToUtf32, this._utf8Decoder = new c.Utf8ToUtf32, this._workCell = new u.CellData, this._windowTitle = \"\", this._iconName = \"\", this._windowTitleStack = [], this._iconNameStack = [], this._curAttrData = l.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = l.DEFAULT_ATTR_DATA.clone(), this._onRequestBell = this.register(new d.EventEmitter), this.onRequestBell = this._onRequestBell.event, this._onRequestRefreshRows = this.register(new d.EventEmitter), this.onRequestRefreshRows = this._onRequestRefreshRows.event, this._onRequestReset = this.register(new d.EventEmitter), this.onRequestReset = this._onRequestReset.event, this._onRequestSendFocus = this.register(new d.EventEmitter), this.onRequestSendFocus = this._onRequestSendFocus.event, this._onRequestSyncScrollBar = this.register(new d.EventEmitter), this.onRequestSyncScrollBar = this._onRequestSyncScrollBar.event, this._onRequestWindowsOptionsReport = this.register(new d.EventEmitter), this.onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event, this._onA11yChar = this.register(new d.EventEmitter), this.onA11yChar = this._onA11yChar.event, this._onA11yTab = this.register(new d.EventEmitter), this.onA11yTab = this._onA11yTab.event, this._onCursorMove = this.register(new d.EventEmitter), this.onCursorMove = this._onCursorMove.event, this._onLineFeed = this.register(new d.EventEmitter), this.onLineFeed = this._onLineFeed.event, this._onScroll = this.register(new d.EventEmitter), this.onScroll = this._onScroll.event, this._onTitleChange = this.register(new d.EventEmitter), this.onTitleChange = this._onTitleChange.event, this._onColor = this.register(new d.EventEmitter), this.onColor = this._onColor.event, this._parseStack = {\n                            paused: !1,\n                            cursorStartX: 0,\n                            cursorStartY: 0,\n                            decodedLength: 0,\n                            position: 0\n                        }, this._specialColors = [\n                            256,\n                            257,\n                            258\n                        ], this.register(this._parser), this._dirtyRowTracker = new k(this._bufferService), this._activeBuffer = this._bufferService.buffer, this.register(this._bufferService.buffers.onBufferActivate((e)=>this._activeBuffer = e.activeBuffer)), this._parser.setCsiHandlerFallback((e, t)=>{\n                            this._logService.debug(\"Unknown CSI code: \", {\n                                identifier: this._parser.identToString(e),\n                                params: t.toArray()\n                            });\n                        }), this._parser.setEscHandlerFallback((e)=>{\n                            this._logService.debug(\"Unknown ESC code: \", {\n                                identifier: this._parser.identToString(e)\n                            });\n                        }), this._parser.setExecuteHandlerFallback((e)=>{\n                            this._logService.debug(\"Unknown EXECUTE code: \", {\n                                code: e\n                            });\n                        }), this._parser.setOscHandlerFallback((e, t, i)=>{\n                            this._logService.debug(\"Unknown OSC code: \", {\n                                identifier: e,\n                                action: t,\n                                data: i\n                            });\n                        }), this._parser.setDcsHandlerFallback((e, t, i)=>{\n                            \"HOOK\" === t && (i = i.toArray()), this._logService.debug(\"Unknown DCS code: \", {\n                                identifier: this._parser.identToString(e),\n                                action: t,\n                                payload: i\n                            });\n                        }), this._parser.setPrintHandler((e, t, i)=>this.print(e, t, i)), this._parser.registerCsiHandler({\n                            final: \"@\"\n                        }, (e)=>this.insertChars(e)), this._parser.registerCsiHandler({\n                            intermediates: \" \",\n                            final: \"@\"\n                        }, (e)=>this.scrollLeft(e)), this._parser.registerCsiHandler({\n                            final: \"A\"\n                        }, (e)=>this.cursorUp(e)), this._parser.registerCsiHandler({\n                            intermediates: \" \",\n                            final: \"A\"\n                        }, (e)=>this.scrollRight(e)), this._parser.registerCsiHandler({\n                            final: \"B\"\n                        }, (e)=>this.cursorDown(e)), this._parser.registerCsiHandler({\n                            final: \"C\"\n                        }, (e)=>this.cursorForward(e)), this._parser.registerCsiHandler({\n                            final: \"D\"\n                        }, (e)=>this.cursorBackward(e)), this._parser.registerCsiHandler({\n                            final: \"E\"\n                        }, (e)=>this.cursorNextLine(e)), this._parser.registerCsiHandler({\n                            final: \"F\"\n                        }, (e)=>this.cursorPrecedingLine(e)), this._parser.registerCsiHandler({\n                            final: \"G\"\n                        }, (e)=>this.cursorCharAbsolute(e)), this._parser.registerCsiHandler({\n                            final: \"H\"\n                        }, (e)=>this.cursorPosition(e)), this._parser.registerCsiHandler({\n                            final: \"I\"\n                        }, (e)=>this.cursorForwardTab(e)), this._parser.registerCsiHandler({\n                            final: \"J\"\n                        }, (e)=>this.eraseInDisplay(e, !1)), this._parser.registerCsiHandler({\n                            prefix: \"?\",\n                            final: \"J\"\n                        }, (e)=>this.eraseInDisplay(e, !0)), this._parser.registerCsiHandler({\n                            final: \"K\"\n                        }, (e)=>this.eraseInLine(e, !1)), this._parser.registerCsiHandler({\n                            prefix: \"?\",\n                            final: \"K\"\n                        }, (e)=>this.eraseInLine(e, !0)), this._parser.registerCsiHandler({\n                            final: \"L\"\n                        }, (e)=>this.insertLines(e)), this._parser.registerCsiHandler({\n                            final: \"M\"\n                        }, (e)=>this.deleteLines(e)), this._parser.registerCsiHandler({\n                            final: \"P\"\n                        }, (e)=>this.deleteChars(e)), this._parser.registerCsiHandler({\n                            final: \"S\"\n                        }, (e)=>this.scrollUp(e)), this._parser.registerCsiHandler({\n                            final: \"T\"\n                        }, (e)=>this.scrollDown(e)), this._parser.registerCsiHandler({\n                            final: \"X\"\n                        }, (e)=>this.eraseChars(e)), this._parser.registerCsiHandler({\n                            final: \"Z\"\n                        }, (e)=>this.cursorBackwardTab(e)), this._parser.registerCsiHandler({\n                            final: \"`\"\n                        }, (e)=>this.charPosAbsolute(e)), this._parser.registerCsiHandler({\n                            final: \"a\"\n                        }, (e)=>this.hPositionRelative(e)), this._parser.registerCsiHandler({\n                            final: \"b\"\n                        }, (e)=>this.repeatPrecedingCharacter(e)), this._parser.registerCsiHandler({\n                            final: \"c\"\n                        }, (e)=>this.sendDeviceAttributesPrimary(e)), this._parser.registerCsiHandler({\n                            prefix: \">\",\n                            final: \"c\"\n                        }, (e)=>this.sendDeviceAttributesSecondary(e)), this._parser.registerCsiHandler({\n                            final: \"d\"\n                        }, (e)=>this.linePosAbsolute(e)), this._parser.registerCsiHandler({\n                            final: \"e\"\n                        }, (e)=>this.vPositionRelative(e)), this._parser.registerCsiHandler({\n                            final: \"f\"\n                        }, (e)=>this.hVPosition(e)), this._parser.registerCsiHandler({\n                            final: \"g\"\n                        }, (e)=>this.tabClear(e)), this._parser.registerCsiHandler({\n                            final: \"h\"\n                        }, (e)=>this.setMode(e)), this._parser.registerCsiHandler({\n                            prefix: \"?\",\n                            final: \"h\"\n                        }, (e)=>this.setModePrivate(e)), this._parser.registerCsiHandler({\n                            final: \"l\"\n                        }, (e)=>this.resetMode(e)), this._parser.registerCsiHandler({\n                            prefix: \"?\",\n                            final: \"l\"\n                        }, (e)=>this.resetModePrivate(e)), this._parser.registerCsiHandler({\n                            final: \"m\"\n                        }, (e)=>this.charAttributes(e)), this._parser.registerCsiHandler({\n                            final: \"n\"\n                        }, (e)=>this.deviceStatus(e)), this._parser.registerCsiHandler({\n                            prefix: \"?\",\n                            final: \"n\"\n                        }, (e)=>this.deviceStatusPrivate(e)), this._parser.registerCsiHandler({\n                            intermediates: \"!\",\n                            final: \"p\"\n                        }, (e)=>this.softReset(e)), this._parser.registerCsiHandler({\n                            intermediates: \" \",\n                            final: \"q\"\n                        }, (e)=>this.setCursorStyle(e)), this._parser.registerCsiHandler({\n                            final: \"r\"\n                        }, (e)=>this.setScrollRegion(e)), this._parser.registerCsiHandler({\n                            final: \"s\"\n                        }, (e)=>this.saveCursor(e)), this._parser.registerCsiHandler({\n                            final: \"t\"\n                        }, (e)=>this.windowOptions(e)), this._parser.registerCsiHandler({\n                            final: \"u\"\n                        }, (e)=>this.restoreCursor(e)), this._parser.registerCsiHandler({\n                            intermediates: \"'\",\n                            final: \"}\"\n                        }, (e)=>this.insertColumns(e)), this._parser.registerCsiHandler({\n                            intermediates: \"'\",\n                            final: \"~\"\n                        }, (e)=>this.deleteColumns(e)), this._parser.registerCsiHandler({\n                            intermediates: '\"',\n                            final: \"q\"\n                        }, (e)=>this.selectProtected(e)), this._parser.registerCsiHandler({\n                            intermediates: \"$\",\n                            final: \"p\"\n                        }, (e)=>this.requestMode(e, !0)), this._parser.registerCsiHandler({\n                            prefix: \"?\",\n                            intermediates: \"$\",\n                            final: \"p\"\n                        }, (e)=>this.requestMode(e, !1)), this._parser.setExecuteHandler(n.C0.BEL, ()=>this.bell()), this._parser.setExecuteHandler(n.C0.LF, ()=>this.lineFeed()), this._parser.setExecuteHandler(n.C0.VT, ()=>this.lineFeed()), this._parser.setExecuteHandler(n.C0.FF, ()=>this.lineFeed()), this._parser.setExecuteHandler(n.C0.CR, ()=>this.carriageReturn()), this._parser.setExecuteHandler(n.C0.BS, ()=>this.backspace()), this._parser.setExecuteHandler(n.C0.HT, ()=>this.tab()), this._parser.setExecuteHandler(n.C0.SO, ()=>this.shiftOut()), this._parser.setExecuteHandler(n.C0.SI, ()=>this.shiftIn()), this._parser.setExecuteHandler(n.C1.IND, ()=>this.index()), this._parser.setExecuteHandler(n.C1.NEL, ()=>this.nextLine()), this._parser.setExecuteHandler(n.C1.HTS, ()=>this.tabSet()), this._parser.registerOscHandler(0, new p.OscHandler((e)=>(this.setTitle(e), this.setIconName(e), !0))), this._parser.registerOscHandler(1, new p.OscHandler((e)=>this.setIconName(e))), this._parser.registerOscHandler(2, new p.OscHandler((e)=>this.setTitle(e))), this._parser.registerOscHandler(4, new p.OscHandler((e)=>this.setOrReportIndexedColor(e))), this._parser.registerOscHandler(8, new p.OscHandler((e)=>this.setHyperlink(e))), this._parser.registerOscHandler(10, new p.OscHandler((e)=>this.setOrReportFgColor(e))), this._parser.registerOscHandler(11, new p.OscHandler((e)=>this.setOrReportBgColor(e))), this._parser.registerOscHandler(12, new p.OscHandler((e)=>this.setOrReportCursorColor(e))), this._parser.registerOscHandler(104, new p.OscHandler((e)=>this.restoreIndexedColor(e))), this._parser.registerOscHandler(110, new p.OscHandler((e)=>this.restoreFgColor(e))), this._parser.registerOscHandler(111, new p.OscHandler((e)=>this.restoreBgColor(e))), this._parser.registerOscHandler(112, new p.OscHandler((e)=>this.restoreCursorColor(e))), this._parser.registerEscHandler({\n                            final: \"7\"\n                        }, ()=>this.saveCursor()), this._parser.registerEscHandler({\n                            final: \"8\"\n                        }, ()=>this.restoreCursor()), this._parser.registerEscHandler({\n                            final: \"D\"\n                        }, ()=>this.index()), this._parser.registerEscHandler({\n                            final: \"E\"\n                        }, ()=>this.nextLine()), this._parser.registerEscHandler({\n                            final: \"H\"\n                        }, ()=>this.tabSet()), this._parser.registerEscHandler({\n                            final: \"M\"\n                        }, ()=>this.reverseIndex()), this._parser.registerEscHandler({\n                            final: \"=\"\n                        }, ()=>this.keypadApplicationMode()), this._parser.registerEscHandler({\n                            final: \">\"\n                        }, ()=>this.keypadNumericMode()), this._parser.registerEscHandler({\n                            final: \"c\"\n                        }, ()=>this.fullReset()), this._parser.registerEscHandler({\n                            final: \"n\"\n                        }, ()=>this.setgLevel(2)), this._parser.registerEscHandler({\n                            final: \"o\"\n                        }, ()=>this.setgLevel(3)), this._parser.registerEscHandler({\n                            final: \"|\"\n                        }, ()=>this.setgLevel(3)), this._parser.registerEscHandler({\n                            final: \"}\"\n                        }, ()=>this.setgLevel(2)), this._parser.registerEscHandler({\n                            final: \"~\"\n                        }, ()=>this.setgLevel(1)), this._parser.registerEscHandler({\n                            intermediates: \"%\",\n                            final: \"@\"\n                        }, ()=>this.selectDefaultCharset()), this._parser.registerEscHandler({\n                            intermediates: \"%\",\n                            final: \"G\"\n                        }, ()=>this.selectDefaultCharset());\n                        for(const e in o.CHARSETS)this._parser.registerEscHandler({\n                            intermediates: \"(\",\n                            final: e\n                        }, ()=>this.selectCharset(\"(\" + e)), this._parser.registerEscHandler({\n                            intermediates: \")\",\n                            final: e\n                        }, ()=>this.selectCharset(\")\" + e)), this._parser.registerEscHandler({\n                            intermediates: \"*\",\n                            final: e\n                        }, ()=>this.selectCharset(\"*\" + e)), this._parser.registerEscHandler({\n                            intermediates: \"+\",\n                            final: e\n                        }, ()=>this.selectCharset(\"+\" + e)), this._parser.registerEscHandler({\n                            intermediates: \"-\",\n                            final: e\n                        }, ()=>this.selectCharset(\"-\" + e)), this._parser.registerEscHandler({\n                            intermediates: \".\",\n                            final: e\n                        }, ()=>this.selectCharset(\".\" + e)), this._parser.registerEscHandler({\n                            intermediates: \"/\",\n                            final: e\n                        }, ()=>this.selectCharset(\"/\" + e));\n                        this._parser.registerEscHandler({\n                            intermediates: \"#\",\n                            final: \"8\"\n                        }, ()=>this.screenAlignmentPattern()), this._parser.setErrorHandler((e)=>(this._logService.error(\"Parsing error: \", e), e)), this._parser.registerDcsHandler({\n                            intermediates: \"$\",\n                            final: \"q\"\n                        }, new g.DcsHandler((e, t)=>this.requestStatusString(e, t)));\n                    }\n                }\n                t.InputHandler = E;\n                let k = class {\n                    clearRange() {\n                        this.start = this._bufferService.buffer.y, this.end = this._bufferService.buffer.y;\n                    }\n                    markDirty(e) {\n                        e < this.start ? this.start = e : e > this.end && (this.end = e);\n                    }\n                    markRangeDirty(e, t) {\n                        e > t && (w = e, e = t, t = w), e < this.start && (this.start = e), t > this.end && (this.end = t);\n                    }\n                    markAllDirty() {\n                        this.markRangeDirty(0, this._bufferService.rows - 1);\n                    }\n                    constructor(e){\n                        this._bufferService = e, this.clearRange();\n                    }\n                };\n                function L(e) {\n                    return 0 <= e && e < 256;\n                }\n                k = s([\n                    r(0, v.IBufferService)\n                ], k);\n            },\n            844: (e, t)=>{\n                function i(e) {\n                    for (const t of e)t.dispose();\n                    e.length = 0;\n                }\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.getDisposeArrayDisposable = t.disposeArray = t.toDisposable = t.MutableDisposable = t.Disposable = void 0, t.Disposable = class {\n                    dispose() {\n                        this._isDisposed = !0;\n                        for (const e of this._disposables)e.dispose();\n                        this._disposables.length = 0;\n                    }\n                    register(e) {\n                        return this._disposables.push(e), e;\n                    }\n                    unregister(e) {\n                        const t = this._disposables.indexOf(e);\n                        -1 !== t && this._disposables.splice(t, 1);\n                    }\n                    constructor(){\n                        this._disposables = [], this._isDisposed = !1;\n                    }\n                }, t.MutableDisposable = class {\n                    get value() {\n                        return this._isDisposed ? void 0 : this._value;\n                    }\n                    set value(e) {\n                        var t;\n                        this._isDisposed || e === this._value || (null === (t = this._value) || void 0 === t || t.dispose(), this._value = e);\n                    }\n                    clear() {\n                        this.value = void 0;\n                    }\n                    dispose() {\n                        var e;\n                        this._isDisposed = !0, null === (e = this._value) || void 0 === e || e.dispose(), this._value = void 0;\n                    }\n                    constructor(){\n                        this._isDisposed = !1;\n                    }\n                }, t.toDisposable = function(e) {\n                    return {\n                        dispose: e\n                    };\n                }, t.disposeArray = i, t.getDisposeArrayDisposable = function(e) {\n                    return {\n                        dispose: ()=>i(e)\n                    };\n                };\n            },\n            1505: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.FourKeyMap = t.TwoKeyMap = void 0;\n                class i {\n                    set(e, t, i) {\n                        this._data[e] || (this._data[e] = {}), this._data[e][t] = i;\n                    }\n                    get(e, t) {\n                        return this._data[e] ? this._data[e][t] : void 0;\n                    }\n                    clear() {\n                        this._data = {};\n                    }\n                    constructor(){\n                        this._data = {};\n                    }\n                }\n                t.TwoKeyMap = i, t.FourKeyMap = class {\n                    set(e, t, s, r, n) {\n                        this._data.get(e, t) || this._data.set(e, t, new i), this._data.get(e, t).set(s, r, n);\n                    }\n                    get(e, t, i, s) {\n                        var r;\n                        return null === (r = this._data.get(e, t)) || void 0 === r ? void 0 : r.get(i, s);\n                    }\n                    clear() {\n                        this._data.clear();\n                    }\n                    constructor(){\n                        this._data = new i;\n                    }\n                };\n            },\n            6114: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.isChromeOS = t.isLinux = t.isWindows = t.isIphone = t.isIpad = t.isMac = t.getSafariVersion = t.isSafari = t.isLegacyEdge = t.isFirefox = t.isNode = void 0, t.isNode = \"undefined\" == typeof navigator;\n                const i = t.isNode ? \"node\" : navigator.userAgent, s = t.isNode ? \"node\" : navigator.platform;\n                t.isFirefox = i.includes(\"Firefox\"), t.isLegacyEdge = i.includes(\"Edge\"), t.isSafari = /^((?!chrome|android).)*safari/i.test(i), t.getSafariVersion = function() {\n                    if (!t.isSafari) return 0;\n                    const e = i.match(/Version\\/(\\d+)/);\n                    return null === e || e.length < 2 ? 0 : parseInt(e[1]);\n                }, t.isMac = [\n                    \"Macintosh\",\n                    \"MacIntel\",\n                    \"MacPPC\",\n                    \"Mac68K\"\n                ].includes(s), t.isIpad = \"iPad\" === s, t.isIphone = \"iPhone\" === s, t.isWindows = [\n                    \"Windows\",\n                    \"Win16\",\n                    \"Win32\",\n                    \"WinCE\"\n                ].includes(s), t.isLinux = s.indexOf(\"Linux\") >= 0, t.isChromeOS = /\\bCrOS\\b/.test(i);\n            },\n            6106: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.SortedList = void 0;\n                let i = 0;\n                t.SortedList = class {\n                    clear() {\n                        this._array.length = 0;\n                    }\n                    insert(e) {\n                        0 !== this._array.length ? (i = this._search(this._getKey(e)), this._array.splice(i, 0, e)) : this._array.push(e);\n                    }\n                    delete(e) {\n                        if (0 === this._array.length) return !1;\n                        const t = this._getKey(e);\n                        if (void 0 === t) return !1;\n                        if (i = this._search(t), -1 === i) return !1;\n                        if (this._getKey(this._array[i]) !== t) return !1;\n                        do {\n                            if (this._array[i] === e) return this._array.splice(i, 1), !0;\n                        }while (++i < this._array.length && this._getKey(this._array[i]) === t);\n                        return !1;\n                    }\n                    *getKeyIterator(e) {\n                        if (0 !== this._array.length && (i = this._search(e), !(i < 0 || i >= this._array.length) && this._getKey(this._array[i]) === e)) do {\n                            yield this._array[i];\n                        }while (++i < this._array.length && this._getKey(this._array[i]) === e);\n                    }\n                    forEachByKey(e, t) {\n                        if (0 !== this._array.length && (i = this._search(e), !(i < 0 || i >= this._array.length) && this._getKey(this._array[i]) === e)) do {\n                            t(this._array[i]);\n                        }while (++i < this._array.length && this._getKey(this._array[i]) === e);\n                    }\n                    values() {\n                        return [\n                            ...this._array\n                        ].values();\n                    }\n                    _search(e) {\n                        let t = 0, i = this._array.length - 1;\n                        for(; i >= t;){\n                            let s = t + i >> 1;\n                            const r = this._getKey(this._array[s]);\n                            if (r > e) i = s - 1;\n                            else {\n                                if (!(r < e)) {\n                                    for(; s > 0 && this._getKey(this._array[s - 1]) === e;)s--;\n                                    return s;\n                                }\n                                t = s + 1;\n                            }\n                        }\n                        return t;\n                    }\n                    constructor(e){\n                        this._getKey = e, this._array = [];\n                    }\n                };\n            },\n            7226: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.DebouncedIdleTask = t.IdleTaskQueue = t.PriorityTaskQueue = void 0;\n                const s = i(6114);\n                class r {\n                    enqueue(e) {\n                        this._tasks.push(e), this._start();\n                    }\n                    flush() {\n                        for(; this._i < this._tasks.length;)this._tasks[this._i]() || this._i++;\n                        this.clear();\n                    }\n                    clear() {\n                        this._idleCallback && (this._cancelCallback(this._idleCallback), this._idleCallback = void 0), this._i = 0, this._tasks.length = 0;\n                    }\n                    _start() {\n                        this._idleCallback || (this._idleCallback = this._requestCallback(this._process.bind(this)));\n                    }\n                    _process(e) {\n                        this._idleCallback = void 0;\n                        let t = 0, i = 0, s = e.timeRemaining(), r = 0;\n                        for(; this._i < this._tasks.length;){\n                            if (t = Date.now(), this._tasks[this._i]() || this._i++, t = Math.max(1, Date.now() - t), i = Math.max(t, i), r = e.timeRemaining(), 1.5 * i > r) return s - t < -20 && console.warn(\"task queue exceeded allotted deadline by \".concat(Math.abs(Math.round(s - t)), \"ms\")), void this._start();\n                            s = r;\n                        }\n                        this.clear();\n                    }\n                    constructor(){\n                        this._tasks = [], this._i = 0;\n                    }\n                }\n                class n extends r {\n                    _requestCallback(e) {\n                        return setTimeout(()=>e(this._createDeadline(16)));\n                    }\n                    _cancelCallback(e) {\n                        clearTimeout(e);\n                    }\n                    _createDeadline(e) {\n                        const t = Date.now() + e;\n                        return {\n                            timeRemaining: ()=>Math.max(0, t - Date.now())\n                        };\n                    }\n                }\n                t.PriorityTaskQueue = n, t.IdleTaskQueue = !s.isNode && \"requestIdleCallback\" in window ? class extends r {\n                    _requestCallback(e) {\n                        return requestIdleCallback(e);\n                    }\n                    _cancelCallback(e) {\n                        cancelIdleCallback(e);\n                    }\n                } : n, t.DebouncedIdleTask = class {\n                    set(e) {\n                        this._queue.clear(), this._queue.enqueue(e);\n                    }\n                    flush() {\n                        this._queue.flush();\n                    }\n                    constructor(){\n                        this._queue = new t.IdleTaskQueue;\n                    }\n                };\n            },\n            9282: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.updateWindowsModeWrappedState = void 0;\n                const s = i(643);\n                t.updateWindowsModeWrappedState = function(e) {\n                    const t = e.buffer.lines.get(e.buffer.ybase + e.buffer.y - 1), i = null == t ? void 0 : t.get(e.cols - 1), r = e.buffer.lines.get(e.buffer.ybase + e.buffer.y);\n                    r && i && (r.isWrapped = i[s.CHAR_DATA_CODE_INDEX] !== s.NULL_CELL_CODE && i[s.CHAR_DATA_CODE_INDEX] !== s.WHITESPACE_CELL_CODE);\n                };\n            },\n            3734: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.ExtendedAttrs = t.AttributeData = void 0;\n                class i {\n                    static toColorRGB(e) {\n                        return [\n                            e >>> 16 & 255,\n                            e >>> 8 & 255,\n                            255 & e\n                        ];\n                    }\n                    static fromColorRGB(e) {\n                        return (255 & e[0]) << 16 | (255 & e[1]) << 8 | 255 & e[2];\n                    }\n                    clone() {\n                        const e = new i;\n                        return e.fg = this.fg, e.bg = this.bg, e.extended = this.extended.clone(), e;\n                    }\n                    isInverse() {\n                        return 67108864 & this.fg;\n                    }\n                    isBold() {\n                        return 134217728 & this.fg;\n                    }\n                    isUnderline() {\n                        return this.hasExtendedAttrs() && 0 !== this.extended.underlineStyle ? 1 : 268435456 & this.fg;\n                    }\n                    isBlink() {\n                        return 536870912 & this.fg;\n                    }\n                    isInvisible() {\n                        return 1073741824 & this.fg;\n                    }\n                    isItalic() {\n                        return 67108864 & this.bg;\n                    }\n                    isDim() {\n                        return 134217728 & this.bg;\n                    }\n                    isStrikethrough() {\n                        return 2147483648 & this.fg;\n                    }\n                    isProtected() {\n                        return 536870912 & this.bg;\n                    }\n                    isOverline() {\n                        return 1073741824 & this.bg;\n                    }\n                    getFgColorMode() {\n                        return 50331648 & this.fg;\n                    }\n                    getBgColorMode() {\n                        return 50331648 & this.bg;\n                    }\n                    isFgRGB() {\n                        return 50331648 == (50331648 & this.fg);\n                    }\n                    isBgRGB() {\n                        return 50331648 == (50331648 & this.bg);\n                    }\n                    isFgPalette() {\n                        return 16777216 == (50331648 & this.fg) || 33554432 == (50331648 & this.fg);\n                    }\n                    isBgPalette() {\n                        return 16777216 == (50331648 & this.bg) || 33554432 == (50331648 & this.bg);\n                    }\n                    isFgDefault() {\n                        return 0 == (50331648 & this.fg);\n                    }\n                    isBgDefault() {\n                        return 0 == (50331648 & this.bg);\n                    }\n                    isAttributeDefault() {\n                        return 0 === this.fg && 0 === this.bg;\n                    }\n                    getFgColor() {\n                        switch(50331648 & this.fg){\n                            case 16777216:\n                            case 33554432:\n                                return 255 & this.fg;\n                            case 50331648:\n                                return 16777215 & this.fg;\n                            default:\n                                return -1;\n                        }\n                    }\n                    getBgColor() {\n                        switch(50331648 & this.bg){\n                            case 16777216:\n                            case 33554432:\n                                return 255 & this.bg;\n                            case 50331648:\n                                return 16777215 & this.bg;\n                            default:\n                                return -1;\n                        }\n                    }\n                    hasExtendedAttrs() {\n                        return 268435456 & this.bg;\n                    }\n                    updateExtended() {\n                        this.extended.isEmpty() ? this.bg &= -268435457 : this.bg |= 268435456;\n                    }\n                    getUnderlineColor() {\n                        if (268435456 & this.bg && ~this.extended.underlineColor) switch(50331648 & this.extended.underlineColor){\n                            case 16777216:\n                            case 33554432:\n                                return 255 & this.extended.underlineColor;\n                            case 50331648:\n                                return 16777215 & this.extended.underlineColor;\n                            default:\n                                return this.getFgColor();\n                        }\n                        return this.getFgColor();\n                    }\n                    getUnderlineColorMode() {\n                        return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 & this.extended.underlineColor : this.getFgColorMode();\n                    }\n                    isUnderlineColorRGB() {\n                        return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 == (50331648 & this.extended.underlineColor) : this.isFgRGB();\n                    }\n                    isUnderlineColorPalette() {\n                        return 268435456 & this.bg && ~this.extended.underlineColor ? 16777216 == (50331648 & this.extended.underlineColor) || 33554432 == (50331648 & this.extended.underlineColor) : this.isFgPalette();\n                    }\n                    isUnderlineColorDefault() {\n                        return 268435456 & this.bg && ~this.extended.underlineColor ? 0 == (50331648 & this.extended.underlineColor) : this.isFgDefault();\n                    }\n                    getUnderlineStyle() {\n                        return 268435456 & this.fg ? 268435456 & this.bg ? this.extended.underlineStyle : 1 : 0;\n                    }\n                    constructor(){\n                        this.fg = 0, this.bg = 0, this.extended = new s;\n                    }\n                }\n                t.AttributeData = i;\n                class s {\n                    get ext() {\n                        return this._urlId ? -469762049 & this._ext | this.underlineStyle << 26 : this._ext;\n                    }\n                    set ext(e) {\n                        this._ext = e;\n                    }\n                    get underlineStyle() {\n                        return this._urlId ? 5 : (469762048 & this._ext) >> 26;\n                    }\n                    set underlineStyle(e) {\n                        this._ext &= -469762049, this._ext |= e << 26 & 469762048;\n                    }\n                    get underlineColor() {\n                        return 67108863 & this._ext;\n                    }\n                    set underlineColor(e) {\n                        this._ext &= -67108864, this._ext |= 67108863 & e;\n                    }\n                    get urlId() {\n                        return this._urlId;\n                    }\n                    set urlId(e) {\n                        this._urlId = e;\n                    }\n                    clone() {\n                        return new s(this._ext, this._urlId);\n                    }\n                    isEmpty() {\n                        return 0 === this.underlineStyle && 0 === this._urlId;\n                    }\n                    constructor(e = 0, t = 0){\n                        this._ext = 0, this._urlId = 0, this._ext = e, this._urlId = t;\n                    }\n                }\n                t.ExtendedAttrs = s;\n            },\n            9092: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.Buffer = t.MAX_BUFFER_SIZE = void 0;\n                const s = i(6349), r = i(7226), n = i(3734), o = i(8437), a = i(4634), h = i(511), c = i(643), l = i(4863), d = i(7116);\n                t.MAX_BUFFER_SIZE = 4294967295, t.Buffer = class {\n                    getNullCell(e) {\n                        return e ? (this._nullCell.fg = e.fg, this._nullCell.bg = e.bg, this._nullCell.extended = e.extended) : (this._nullCell.fg = 0, this._nullCell.bg = 0, this._nullCell.extended = new n.ExtendedAttrs), this._nullCell;\n                    }\n                    getWhitespaceCell(e) {\n                        return e ? (this._whitespaceCell.fg = e.fg, this._whitespaceCell.bg = e.bg, this._whitespaceCell.extended = e.extended) : (this._whitespaceCell.fg = 0, this._whitespaceCell.bg = 0, this._whitespaceCell.extended = new n.ExtendedAttrs), this._whitespaceCell;\n                    }\n                    getBlankLine(e, t) {\n                        return new o.BufferLine(this._bufferService.cols, this.getNullCell(e), t);\n                    }\n                    get hasScrollback() {\n                        return this._hasScrollback && this.lines.maxLength > this._rows;\n                    }\n                    get isCursorInViewport() {\n                        const e = this.ybase + this.y - this.ydisp;\n                        return e >= 0 && e < this._rows;\n                    }\n                    _getCorrectBufferLength(e) {\n                        if (!this._hasScrollback) return e;\n                        const i = e + this._optionsService.rawOptions.scrollback;\n                        return i > t.MAX_BUFFER_SIZE ? t.MAX_BUFFER_SIZE : i;\n                    }\n                    fillViewportRows(e) {\n                        if (0 === this.lines.length) {\n                            void 0 === e && (e = o.DEFAULT_ATTR_DATA);\n                            let t = this._rows;\n                            for(; t--;)this.lines.push(this.getBlankLine(e));\n                        }\n                    }\n                    clear() {\n                        this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.lines = new s.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();\n                    }\n                    resize(e, t) {\n                        const i = this.getNullCell(o.DEFAULT_ATTR_DATA);\n                        let s = 0;\n                        const r = this._getCorrectBufferLength(t);\n                        if (r > this.lines.maxLength && (this.lines.maxLength = r), this.lines.length > 0) {\n                            if (this._cols < e) for(let t = 0; t < this.lines.length; t++)s += +this.lines.get(t).resize(e, i);\n                            let n = 0;\n                            if (this._rows < t) for(let s = this._rows; s < t; s++)this.lines.length < t + this.ybase && (this._optionsService.rawOptions.windowsMode || void 0 !== this._optionsService.rawOptions.windowsPty.backend || void 0 !== this._optionsService.rawOptions.windowsPty.buildNumber ? this.lines.push(new o.BufferLine(e, i)) : this.ybase > 0 && this.lines.length <= this.ybase + this.y + n + 1 ? (this.ybase--, n++, this.ydisp > 0 && this.ydisp--) : this.lines.push(new o.BufferLine(e, i)));\n                            else for(let e = this._rows; e > t; e--)this.lines.length > t + this.ybase && (this.lines.length > this.ybase + this.y + 1 ? this.lines.pop() : (this.ybase++, this.ydisp++));\n                            if (r < this.lines.maxLength) {\n                                const e = this.lines.length - r;\n                                e > 0 && (this.lines.trimStart(e), this.ybase = Math.max(this.ybase - e, 0), this.ydisp = Math.max(this.ydisp - e, 0), this.savedY = Math.max(this.savedY - e, 0)), this.lines.maxLength = r;\n                            }\n                            this.x = Math.min(this.x, e - 1), this.y = Math.min(this.y, t - 1), n && (this.y += n), this.savedX = Math.min(this.savedX, e - 1), this.scrollTop = 0;\n                        }\n                        if (this.scrollBottom = t - 1, this._isReflowEnabled && (this._reflow(e, t), this._cols > e)) for(let t = 0; t < this.lines.length; t++)s += +this.lines.get(t).resize(e, i);\n                        this._cols = e, this._rows = t, this._memoryCleanupQueue.clear(), s > .1 * this.lines.length && (this._memoryCleanupPosition = 0, this._memoryCleanupQueue.enqueue(()=>this._batchedMemoryCleanup()));\n                    }\n                    _batchedMemoryCleanup() {\n                        let e = !0;\n                        this._memoryCleanupPosition >= this.lines.length && (this._memoryCleanupPosition = 0, e = !1);\n                        let t = 0;\n                        for(; this._memoryCleanupPosition < this.lines.length;)if (t += this.lines.get(this._memoryCleanupPosition++).cleanupMemory(), t > 100) return !0;\n                        return e;\n                    }\n                    get _isReflowEnabled() {\n                        const e = this._optionsService.rawOptions.windowsPty;\n                        return e && e.buildNumber ? this._hasScrollback && \"conpty\" === e.backend && e.buildNumber >= 21376 : this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n                    }\n                    _reflow(e, t) {\n                        this._cols !== e && (e > this._cols ? this._reflowLarger(e, t) : this._reflowSmaller(e, t));\n                    }\n                    _reflowLarger(e, t) {\n                        const i = (0, a.reflowLargerGetLinesToRemove)(this.lines, this._cols, e, this.ybase + this.y, this.getNullCell(o.DEFAULT_ATTR_DATA));\n                        if (i.length > 0) {\n                            const s = (0, a.reflowLargerCreateNewLayout)(this.lines, i);\n                            (0, a.reflowLargerApplyNewLayout)(this.lines, s.layout), this._reflowLargerAdjustViewport(e, t, s.countRemoved);\n                        }\n                    }\n                    _reflowLargerAdjustViewport(e, t, i) {\n                        const s = this.getNullCell(o.DEFAULT_ATTR_DATA);\n                        let r = i;\n                        for(; r-- > 0;)0 === this.ybase ? (this.y > 0 && this.y--, this.lines.length < t && this.lines.push(new o.BufferLine(e, s))) : (this.ydisp === this.ybase && this.ydisp--, this.ybase--);\n                        this.savedY = Math.max(this.savedY - i, 0);\n                    }\n                    _reflowSmaller(e, t) {\n                        const i = this.getNullCell(o.DEFAULT_ATTR_DATA), s = [];\n                        let r = 0;\n                        for(let n = this.lines.length - 1; n >= 0; n--){\n                            let h = this.lines.get(n);\n                            if (!h || !h.isWrapped && h.getTrimmedLength() <= e) continue;\n                            const c = [\n                                h\n                            ];\n                            for(; h.isWrapped && n > 0;)h = this.lines.get(--n), c.unshift(h);\n                            const l = this.ybase + this.y;\n                            if (l >= n && l < n + c.length) continue;\n                            const d = c[c.length - 1].getTrimmedLength(), _ = (0, a.reflowSmallerGetNewLineLengths)(c, this._cols, e), u = _.length - c.length;\n                            let f;\n                            f = 0 === this.ybase && this.y !== this.lines.length - 1 ? Math.max(0, this.y - this.lines.maxLength + u) : Math.max(0, this.lines.length - this.lines.maxLength + u);\n                            const v = [];\n                            for(let e = 0; e < u; e++){\n                                const e = this.getBlankLine(o.DEFAULT_ATTR_DATA, !0);\n                                v.push(e);\n                            }\n                            v.length > 0 && (s.push({\n                                start: n + c.length + r,\n                                newLines: v\n                            }), r += v.length), c.push(...v);\n                            let p = _.length - 1, g = _[p];\n                            0 === g && (p--, g = _[p]);\n                            let m = c.length - u - 1, S = d;\n                            for(; m >= 0;){\n                                const e = Math.min(S, g);\n                                if (void 0 === c[p]) break;\n                                if (c[p].copyCellsFrom(c[m], S - e, g - e, e, !0), g -= e, 0 === g && (p--, g = _[p]), S -= e, 0 === S) {\n                                    m--;\n                                    const e = Math.max(m, 0);\n                                    S = (0, a.getWrappedLineTrimmedLength)(c, e, this._cols);\n                                }\n                            }\n                            for(let t = 0; t < c.length; t++)_[t] < e && c[t].setCell(_[t], i);\n                            let C = u - f;\n                            for(; C-- > 0;)0 === this.ybase ? this.y < t - 1 ? (this.y++, this.lines.pop()) : (this.ybase++, this.ydisp++) : this.ybase < Math.min(this.lines.maxLength, this.lines.length + r) - t && (this.ybase === this.ydisp && this.ydisp++, this.ybase++);\n                            this.savedY = Math.min(this.savedY + u, this.ybase + t - 1);\n                        }\n                        if (s.length > 0) {\n                            const e = [], t = [];\n                            for(let e = 0; e < this.lines.length; e++)t.push(this.lines.get(e));\n                            const i = this.lines.length;\n                            let n = i - 1, o = 0, a = s[o];\n                            this.lines.length = Math.min(this.lines.maxLength, this.lines.length + r);\n                            let h = 0;\n                            for(let c = Math.min(this.lines.maxLength - 1, i + r - 1); c >= 0; c--)if (a && a.start > n + h) {\n                                for(let e = a.newLines.length - 1; e >= 0; e--)this.lines.set(c--, a.newLines[e]);\n                                c++, e.push({\n                                    index: n + 1,\n                                    amount: a.newLines.length\n                                }), h += a.newLines.length, a = s[++o];\n                            } else this.lines.set(c, t[n--]);\n                            let c = 0;\n                            for(let t = e.length - 1; t >= 0; t--)e[t].index += c, this.lines.onInsertEmitter.fire(e[t]), c += e[t].amount;\n                            const l = Math.max(0, i + r - this.lines.maxLength);\n                            l > 0 && this.lines.onTrimEmitter.fire(l);\n                        }\n                    }\n                    translateBufferLineToString(e, t) {\n                        let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, s = arguments.length > 3 ? arguments[3] : void 0;\n                        const r = this.lines.get(e);\n                        return r ? r.translateToString(t, i, s) : \"\";\n                    }\n                    getWrappedRangeForLine(e) {\n                        let t = e, i = e;\n                        for(; t > 0 && this.lines.get(t).isWrapped;)t--;\n                        for(; i + 1 < this.lines.length && this.lines.get(i + 1).isWrapped;)i++;\n                        return {\n                            first: t,\n                            last: i\n                        };\n                    }\n                    setupTabStops(e) {\n                        for(null != e ? this.tabs[e] || (e = this.prevStop(e)) : (this.tabs = {}, e = 0); e < this._cols; e += this._optionsService.rawOptions.tabStopWidth)this.tabs[e] = !0;\n                    }\n                    prevStop(e) {\n                        for(null == e && (e = this.x); !this.tabs[--e] && e > 0;);\n                        return e >= this._cols ? this._cols - 1 : e < 0 ? 0 : e;\n                    }\n                    nextStop(e) {\n                        for(null == e && (e = this.x); !this.tabs[++e] && e < this._cols;);\n                        return e >= this._cols ? this._cols - 1 : e < 0 ? 0 : e;\n                    }\n                    clearMarkers(e) {\n                        this._isClearing = !0;\n                        for(let t = 0; t < this.markers.length; t++)this.markers[t].line === e && (this.markers[t].dispose(), this.markers.splice(t--, 1));\n                        this._isClearing = !1;\n                    }\n                    clearAllMarkers() {\n                        this._isClearing = !0;\n                        for(let e = 0; e < this.markers.length; e++)this.markers[e].dispose(), this.markers.splice(e--, 1);\n                        this._isClearing = !1;\n                    }\n                    addMarker(e) {\n                        const t = new l.Marker(e);\n                        return this.markers.push(t), t.register(this.lines.onTrim((e)=>{\n                            t.line -= e, t.line < 0 && t.dispose();\n                        })), t.register(this.lines.onInsert((e)=>{\n                            t.line >= e.index && (t.line += e.amount);\n                        })), t.register(this.lines.onDelete((e)=>{\n                            t.line >= e.index && t.line < e.index + e.amount && t.dispose(), t.line > e.index && (t.line -= e.amount);\n                        })), t.register(t.onDispose(()=>this._removeMarker(t))), t;\n                    }\n                    _removeMarker(e) {\n                        this._isClearing || this.markers.splice(this.markers.indexOf(e), 1);\n                    }\n                    constructor(e, t, i){\n                        this._hasScrollback = e, this._optionsService = t, this._bufferService = i, this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.tabs = {}, this.savedY = 0, this.savedX = 0, this.savedCurAttrData = o.DEFAULT_ATTR_DATA.clone(), this.savedCharset = d.DEFAULT_CHARSET, this.markers = [], this._nullCell = h.CellData.fromCharData([\n                            0,\n                            c.NULL_CELL_CHAR,\n                            c.NULL_CELL_WIDTH,\n                            c.NULL_CELL_CODE\n                        ]), this._whitespaceCell = h.CellData.fromCharData([\n                            0,\n                            c.WHITESPACE_CELL_CHAR,\n                            c.WHITESPACE_CELL_WIDTH,\n                            c.WHITESPACE_CELL_CODE\n                        ]), this._isClearing = !1, this._memoryCleanupQueue = new r.IdleTaskQueue, this._memoryCleanupPosition = 0, this._cols = this._bufferService.cols, this._rows = this._bufferService.rows, this.lines = new s.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();\n                    }\n                };\n            },\n            8437: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.BufferLine = t.DEFAULT_ATTR_DATA = void 0;\n                const s = i(3734), r = i(511), n = i(643), o = i(482);\n                t.DEFAULT_ATTR_DATA = Object.freeze(new s.AttributeData);\n                let a = 0;\n                class h {\n                    get(e) {\n                        const t = this._data[3 * e + 0], i = 2097151 & t;\n                        return [\n                            this._data[3 * e + 1],\n                            2097152 & t ? this._combined[e] : i ? (0, o.stringFromCodePoint)(i) : \"\",\n                            t >> 22,\n                            2097152 & t ? this._combined[e].charCodeAt(this._combined[e].length - 1) : i\n                        ];\n                    }\n                    set(e, t) {\n                        this._data[3 * e + 1] = t[n.CHAR_DATA_ATTR_INDEX], t[n.CHAR_DATA_CHAR_INDEX].length > 1 ? (this._combined[e] = t[1], this._data[3 * e + 0] = 2097152 | e | t[n.CHAR_DATA_WIDTH_INDEX] << 22) : this._data[3 * e + 0] = t[n.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | t[n.CHAR_DATA_WIDTH_INDEX] << 22;\n                    }\n                    getWidth(e) {\n                        return this._data[3 * e + 0] >> 22;\n                    }\n                    hasWidth(e) {\n                        return 12582912 & this._data[3 * e + 0];\n                    }\n                    getFg(e) {\n                        return this._data[3 * e + 1];\n                    }\n                    getBg(e) {\n                        return this._data[3 * e + 2];\n                    }\n                    hasContent(e) {\n                        return 4194303 & this._data[3 * e + 0];\n                    }\n                    getCodePoint(e) {\n                        const t = this._data[3 * e + 0];\n                        return 2097152 & t ? this._combined[e].charCodeAt(this._combined[e].length - 1) : 2097151 & t;\n                    }\n                    isCombined(e) {\n                        return 2097152 & this._data[3 * e + 0];\n                    }\n                    getString(e) {\n                        const t = this._data[3 * e + 0];\n                        return 2097152 & t ? this._combined[e] : 2097151 & t ? (0, o.stringFromCodePoint)(2097151 & t) : \"\";\n                    }\n                    isProtected(e) {\n                        return 536870912 & this._data[3 * e + 2];\n                    }\n                    loadCell(e, t) {\n                        return a = 3 * e, t.content = this._data[a + 0], t.fg = this._data[a + 1], t.bg = this._data[a + 2], 2097152 & t.content && (t.combinedData = this._combined[e]), 268435456 & t.bg && (t.extended = this._extendedAttrs[e]), t;\n                    }\n                    setCell(e, t) {\n                        2097152 & t.content && (this._combined[e] = t.combinedData), 268435456 & t.bg && (this._extendedAttrs[e] = t.extended), this._data[3 * e + 0] = t.content, this._data[3 * e + 1] = t.fg, this._data[3 * e + 2] = t.bg;\n                    }\n                    setCellFromCodePoint(e, t, i, s, r, n) {\n                        268435456 & r && (this._extendedAttrs[e] = n), this._data[3 * e + 0] = t | i << 22, this._data[3 * e + 1] = s, this._data[3 * e + 2] = r;\n                    }\n                    addCodepointToCell(e, t) {\n                        let i = this._data[3 * e + 0];\n                        2097152 & i ? this._combined[e] += (0, o.stringFromCodePoint)(t) : (2097151 & i ? (this._combined[e] = (0, o.stringFromCodePoint)(2097151 & i) + (0, o.stringFromCodePoint)(t), i &= -2097152, i |= 2097152) : i = t | 1 << 22, this._data[3 * e + 0] = i);\n                    }\n                    insertCells(e, t, i, n) {\n                        if ((e %= this.length) && 2 === this.getWidth(e - 1) && this.setCellFromCodePoint(e - 1, 0, 1, (null == n ? void 0 : n.fg) || 0, (null == n ? void 0 : n.bg) || 0, (null == n ? void 0 : n.extended) || new s.ExtendedAttrs), t < this.length - e) {\n                            const s = new r.CellData;\n                            for(let i = this.length - e - t - 1; i >= 0; --i)this.setCell(e + t + i, this.loadCell(e + i, s));\n                            for(let s = 0; s < t; ++s)this.setCell(e + s, i);\n                        } else for(let t = e; t < this.length; ++t)this.setCell(t, i);\n                        2 === this.getWidth(this.length - 1) && this.setCellFromCodePoint(this.length - 1, 0, 1, (null == n ? void 0 : n.fg) || 0, (null == n ? void 0 : n.bg) || 0, (null == n ? void 0 : n.extended) || new s.ExtendedAttrs);\n                    }\n                    deleteCells(e, t, i, n) {\n                        if (e %= this.length, t < this.length - e) {\n                            const s = new r.CellData;\n                            for(let i = 0; i < this.length - e - t; ++i)this.setCell(e + i, this.loadCell(e + t + i, s));\n                            for(let e = this.length - t; e < this.length; ++e)this.setCell(e, i);\n                        } else for(let t = e; t < this.length; ++t)this.setCell(t, i);\n                        e && 2 === this.getWidth(e - 1) && this.setCellFromCodePoint(e - 1, 0, 1, (null == n ? void 0 : n.fg) || 0, (null == n ? void 0 : n.bg) || 0, (null == n ? void 0 : n.extended) || new s.ExtendedAttrs), 0 !== this.getWidth(e) || this.hasContent(e) || this.setCellFromCodePoint(e, 0, 1, (null == n ? void 0 : n.fg) || 0, (null == n ? void 0 : n.bg) || 0, (null == n ? void 0 : n.extended) || new s.ExtendedAttrs);\n                    }\n                    replaceCells(e, t, i, r) {\n                        let n = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;\n                        if (n) for(e && 2 === this.getWidth(e - 1) && !this.isProtected(e - 1) && this.setCellFromCodePoint(e - 1, 0, 1, (null == r ? void 0 : r.fg) || 0, (null == r ? void 0 : r.bg) || 0, (null == r ? void 0 : r.extended) || new s.ExtendedAttrs), t < this.length && 2 === this.getWidth(t - 1) && !this.isProtected(t) && this.setCellFromCodePoint(t, 0, 1, (null == r ? void 0 : r.fg) || 0, (null == r ? void 0 : r.bg) || 0, (null == r ? void 0 : r.extended) || new s.ExtendedAttrs); e < t && e < this.length;)this.isProtected(e) || this.setCell(e, i), e++;\n                        else for(e && 2 === this.getWidth(e - 1) && this.setCellFromCodePoint(e - 1, 0, 1, (null == r ? void 0 : r.fg) || 0, (null == r ? void 0 : r.bg) || 0, (null == r ? void 0 : r.extended) || new s.ExtendedAttrs), t < this.length && 2 === this.getWidth(t - 1) && this.setCellFromCodePoint(t, 0, 1, (null == r ? void 0 : r.fg) || 0, (null == r ? void 0 : r.bg) || 0, (null == r ? void 0 : r.extended) || new s.ExtendedAttrs); e < t && e < this.length;)this.setCell(e++, i);\n                    }\n                    resize(e, t) {\n                        if (e === this.length) return 4 * this._data.length * 2 < this._data.buffer.byteLength;\n                        const i = 3 * e;\n                        if (e > this.length) {\n                            if (this._data.buffer.byteLength >= 4 * i) this._data = new Uint32Array(this._data.buffer, 0, i);\n                            else {\n                                const e = new Uint32Array(i);\n                                e.set(this._data), this._data = e;\n                            }\n                            for(let i = this.length; i < e; ++i)this.setCell(i, t);\n                        } else {\n                            this._data = this._data.subarray(0, i);\n                            const t = Object.keys(this._combined);\n                            for(let i = 0; i < t.length; i++){\n                                const s = parseInt(t[i], 10);\n                                s >= e && delete this._combined[s];\n                            }\n                            const s = Object.keys(this._extendedAttrs);\n                            for(let t = 0; t < s.length; t++){\n                                const i = parseInt(s[t], 10);\n                                i >= e && delete this._extendedAttrs[i];\n                            }\n                        }\n                        return this.length = e, 4 * i * 2 < this._data.buffer.byteLength;\n                    }\n                    cleanupMemory() {\n                        if (4 * this._data.length * 2 < this._data.buffer.byteLength) {\n                            const e = new Uint32Array(this._data.length);\n                            return e.set(this._data), this._data = e, 1;\n                        }\n                        return 0;\n                    }\n                    fill(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        if (t) for(let t = 0; t < this.length; ++t)this.isProtected(t) || this.setCell(t, e);\n                        else {\n                            this._combined = {}, this._extendedAttrs = {};\n                            for(let t = 0; t < this.length; ++t)this.setCell(t, e);\n                        }\n                    }\n                    copyFrom(e) {\n                        this.length !== e.length ? this._data = new Uint32Array(e._data) : this._data.set(e._data), this.length = e.length, this._combined = {};\n                        for(const t in e._combined)this._combined[t] = e._combined[t];\n                        this._extendedAttrs = {};\n                        for(const t in e._extendedAttrs)this._extendedAttrs[t] = e._extendedAttrs[t];\n                        this.isWrapped = e.isWrapped;\n                    }\n                    clone() {\n                        const e = new h(0);\n                        e._data = new Uint32Array(this._data), e.length = this.length;\n                        for(const t in this._combined)e._combined[t] = this._combined[t];\n                        for(const t in this._extendedAttrs)e._extendedAttrs[t] = this._extendedAttrs[t];\n                        return e.isWrapped = this.isWrapped, e;\n                    }\n                    getTrimmedLength() {\n                        for(let e = this.length - 1; e >= 0; --e)if (4194303 & this._data[3 * e + 0]) return e + (this._data[3 * e + 0] >> 22);\n                        return 0;\n                    }\n                    getNoBgTrimmedLength() {\n                        for(let e = this.length - 1; e >= 0; --e)if (4194303 & this._data[3 * e + 0] || 50331648 & this._data[3 * e + 2]) return e + (this._data[3 * e + 0] >> 22);\n                        return 0;\n                    }\n                    copyCellsFrom(e, t, i, s, r) {\n                        const n = e._data;\n                        if (r) for(let r = s - 1; r >= 0; r--){\n                            for(let e = 0; e < 3; e++)this._data[3 * (i + r) + e] = n[3 * (t + r) + e];\n                            268435456 & n[3 * (t + r) + 2] && (this._extendedAttrs[i + r] = e._extendedAttrs[t + r]);\n                        }\n                        else for(let r = 0; r < s; r++){\n                            for(let e = 0; e < 3; e++)this._data[3 * (i + r) + e] = n[3 * (t + r) + e];\n                            268435456 & n[3 * (t + r) + 2] && (this._extendedAttrs[i + r] = e._extendedAttrs[t + r]);\n                        }\n                        const o = Object.keys(e._combined);\n                        for(let s = 0; s < o.length; s++){\n                            const r = parseInt(o[s], 10);\n                            r >= t && (this._combined[r - t + i] = e._combined[r]);\n                        }\n                    }\n                    translateToString() {\n                        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.length;\n                        e && (i = Math.min(i, this.getTrimmedLength()));\n                        let s = \"\";\n                        for(; t < i;){\n                            const e = this._data[3 * t + 0], i = 2097151 & e;\n                            s += 2097152 & e ? this._combined[t] : i ? (0, o.stringFromCodePoint)(i) : n.WHITESPACE_CELL_CHAR, t += e >> 22 || 1;\n                        }\n                        return s;\n                    }\n                    constructor(e, t, i = !1){\n                        this.isWrapped = i, this._combined = {}, this._extendedAttrs = {}, this._data = new Uint32Array(3 * e);\n                        const s = t || r.CellData.fromCharData([\n                            0,\n                            n.NULL_CELL_CHAR,\n                            n.NULL_CELL_WIDTH,\n                            n.NULL_CELL_CODE\n                        ]);\n                        for(let t = 0; t < e; ++t)this.setCell(t, s);\n                        this.length = e;\n                    }\n                }\n                t.BufferLine = h;\n            },\n            4841: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.getRangeLength = void 0, t.getRangeLength = function(e, t) {\n                    if (e.start.y > e.end.y) throw new Error(\"Buffer range end (\".concat(e.end.x, \", \").concat(e.end.y, \") cannot be before start (\").concat(e.start.x, \", \").concat(e.start.y, \")\"));\n                    return t * (e.end.y - e.start.y) + (e.end.x - e.start.x + 1);\n                };\n            },\n            4634: (e, t)=>{\n                function i(e, t, i) {\n                    if (t === e.length - 1) return e[t].getTrimmedLength();\n                    const s = !e[t].hasContent(i - 1) && 1 === e[t].getWidth(i - 1), r = 2 === e[t + 1].getWidth(0);\n                    return s && r ? i - 1 : i;\n                }\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.getWrappedLineTrimmedLength = t.reflowSmallerGetNewLineLengths = t.reflowLargerApplyNewLayout = t.reflowLargerCreateNewLayout = t.reflowLargerGetLinesToRemove = void 0, t.reflowLargerGetLinesToRemove = function(e, t, s, r, n) {\n                    const o = [];\n                    for(let a = 0; a < e.length - 1; a++){\n                        let h = a, c = e.get(++h);\n                        if (!c.isWrapped) continue;\n                        const l = [\n                            e.get(a)\n                        ];\n                        for(; h < e.length && c.isWrapped;)l.push(c), c = e.get(++h);\n                        if (r >= a && r < h) {\n                            a += l.length - 1;\n                            continue;\n                        }\n                        let d = 0, _ = i(l, d, t), u = 1, f = 0;\n                        for(; u < l.length;){\n                            const e = i(l, u, t), r = e - f, o = s - _, a = Math.min(r, o);\n                            l[d].copyCellsFrom(l[u], f, _, a, !1), _ += a, _ === s && (d++, _ = 0), f += a, f === e && (u++, f = 0), 0 === _ && 0 !== d && 2 === l[d - 1].getWidth(s - 1) && (l[d].copyCellsFrom(l[d - 1], s - 1, _++, 1, !1), l[d - 1].setCell(s - 1, n));\n                        }\n                        l[d].replaceCells(_, s, n);\n                        let v = 0;\n                        for(let e = l.length - 1; e > 0 && (e > d || 0 === l[e].getTrimmedLength()); e--)v++;\n                        v > 0 && (o.push(a + l.length - v), o.push(v)), a += l.length - 1;\n                    }\n                    return o;\n                }, t.reflowLargerCreateNewLayout = function(e, t) {\n                    const i = [];\n                    let s = 0, r = t[s], n = 0;\n                    for(let o = 0; o < e.length; o++)if (r === o) {\n                        const i = t[++s];\n                        e.onDeleteEmitter.fire({\n                            index: o - n,\n                            amount: i\n                        }), o += i - 1, n += i, r = t[++s];\n                    } else i.push(o);\n                    return {\n                        layout: i,\n                        countRemoved: n\n                    };\n                }, t.reflowLargerApplyNewLayout = function(e, t) {\n                    const i = [];\n                    for(let s = 0; s < t.length; s++)i.push(e.get(t[s]));\n                    for(let t = 0; t < i.length; t++)e.set(t, i[t]);\n                    e.length = t.length;\n                }, t.reflowSmallerGetNewLineLengths = function(e, t, s) {\n                    const r = [], n = e.map((s, r)=>i(e, r, t)).reduce((e, t)=>e + t);\n                    let o = 0, a = 0, h = 0;\n                    for(; h < n;){\n                        if (n - h < s) {\n                            r.push(n - h);\n                            break;\n                        }\n                        o += s;\n                        const c = i(e, a, t);\n                        o > c && (o -= c, a++);\n                        const l = 2 === e[a].getWidth(o - 1);\n                        l && o--;\n                        const d = l ? s - 1 : s;\n                        r.push(d), h += d;\n                    }\n                    return r;\n                }, t.getWrappedLineTrimmedLength = i;\n            },\n            5295: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.BufferSet = void 0;\n                const s = i(8460), r = i(844), n = i(9092);\n                class o extends r.Disposable {\n                    reset() {\n                        this._normal = new n.Buffer(!0, this._optionsService, this._bufferService), this._normal.fillViewportRows(), this._alt = new n.Buffer(!1, this._optionsService, this._bufferService), this._activeBuffer = this._normal, this._onBufferActivate.fire({\n                            activeBuffer: this._normal,\n                            inactiveBuffer: this._alt\n                        }), this.setupTabStops();\n                    }\n                    get alt() {\n                        return this._alt;\n                    }\n                    get active() {\n                        return this._activeBuffer;\n                    }\n                    get normal() {\n                        return this._normal;\n                    }\n                    activateNormalBuffer() {\n                        this._activeBuffer !== this._normal && (this._normal.x = this._alt.x, this._normal.y = this._alt.y, this._alt.clearAllMarkers(), this._alt.clear(), this._activeBuffer = this._normal, this._onBufferActivate.fire({\n                            activeBuffer: this._normal,\n                            inactiveBuffer: this._alt\n                        }));\n                    }\n                    activateAltBuffer(e) {\n                        this._activeBuffer !== this._alt && (this._alt.fillViewportRows(e), this._alt.x = this._normal.x, this._alt.y = this._normal.y, this._activeBuffer = this._alt, this._onBufferActivate.fire({\n                            activeBuffer: this._alt,\n                            inactiveBuffer: this._normal\n                        }));\n                    }\n                    resize(e, t) {\n                        this._normal.resize(e, t), this._alt.resize(e, t), this.setupTabStops(e);\n                    }\n                    setupTabStops(e) {\n                        this._normal.setupTabStops(e), this._alt.setupTabStops(e);\n                    }\n                    constructor(e, t){\n                        super(), this._optionsService = e, this._bufferService = t, this._onBufferActivate = this.register(new s.EventEmitter), this.onBufferActivate = this._onBufferActivate.event, this.reset(), this.register(this._optionsService.onSpecificOptionChange(\"scrollback\", ()=>this.resize(this._bufferService.cols, this._bufferService.rows))), this.register(this._optionsService.onSpecificOptionChange(\"tabStopWidth\", ()=>this.setupTabStops()));\n                    }\n                }\n                t.BufferSet = o;\n            },\n            511: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CellData = void 0;\n                const s = i(482), r = i(643), n = i(3734);\n                class o extends n.AttributeData {\n                    static fromCharData(e) {\n                        const t = new o;\n                        return t.setFromCharData(e), t;\n                    }\n                    isCombined() {\n                        return 2097152 & this.content;\n                    }\n                    getWidth() {\n                        return this.content >> 22;\n                    }\n                    getChars() {\n                        return 2097152 & this.content ? this.combinedData : 2097151 & this.content ? (0, s.stringFromCodePoint)(2097151 & this.content) : \"\";\n                    }\n                    getCode() {\n                        return this.isCombined() ? this.combinedData.charCodeAt(this.combinedData.length - 1) : 2097151 & this.content;\n                    }\n                    setFromCharData(e) {\n                        this.fg = e[r.CHAR_DATA_ATTR_INDEX], this.bg = 0;\n                        let t = !1;\n                        if (e[r.CHAR_DATA_CHAR_INDEX].length > 2) t = !0;\n                        else if (2 === e[r.CHAR_DATA_CHAR_INDEX].length) {\n                            const i = e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n                            if (55296 <= i && i <= 56319) {\n                                const s = e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n                                56320 <= s && s <= 57343 ? this.content = 1024 * (i - 55296) + s - 56320 + 65536 | e[r.CHAR_DATA_WIDTH_INDEX] << 22 : t = !0;\n                            } else t = !0;\n                        } else this.content = e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | e[r.CHAR_DATA_WIDTH_INDEX] << 22;\n                        t && (this.combinedData = e[r.CHAR_DATA_CHAR_INDEX], this.content = 2097152 | e[r.CHAR_DATA_WIDTH_INDEX] << 22);\n                    }\n                    getAsCharData() {\n                        return [\n                            this.fg,\n                            this.getChars(),\n                            this.getWidth(),\n                            this.getCode()\n                        ];\n                    }\n                    constructor(){\n                        super(...arguments), this.content = 0, this.fg = 0, this.bg = 0, this.extended = new n.ExtendedAttrs, this.combinedData = \"\";\n                    }\n                }\n                t.CellData = o;\n            },\n            643: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.WHITESPACE_CELL_CODE = t.WHITESPACE_CELL_WIDTH = t.WHITESPACE_CELL_CHAR = t.NULL_CELL_CODE = t.NULL_CELL_WIDTH = t.NULL_CELL_CHAR = t.CHAR_DATA_CODE_INDEX = t.CHAR_DATA_WIDTH_INDEX = t.CHAR_DATA_CHAR_INDEX = t.CHAR_DATA_ATTR_INDEX = t.DEFAULT_EXT = t.DEFAULT_ATTR = t.DEFAULT_COLOR = void 0, t.DEFAULT_COLOR = 0, t.DEFAULT_ATTR = 256 | t.DEFAULT_COLOR << 9, t.DEFAULT_EXT = 0, t.CHAR_DATA_ATTR_INDEX = 0, t.CHAR_DATA_CHAR_INDEX = 1, t.CHAR_DATA_WIDTH_INDEX = 2, t.CHAR_DATA_CODE_INDEX = 3, t.NULL_CELL_CHAR = \"\", t.NULL_CELL_WIDTH = 1, t.NULL_CELL_CODE = 0, t.WHITESPACE_CELL_CHAR = \" \", t.WHITESPACE_CELL_WIDTH = 1, t.WHITESPACE_CELL_CODE = 32;\n            },\n            4863: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.Marker = void 0;\n                const s = i(8460), r = i(844);\n                class n {\n                    get id() {\n                        return this._id;\n                    }\n                    dispose() {\n                        this.isDisposed || (this.isDisposed = !0, this.line = -1, this._onDispose.fire(), (0, r.disposeArray)(this._disposables), this._disposables.length = 0);\n                    }\n                    register(e) {\n                        return this._disposables.push(e), e;\n                    }\n                    constructor(e){\n                        this.line = e, this.isDisposed = !1, this._disposables = [], this._id = n._nextId++, this._onDispose = this.register(new s.EventEmitter), this.onDispose = this._onDispose.event;\n                    }\n                }\n                t.Marker = n, n._nextId = 1;\n            },\n            7116: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.DEFAULT_CHARSET = t.CHARSETS = void 0, t.CHARSETS = {}, t.DEFAULT_CHARSET = t.CHARSETS.B, t.CHARSETS[0] = {\n                    \"`\": \"◆\",\n                    a: \"▒\",\n                    b: \"␉\",\n                    c: \"␌\",\n                    d: \"␍\",\n                    e: \"␊\",\n                    f: \"\\xb0\",\n                    g: \"\\xb1\",\n                    h: \"␤\",\n                    i: \"␋\",\n                    j: \"┘\",\n                    k: \"┐\",\n                    l: \"┌\",\n                    m: \"└\",\n                    n: \"┼\",\n                    o: \"⎺\",\n                    p: \"⎻\",\n                    q: \"─\",\n                    r: \"⎼\",\n                    s: \"⎽\",\n                    t: \"├\",\n                    u: \"┤\",\n                    v: \"┴\",\n                    w: \"┬\",\n                    x: \"│\",\n                    y: \"≤\",\n                    z: \"≥\",\n                    \"{\": \"π\",\n                    \"|\": \"≠\",\n                    \"}\": \"\\xa3\",\n                    \"~\": \"\\xb7\"\n                }, t.CHARSETS.A = {\n                    \"#\": \"\\xa3\"\n                }, t.CHARSETS.B = void 0, t.CHARSETS[4] = {\n                    \"#\": \"\\xa3\",\n                    \"@\": \"\\xbe\",\n                    \"[\": \"ij\",\n                    \"\\\\\": \"\\xbd\",\n                    \"]\": \"|\",\n                    \"{\": \"\\xa8\",\n                    \"|\": \"f\",\n                    \"}\": \"\\xbc\",\n                    \"~\": \"\\xb4\"\n                }, t.CHARSETS.C = t.CHARSETS[5] = {\n                    \"[\": \"\\xc4\",\n                    \"\\\\\": \"\\xd6\",\n                    \"]\": \"\\xc5\",\n                    \"^\": \"\\xdc\",\n                    \"`\": \"\\xe9\",\n                    \"{\": \"\\xe4\",\n                    \"|\": \"\\xf6\",\n                    \"}\": \"\\xe5\",\n                    \"~\": \"\\xfc\"\n                }, t.CHARSETS.R = {\n                    \"#\": \"\\xa3\",\n                    \"@\": \"\\xe0\",\n                    \"[\": \"\\xb0\",\n                    \"\\\\\": \"\\xe7\",\n                    \"]\": \"\\xa7\",\n                    \"{\": \"\\xe9\",\n                    \"|\": \"\\xf9\",\n                    \"}\": \"\\xe8\",\n                    \"~\": \"\\xa8\"\n                }, t.CHARSETS.Q = {\n                    \"@\": \"\\xe0\",\n                    \"[\": \"\\xe2\",\n                    \"\\\\\": \"\\xe7\",\n                    \"]\": \"\\xea\",\n                    \"^\": \"\\xee\",\n                    \"`\": \"\\xf4\",\n                    \"{\": \"\\xe9\",\n                    \"|\": \"\\xf9\",\n                    \"}\": \"\\xe8\",\n                    \"~\": \"\\xfb\"\n                }, t.CHARSETS.K = {\n                    \"@\": \"\\xa7\",\n                    \"[\": \"\\xc4\",\n                    \"\\\\\": \"\\xd6\",\n                    \"]\": \"\\xdc\",\n                    \"{\": \"\\xe4\",\n                    \"|\": \"\\xf6\",\n                    \"}\": \"\\xfc\",\n                    \"~\": \"\\xdf\"\n                }, t.CHARSETS.Y = {\n                    \"#\": \"\\xa3\",\n                    \"@\": \"\\xa7\",\n                    \"[\": \"\\xb0\",\n                    \"\\\\\": \"\\xe7\",\n                    \"]\": \"\\xe9\",\n                    \"`\": \"\\xf9\",\n                    \"{\": \"\\xe0\",\n                    \"|\": \"\\xf2\",\n                    \"}\": \"\\xe8\",\n                    \"~\": \"\\xec\"\n                }, t.CHARSETS.E = t.CHARSETS[6] = {\n                    \"@\": \"\\xc4\",\n                    \"[\": \"\\xc6\",\n                    \"\\\\\": \"\\xd8\",\n                    \"]\": \"\\xc5\",\n                    \"^\": \"\\xdc\",\n                    \"`\": \"\\xe4\",\n                    \"{\": \"\\xe6\",\n                    \"|\": \"\\xf8\",\n                    \"}\": \"\\xe5\",\n                    \"~\": \"\\xfc\"\n                }, t.CHARSETS.Z = {\n                    \"#\": \"\\xa3\",\n                    \"@\": \"\\xa7\",\n                    \"[\": \"\\xa1\",\n                    \"\\\\\": \"\\xd1\",\n                    \"]\": \"\\xbf\",\n                    \"{\": \"\\xb0\",\n                    \"|\": \"\\xf1\",\n                    \"}\": \"\\xe7\"\n                }, t.CHARSETS.H = t.CHARSETS[7] = {\n                    \"@\": \"\\xc9\",\n                    \"[\": \"\\xc4\",\n                    \"\\\\\": \"\\xd6\",\n                    \"]\": \"\\xc5\",\n                    \"^\": \"\\xdc\",\n                    \"`\": \"\\xe9\",\n                    \"{\": \"\\xe4\",\n                    \"|\": \"\\xf6\",\n                    \"}\": \"\\xe5\",\n                    \"~\": \"\\xfc\"\n                }, t.CHARSETS[\"=\"] = {\n                    \"#\": \"\\xf9\",\n                    \"@\": \"\\xe0\",\n                    \"[\": \"\\xe9\",\n                    \"\\\\\": \"\\xe7\",\n                    \"]\": \"\\xea\",\n                    \"^\": \"\\xee\",\n                    _: \"\\xe8\",\n                    \"`\": \"\\xf4\",\n                    \"{\": \"\\xe4\",\n                    \"|\": \"\\xf6\",\n                    \"}\": \"\\xfc\",\n                    \"~\": \"\\xfb\"\n                };\n            },\n            2584: (e, t)=>{\n                var i, s, r;\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.C1_ESCAPED = t.C1 = t.C0 = void 0, function(e) {\n                    e.NUL = \"\\x00\", e.SOH = \"\\x01\", e.STX = \"\\x02\", e.ETX = \"\\x03\", e.EOT = \"\\x04\", e.ENQ = \"\\x05\", e.ACK = \"\\x06\", e.BEL = \"\\x07\", e.BS = \"\\b\", e.HT = \"\t\", e.LF = \"\\n\", e.VT = \"\\v\", e.FF = \"\\f\", e.CR = \"\\r\", e.SO = \"\\x0e\", e.SI = \"\\x0f\", e.DLE = \"\\x10\", e.DC1 = \"\\x11\", e.DC2 = \"\\x12\", e.DC3 = \"\\x13\", e.DC4 = \"\\x14\", e.NAK = \"\\x15\", e.SYN = \"\\x16\", e.ETB = \"\\x17\", e.CAN = \"\\x18\", e.EM = \"\\x19\", e.SUB = \"\\x1a\", e.ESC = \"\\x1b\", e.FS = \"\\x1c\", e.GS = \"\\x1d\", e.RS = \"\\x1e\", e.US = \"\\x1f\", e.SP = \" \", e.DEL = \"\\x7f\";\n                }(i || (t.C0 = i = {})), function(e) {\n                    e.PAD = \"\\x80\", e.HOP = \"\\x81\", e.BPH = \"\\x82\", e.NBH = \"\\x83\", e.IND = \"\\x84\", e.NEL = \"\\x85\", e.SSA = \"\\x86\", e.ESA = \"\\x87\", e.HTS = \"\\x88\", e.HTJ = \"\\x89\", e.VTS = \"\\x8a\", e.PLD = \"\\x8b\", e.PLU = \"\\x8c\", e.RI = \"\\x8d\", e.SS2 = \"\\x8e\", e.SS3 = \"\\x8f\", e.DCS = \"\\x90\", e.PU1 = \"\\x91\", e.PU2 = \"\\x92\", e.STS = \"\\x93\", e.CCH = \"\\x94\", e.MW = \"\\x95\", e.SPA = \"\\x96\", e.EPA = \"\\x97\", e.SOS = \"\\x98\", e.SGCI = \"\\x99\", e.SCI = \"\\x9a\", e.CSI = \"\\x9b\", e.ST = \"\\x9c\", e.OSC = \"\\x9d\", e.PM = \"\\x9e\", e.APC = \"\\x9f\";\n                }(s || (t.C1 = s = {})), function(e) {\n                    e.ST = \"\".concat(i.ESC, \"\\\\\");\n                }(r || (t.C1_ESCAPED = r = {}));\n            },\n            7399: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.evaluateKeyboardEvent = void 0;\n                const s = i(2584), r = {\n                    48: [\n                        \"0\",\n                        \")\"\n                    ],\n                    49: [\n                        \"1\",\n                        \"!\"\n                    ],\n                    50: [\n                        \"2\",\n                        \"@\"\n                    ],\n                    51: [\n                        \"3\",\n                        \"#\"\n                    ],\n                    52: [\n                        \"4\",\n                        \"$\"\n                    ],\n                    53: [\n                        \"5\",\n                        \"%\"\n                    ],\n                    54: [\n                        \"6\",\n                        \"^\"\n                    ],\n                    55: [\n                        \"7\",\n                        \"&\"\n                    ],\n                    56: [\n                        \"8\",\n                        \"*\"\n                    ],\n                    57: [\n                        \"9\",\n                        \"(\"\n                    ],\n                    186: [\n                        \";\",\n                        \":\"\n                    ],\n                    187: [\n                        \"=\",\n                        \"+\"\n                    ],\n                    188: [\n                        \",\",\n                        \"<\"\n                    ],\n                    189: [\n                        \"-\",\n                        \"_\"\n                    ],\n                    190: [\n                        \".\",\n                        \">\"\n                    ],\n                    191: [\n                        \"/\",\n                        \"?\"\n                    ],\n                    192: [\n                        \"`\",\n                        \"~\"\n                    ],\n                    219: [\n                        \"[\",\n                        \"{\"\n                    ],\n                    220: [\n                        \"\\\\\",\n                        \"|\"\n                    ],\n                    221: [\n                        \"]\",\n                        \"}\"\n                    ],\n                    222: [\n                        \"'\",\n                        '\"'\n                    ]\n                };\n                t.evaluateKeyboardEvent = function(e, t, i, n) {\n                    const o = {\n                        type: 0,\n                        cancel: !1,\n                        key: void 0\n                    }, a = (e.shiftKey ? 1 : 0) | (e.altKey ? 2 : 0) | (e.ctrlKey ? 4 : 0) | (e.metaKey ? 8 : 0);\n                    switch(e.keyCode){\n                        case 0:\n                            \"UIKeyInputUpArrow\" === e.key ? o.key = t ? s.C0.ESC + \"OA\" : s.C0.ESC + \"[A\" : \"UIKeyInputLeftArrow\" === e.key ? o.key = t ? s.C0.ESC + \"OD\" : s.C0.ESC + \"[D\" : \"UIKeyInputRightArrow\" === e.key ? o.key = t ? s.C0.ESC + \"OC\" : s.C0.ESC + \"[C\" : \"UIKeyInputDownArrow\" === e.key && (o.key = t ? s.C0.ESC + \"OB\" : s.C0.ESC + \"[B\");\n                            break;\n                        case 8:\n                            if (e.altKey) {\n                                o.key = s.C0.ESC + s.C0.DEL;\n                                break;\n                            }\n                            o.key = s.C0.DEL;\n                            break;\n                        case 9:\n                            if (e.shiftKey) {\n                                o.key = s.C0.ESC + \"[Z\";\n                                break;\n                            }\n                            o.key = s.C0.HT, o.cancel = !0;\n                            break;\n                        case 13:\n                            o.key = e.altKey ? s.C0.ESC + s.C0.CR : s.C0.CR, o.cancel = !0;\n                            break;\n                        case 27:\n                            o.key = s.C0.ESC, e.altKey && (o.key = s.C0.ESC + s.C0.ESC), o.cancel = !0;\n                            break;\n                        case 37:\n                            if (e.metaKey) break;\n                            a ? (o.key = s.C0.ESC + \"[1;\" + (a + 1) + \"D\", o.key === s.C0.ESC + \"[1;3D\" && (o.key = s.C0.ESC + (i ? \"b\" : \"[1;5D\"))) : o.key = t ? s.C0.ESC + \"OD\" : s.C0.ESC + \"[D\";\n                            break;\n                        case 39:\n                            if (e.metaKey) break;\n                            a ? (o.key = s.C0.ESC + \"[1;\" + (a + 1) + \"C\", o.key === s.C0.ESC + \"[1;3C\" && (o.key = s.C0.ESC + (i ? \"f\" : \"[1;5C\"))) : o.key = t ? s.C0.ESC + \"OC\" : s.C0.ESC + \"[C\";\n                            break;\n                        case 38:\n                            if (e.metaKey) break;\n                            a ? (o.key = s.C0.ESC + \"[1;\" + (a + 1) + \"A\", i || o.key !== s.C0.ESC + \"[1;3A\" || (o.key = s.C0.ESC + \"[1;5A\")) : o.key = t ? s.C0.ESC + \"OA\" : s.C0.ESC + \"[A\";\n                            break;\n                        case 40:\n                            if (e.metaKey) break;\n                            a ? (o.key = s.C0.ESC + \"[1;\" + (a + 1) + \"B\", i || o.key !== s.C0.ESC + \"[1;3B\" || (o.key = s.C0.ESC + \"[1;5B\")) : o.key = t ? s.C0.ESC + \"OB\" : s.C0.ESC + \"[B\";\n                            break;\n                        case 45:\n                            e.shiftKey || e.ctrlKey || (o.key = s.C0.ESC + \"[2~\");\n                            break;\n                        case 46:\n                            o.key = a ? s.C0.ESC + \"[3;\" + (a + 1) + \"~\" : s.C0.ESC + \"[3~\";\n                            break;\n                        case 36:\n                            o.key = a ? s.C0.ESC + \"[1;\" + (a + 1) + \"H\" : t ? s.C0.ESC + \"OH\" : s.C0.ESC + \"[H\";\n                            break;\n                        case 35:\n                            o.key = a ? s.C0.ESC + \"[1;\" + (a + 1) + \"F\" : t ? s.C0.ESC + \"OF\" : s.C0.ESC + \"[F\";\n                            break;\n                        case 33:\n                            e.shiftKey ? o.type = 2 : e.ctrlKey ? o.key = s.C0.ESC + \"[5;\" + (a + 1) + \"~\" : o.key = s.C0.ESC + \"[5~\";\n                            break;\n                        case 34:\n                            e.shiftKey ? o.type = 3 : e.ctrlKey ? o.key = s.C0.ESC + \"[6;\" + (a + 1) + \"~\" : o.key = s.C0.ESC + \"[6~\";\n                            break;\n                        case 112:\n                            o.key = a ? s.C0.ESC + \"[1;\" + (a + 1) + \"P\" : s.C0.ESC + \"OP\";\n                            break;\n                        case 113:\n                            o.key = a ? s.C0.ESC + \"[1;\" + (a + 1) + \"Q\" : s.C0.ESC + \"OQ\";\n                            break;\n                        case 114:\n                            o.key = a ? s.C0.ESC + \"[1;\" + (a + 1) + \"R\" : s.C0.ESC + \"OR\";\n                            break;\n                        case 115:\n                            o.key = a ? s.C0.ESC + \"[1;\" + (a + 1) + \"S\" : s.C0.ESC + \"OS\";\n                            break;\n                        case 116:\n                            o.key = a ? s.C0.ESC + \"[15;\" + (a + 1) + \"~\" : s.C0.ESC + \"[15~\";\n                            break;\n                        case 117:\n                            o.key = a ? s.C0.ESC + \"[17;\" + (a + 1) + \"~\" : s.C0.ESC + \"[17~\";\n                            break;\n                        case 118:\n                            o.key = a ? s.C0.ESC + \"[18;\" + (a + 1) + \"~\" : s.C0.ESC + \"[18~\";\n                            break;\n                        case 119:\n                            o.key = a ? s.C0.ESC + \"[19;\" + (a + 1) + \"~\" : s.C0.ESC + \"[19~\";\n                            break;\n                        case 120:\n                            o.key = a ? s.C0.ESC + \"[20;\" + (a + 1) + \"~\" : s.C0.ESC + \"[20~\";\n                            break;\n                        case 121:\n                            o.key = a ? s.C0.ESC + \"[21;\" + (a + 1) + \"~\" : s.C0.ESC + \"[21~\";\n                            break;\n                        case 122:\n                            o.key = a ? s.C0.ESC + \"[23;\" + (a + 1) + \"~\" : s.C0.ESC + \"[23~\";\n                            break;\n                        case 123:\n                            o.key = a ? s.C0.ESC + \"[24;\" + (a + 1) + \"~\" : s.C0.ESC + \"[24~\";\n                            break;\n                        default:\n                            if (!e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) if (i && !n || !e.altKey || e.metaKey) !i || e.altKey || e.ctrlKey || e.shiftKey || !e.metaKey ? e.key && !e.ctrlKey && !e.altKey && !e.metaKey && e.keyCode >= 48 && 1 === e.key.length ? o.key = e.key : e.key && e.ctrlKey && (\"_\" === e.key && (o.key = s.C0.US), \"@\" === e.key && (o.key = s.C0.NUL)) : 65 === e.keyCode && (o.type = 1);\n                            else {\n                                const t = r[e.keyCode], i = null == t ? void 0 : t[e.shiftKey ? 1 : 0];\n                                if (i) o.key = s.C0.ESC + i;\n                                else if (e.keyCode >= 65 && e.keyCode <= 90) {\n                                    const t = e.ctrlKey ? e.keyCode - 64 : e.keyCode + 32;\n                                    let i = String.fromCharCode(t);\n                                    e.shiftKey && (i = i.toUpperCase()), o.key = s.C0.ESC + i;\n                                } else if (32 === e.keyCode) o.key = s.C0.ESC + (e.ctrlKey ? s.C0.NUL : \" \");\n                                else if (\"Dead\" === e.key && e.code.startsWith(\"Key\")) {\n                                    let t = e.code.slice(3, 4);\n                                    e.shiftKey || (t = t.toLowerCase()), o.key = s.C0.ESC + t, o.cancel = !0;\n                                }\n                            }\n                            else e.keyCode >= 65 && e.keyCode <= 90 ? o.key = String.fromCharCode(e.keyCode - 64) : 32 === e.keyCode ? o.key = s.C0.NUL : e.keyCode >= 51 && e.keyCode <= 55 ? o.key = String.fromCharCode(e.keyCode - 51 + 27) : 56 === e.keyCode ? o.key = s.C0.DEL : 219 === e.keyCode ? o.key = s.C0.ESC : 220 === e.keyCode ? o.key = s.C0.FS : 221 === e.keyCode && (o.key = s.C0.GS);\n                    }\n                    return o;\n                };\n            },\n            482: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.Utf8ToUtf32 = t.StringToUtf32 = t.utf32ToString = t.stringFromCodePoint = void 0, t.stringFromCodePoint = function(e) {\n                    return e > 65535 ? (e -= 65536, String.fromCharCode(55296 + (e >> 10)) + String.fromCharCode(e % 1024 + 56320)) : String.fromCharCode(e);\n                }, t.utf32ToString = function(e) {\n                    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e.length;\n                    let s = \"\";\n                    for(let r = t; r < i; ++r){\n                        let t = e[r];\n                        t > 65535 ? (t -= 65536, s += String.fromCharCode(55296 + (t >> 10)) + String.fromCharCode(t % 1024 + 56320)) : s += String.fromCharCode(t);\n                    }\n                    return s;\n                }, t.StringToUtf32 = class {\n                    clear() {\n                        this._interim = 0;\n                    }\n                    decode(e, t) {\n                        const i = e.length;\n                        if (!i) return 0;\n                        let s = 0, r = 0;\n                        if (this._interim) {\n                            const i = e.charCodeAt(r++);\n                            56320 <= i && i <= 57343 ? t[s++] = 1024 * (this._interim - 55296) + i - 56320 + 65536 : (t[s++] = this._interim, t[s++] = i), this._interim = 0;\n                        }\n                        for(let n = r; n < i; ++n){\n                            const r = e.charCodeAt(n);\n                            if (55296 <= r && r <= 56319) {\n                                if (++n >= i) return this._interim = r, s;\n                                const o = e.charCodeAt(n);\n                                56320 <= o && o <= 57343 ? t[s++] = 1024 * (r - 55296) + o - 56320 + 65536 : (t[s++] = r, t[s++] = o);\n                            } else 65279 !== r && (t[s++] = r);\n                        }\n                        return s;\n                    }\n                    constructor(){\n                        this._interim = 0;\n                    }\n                }, t.Utf8ToUtf32 = class {\n                    clear() {\n                        this.interim.fill(0);\n                    }\n                    decode(e, t) {\n                        const i = e.length;\n                        if (!i) return 0;\n                        let s, r, n, o, a = 0, h = 0, c = 0;\n                        if (this.interim[0]) {\n                            let s = !1, r = this.interim[0];\n                            r &= 192 == (224 & r) ? 31 : 224 == (240 & r) ? 15 : 7;\n                            let n, o = 0;\n                            for(; (n = 63 & this.interim[++o]) && o < 4;)r <<= 6, r |= n;\n                            const h = 192 == (224 & this.interim[0]) ? 2 : 224 == (240 & this.interim[0]) ? 3 : 4, l = h - o;\n                            for(; c < l;){\n                                if (c >= i) return 0;\n                                if (n = e[c++], 128 != (192 & n)) {\n                                    c--, s = !0;\n                                    break;\n                                }\n                                this.interim[o++] = n, r <<= 6, r |= 63 & n;\n                            }\n                            s || (2 === h ? r < 128 ? c-- : t[a++] = r : 3 === h ? r < 2048 || r >= 55296 && r <= 57343 || 65279 === r || (t[a++] = r) : r < 65536 || r > 1114111 || (t[a++] = r)), this.interim.fill(0);\n                        }\n                        const l = i - 4;\n                        let d = c;\n                        for(; d < i;){\n                            for(; !(!(d < l) || 128 & (s = e[d]) || 128 & (r = e[d + 1]) || 128 & (n = e[d + 2]) || 128 & (o = e[d + 3]));)t[a++] = s, t[a++] = r, t[a++] = n, t[a++] = o, d += 4;\n                            if (s = e[d++], s < 128) t[a++] = s;\n                            else if (192 == (224 & s)) {\n                                if (d >= i) return this.interim[0] = s, a;\n                                if (r = e[d++], 128 != (192 & r)) {\n                                    d--;\n                                    continue;\n                                }\n                                if (h = (31 & s) << 6 | 63 & r, h < 128) {\n                                    d--;\n                                    continue;\n                                }\n                                t[a++] = h;\n                            } else if (224 == (240 & s)) {\n                                if (d >= i) return this.interim[0] = s, a;\n                                if (r = e[d++], 128 != (192 & r)) {\n                                    d--;\n                                    continue;\n                                }\n                                if (d >= i) return this.interim[0] = s, this.interim[1] = r, a;\n                                if (n = e[d++], 128 != (192 & n)) {\n                                    d--;\n                                    continue;\n                                }\n                                if (h = (15 & s) << 12 | (63 & r) << 6 | 63 & n, h < 2048 || h >= 55296 && h <= 57343 || 65279 === h) continue;\n                                t[a++] = h;\n                            } else if (240 == (248 & s)) {\n                                if (d >= i) return this.interim[0] = s, a;\n                                if (r = e[d++], 128 != (192 & r)) {\n                                    d--;\n                                    continue;\n                                }\n                                if (d >= i) return this.interim[0] = s, this.interim[1] = r, a;\n                                if (n = e[d++], 128 != (192 & n)) {\n                                    d--;\n                                    continue;\n                                }\n                                if (d >= i) return this.interim[0] = s, this.interim[1] = r, this.interim[2] = n, a;\n                                if (o = e[d++], 128 != (192 & o)) {\n                                    d--;\n                                    continue;\n                                }\n                                if (h = (7 & s) << 18 | (63 & r) << 12 | (63 & n) << 6 | 63 & o, h < 65536 || h > 1114111) continue;\n                                t[a++] = h;\n                            }\n                        }\n                        return a;\n                    }\n                    constructor(){\n                        this.interim = new Uint8Array(3);\n                    }\n                };\n            },\n            225: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.UnicodeV6 = void 0;\n                const i = [\n                    [\n                        768,\n                        879\n                    ],\n                    [\n                        1155,\n                        1158\n                    ],\n                    [\n                        1160,\n                        1161\n                    ],\n                    [\n                        1425,\n                        1469\n                    ],\n                    [\n                        1471,\n                        1471\n                    ],\n                    [\n                        1473,\n                        1474\n                    ],\n                    [\n                        1476,\n                        1477\n                    ],\n                    [\n                        1479,\n                        1479\n                    ],\n                    [\n                        1536,\n                        1539\n                    ],\n                    [\n                        1552,\n                        1557\n                    ],\n                    [\n                        1611,\n                        1630\n                    ],\n                    [\n                        1648,\n                        1648\n                    ],\n                    [\n                        1750,\n                        1764\n                    ],\n                    [\n                        1767,\n                        1768\n                    ],\n                    [\n                        1770,\n                        1773\n                    ],\n                    [\n                        1807,\n                        1807\n                    ],\n                    [\n                        1809,\n                        1809\n                    ],\n                    [\n                        1840,\n                        1866\n                    ],\n                    [\n                        1958,\n                        1968\n                    ],\n                    [\n                        2027,\n                        2035\n                    ],\n                    [\n                        2305,\n                        2306\n                    ],\n                    [\n                        2364,\n                        2364\n                    ],\n                    [\n                        2369,\n                        2376\n                    ],\n                    [\n                        2381,\n                        2381\n                    ],\n                    [\n                        2385,\n                        2388\n                    ],\n                    [\n                        2402,\n                        2403\n                    ],\n                    [\n                        2433,\n                        2433\n                    ],\n                    [\n                        2492,\n                        2492\n                    ],\n                    [\n                        2497,\n                        2500\n                    ],\n                    [\n                        2509,\n                        2509\n                    ],\n                    [\n                        2530,\n                        2531\n                    ],\n                    [\n                        2561,\n                        2562\n                    ],\n                    [\n                        2620,\n                        2620\n                    ],\n                    [\n                        2625,\n                        2626\n                    ],\n                    [\n                        2631,\n                        2632\n                    ],\n                    [\n                        2635,\n                        2637\n                    ],\n                    [\n                        2672,\n                        2673\n                    ],\n                    [\n                        2689,\n                        2690\n                    ],\n                    [\n                        2748,\n                        2748\n                    ],\n                    [\n                        2753,\n                        2757\n                    ],\n                    [\n                        2759,\n                        2760\n                    ],\n                    [\n                        2765,\n                        2765\n                    ],\n                    [\n                        2786,\n                        2787\n                    ],\n                    [\n                        2817,\n                        2817\n                    ],\n                    [\n                        2876,\n                        2876\n                    ],\n                    [\n                        2879,\n                        2879\n                    ],\n                    [\n                        2881,\n                        2883\n                    ],\n                    [\n                        2893,\n                        2893\n                    ],\n                    [\n                        2902,\n                        2902\n                    ],\n                    [\n                        2946,\n                        2946\n                    ],\n                    [\n                        3008,\n                        3008\n                    ],\n                    [\n                        3021,\n                        3021\n                    ],\n                    [\n                        3134,\n                        3136\n                    ],\n                    [\n                        3142,\n                        3144\n                    ],\n                    [\n                        3146,\n                        3149\n                    ],\n                    [\n                        3157,\n                        3158\n                    ],\n                    [\n                        3260,\n                        3260\n                    ],\n                    [\n                        3263,\n                        3263\n                    ],\n                    [\n                        3270,\n                        3270\n                    ],\n                    [\n                        3276,\n                        3277\n                    ],\n                    [\n                        3298,\n                        3299\n                    ],\n                    [\n                        3393,\n                        3395\n                    ],\n                    [\n                        3405,\n                        3405\n                    ],\n                    [\n                        3530,\n                        3530\n                    ],\n                    [\n                        3538,\n                        3540\n                    ],\n                    [\n                        3542,\n                        3542\n                    ],\n                    [\n                        3633,\n                        3633\n                    ],\n                    [\n                        3636,\n                        3642\n                    ],\n                    [\n                        3655,\n                        3662\n                    ],\n                    [\n                        3761,\n                        3761\n                    ],\n                    [\n                        3764,\n                        3769\n                    ],\n                    [\n                        3771,\n                        3772\n                    ],\n                    [\n                        3784,\n                        3789\n                    ],\n                    [\n                        3864,\n                        3865\n                    ],\n                    [\n                        3893,\n                        3893\n                    ],\n                    [\n                        3895,\n                        3895\n                    ],\n                    [\n                        3897,\n                        3897\n                    ],\n                    [\n                        3953,\n                        3966\n                    ],\n                    [\n                        3968,\n                        3972\n                    ],\n                    [\n                        3974,\n                        3975\n                    ],\n                    [\n                        3984,\n                        3991\n                    ],\n                    [\n                        3993,\n                        4028\n                    ],\n                    [\n                        4038,\n                        4038\n                    ],\n                    [\n                        4141,\n                        4144\n                    ],\n                    [\n                        4146,\n                        4146\n                    ],\n                    [\n                        4150,\n                        4151\n                    ],\n                    [\n                        4153,\n                        4153\n                    ],\n                    [\n                        4184,\n                        4185\n                    ],\n                    [\n                        4448,\n                        4607\n                    ],\n                    [\n                        4959,\n                        4959\n                    ],\n                    [\n                        5906,\n                        5908\n                    ],\n                    [\n                        5938,\n                        5940\n                    ],\n                    [\n                        5970,\n                        5971\n                    ],\n                    [\n                        6002,\n                        6003\n                    ],\n                    [\n                        6068,\n                        6069\n                    ],\n                    [\n                        6071,\n                        6077\n                    ],\n                    [\n                        6086,\n                        6086\n                    ],\n                    [\n                        6089,\n                        6099\n                    ],\n                    [\n                        6109,\n                        6109\n                    ],\n                    [\n                        6155,\n                        6157\n                    ],\n                    [\n                        6313,\n                        6313\n                    ],\n                    [\n                        6432,\n                        6434\n                    ],\n                    [\n                        6439,\n                        6440\n                    ],\n                    [\n                        6450,\n                        6450\n                    ],\n                    [\n                        6457,\n                        6459\n                    ],\n                    [\n                        6679,\n                        6680\n                    ],\n                    [\n                        6912,\n                        6915\n                    ],\n                    [\n                        6964,\n                        6964\n                    ],\n                    [\n                        6966,\n                        6970\n                    ],\n                    [\n                        6972,\n                        6972\n                    ],\n                    [\n                        6978,\n                        6978\n                    ],\n                    [\n                        7019,\n                        7027\n                    ],\n                    [\n                        7616,\n                        7626\n                    ],\n                    [\n                        7678,\n                        7679\n                    ],\n                    [\n                        8203,\n                        8207\n                    ],\n                    [\n                        8234,\n                        8238\n                    ],\n                    [\n                        8288,\n                        8291\n                    ],\n                    [\n                        8298,\n                        8303\n                    ],\n                    [\n                        8400,\n                        8431\n                    ],\n                    [\n                        12330,\n                        12335\n                    ],\n                    [\n                        12441,\n                        12442\n                    ],\n                    [\n                        43014,\n                        43014\n                    ],\n                    [\n                        43019,\n                        43019\n                    ],\n                    [\n                        43045,\n                        43046\n                    ],\n                    [\n                        64286,\n                        64286\n                    ],\n                    [\n                        65024,\n                        65039\n                    ],\n                    [\n                        65056,\n                        65059\n                    ],\n                    [\n                        65279,\n                        65279\n                    ],\n                    [\n                        65529,\n                        65531\n                    ]\n                ], s = [\n                    [\n                        68097,\n                        68099\n                    ],\n                    [\n                        68101,\n                        68102\n                    ],\n                    [\n                        68108,\n                        68111\n                    ],\n                    [\n                        68152,\n                        68154\n                    ],\n                    [\n                        68159,\n                        68159\n                    ],\n                    [\n                        119143,\n                        119145\n                    ],\n                    [\n                        119155,\n                        119170\n                    ],\n                    [\n                        119173,\n                        119179\n                    ],\n                    [\n                        119210,\n                        119213\n                    ],\n                    [\n                        119362,\n                        119364\n                    ],\n                    [\n                        917505,\n                        917505\n                    ],\n                    [\n                        917536,\n                        917631\n                    ],\n                    [\n                        917760,\n                        917999\n                    ]\n                ];\n                let r;\n                t.UnicodeV6 = class {\n                    wcwidth(e) {\n                        return e < 32 ? 0 : e < 127 ? 1 : e < 65536 ? r[e] : function(e, t) {\n                            let i, s = 0, r = t.length - 1;\n                            if (e < t[0][0] || e > t[r][1]) return !1;\n                            for(; r >= s;)if (i = s + r >> 1, e > t[i][1]) s = i + 1;\n                            else {\n                                if (!(e < t[i][0])) return !0;\n                                r = i - 1;\n                            }\n                            return !1;\n                        }(e, s) ? 0 : e >= 131072 && e <= 196605 || e >= 196608 && e <= 262141 ? 2 : 1;\n                    }\n                    constructor(){\n                        if (this.version = \"6\", !r) {\n                            r = new Uint8Array(65536), r.fill(1), r[0] = 0, r.fill(0, 1, 32), r.fill(0, 127, 160), r.fill(2, 4352, 4448), r[9001] = 2, r[9002] = 2, r.fill(2, 11904, 42192), r[12351] = 1, r.fill(2, 44032, 55204), r.fill(2, 63744, 64256), r.fill(2, 65040, 65050), r.fill(2, 65072, 65136), r.fill(2, 65280, 65377), r.fill(2, 65504, 65511);\n                            for(let e = 0; e < i.length; ++e)r.fill(0, i[e][0], i[e][1] + 1);\n                        }\n                    }\n                };\n            },\n            5981: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.WriteBuffer = void 0;\n                const s = i(8460), r = i(844);\n                class n extends r.Disposable {\n                    handleUserInput() {\n                        this._didUserInput = !0;\n                    }\n                    writeSync(e, t) {\n                        if (void 0 !== t && this._syncCalls > t) return void (this._syncCalls = 0);\n                        if (this._pendingData += e.length, this._writeBuffer.push(e), this._callbacks.push(void 0), this._syncCalls++, this._isSyncWriting) return;\n                        let i;\n                        for(this._isSyncWriting = !0; i = this._writeBuffer.shift();){\n                            this._action(i);\n                            const e = this._callbacks.shift();\n                            e && e();\n                        }\n                        this._pendingData = 0, this._bufferOffset = 2147483647, this._isSyncWriting = !1, this._syncCalls = 0;\n                    }\n                    write(e, t) {\n                        if (this._pendingData > 5e7) throw new Error(\"write data discarded, use flow control to avoid losing data\");\n                        if (!this._writeBuffer.length) {\n                            if (this._bufferOffset = 0, this._didUserInput) return this._didUserInput = !1, this._pendingData += e.length, this._writeBuffer.push(e), this._callbacks.push(t), void this._innerWrite();\n                            setTimeout(()=>this._innerWrite());\n                        }\n                        this._pendingData += e.length, this._writeBuffer.push(e), this._callbacks.push(t);\n                    }\n                    _innerWrite() {\n                        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n                        const i = e || Date.now();\n                        for(; this._writeBuffer.length > this._bufferOffset;){\n                            const e = this._writeBuffer[this._bufferOffset], s = this._action(e, t);\n                            if (s) {\n                                const e = (e)=>Date.now() - i >= 12 ? setTimeout(()=>this._innerWrite(0, e)) : this._innerWrite(i, e);\n                                return void s.catch((e)=>(queueMicrotask(()=>{\n                                        throw e;\n                                    }), Promise.resolve(!1))).then(e);\n                            }\n                            const r = this._callbacks[this._bufferOffset];\n                            if (r && r(), this._bufferOffset++, this._pendingData -= e.length, Date.now() - i >= 12) break;\n                        }\n                        this._writeBuffer.length > this._bufferOffset ? (this._bufferOffset > 50 && (this._writeBuffer = this._writeBuffer.slice(this._bufferOffset), this._callbacks = this._callbacks.slice(this._bufferOffset), this._bufferOffset = 0), setTimeout(()=>this._innerWrite())) : (this._writeBuffer.length = 0, this._callbacks.length = 0, this._pendingData = 0, this._bufferOffset = 0), this._onWriteParsed.fire();\n                    }\n                    constructor(e){\n                        super(), this._action = e, this._writeBuffer = [], this._callbacks = [], this._pendingData = 0, this._bufferOffset = 0, this._isSyncWriting = !1, this._syncCalls = 0, this._didUserInput = !1, this._onWriteParsed = this.register(new s.EventEmitter), this.onWriteParsed = this._onWriteParsed.event;\n                    }\n                }\n                t.WriteBuffer = n;\n            },\n            5941: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.toRgbString = t.parseColor = void 0;\n                const i = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/, s = /^[\\da-f]+$/;\n                function r(e, t) {\n                    const i = e.toString(16), s = i.length < 2 ? \"0\" + i : i;\n                    switch(t){\n                        case 4:\n                            return i[0];\n                        case 8:\n                            return s;\n                        case 12:\n                            return (s + s).slice(0, 3);\n                        default:\n                            return s + s;\n                    }\n                }\n                t.parseColor = function(e) {\n                    if (!e) return;\n                    let t = e.toLowerCase();\n                    if (0 === t.indexOf(\"rgb:\")) {\n                        t = t.slice(4);\n                        const e = i.exec(t);\n                        if (e) {\n                            const t = e[1] ? 15 : e[4] ? 255 : e[7] ? 4095 : 65535;\n                            return [\n                                Math.round(parseInt(e[1] || e[4] || e[7] || e[10], 16) / t * 255),\n                                Math.round(parseInt(e[2] || e[5] || e[8] || e[11], 16) / t * 255),\n                                Math.round(parseInt(e[3] || e[6] || e[9] || e[12], 16) / t * 255)\n                            ];\n                        }\n                    } else if (0 === t.indexOf(\"#\") && (t = t.slice(1), s.exec(t) && [\n                        3,\n                        6,\n                        9,\n                        12\n                    ].includes(t.length))) {\n                        const e = t.length / 3, i = [\n                            0,\n                            0,\n                            0\n                        ];\n                        for(let s = 0; s < 3; ++s){\n                            const r = parseInt(t.slice(e * s, e * s + e), 16);\n                            i[s] = 1 === e ? r << 4 : 2 === e ? r : 3 === e ? r >> 4 : r >> 8;\n                        }\n                        return i;\n                    }\n                }, t.toRgbString = function(e) {\n                    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 16;\n                    const [i, s, n] = e;\n                    return \"rgb:\".concat(r(i, t), \"/\").concat(r(s, t), \"/\").concat(r(n, t));\n                };\n            },\n            5770: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.PAYLOAD_LIMIT = void 0, t.PAYLOAD_LIMIT = 1e7;\n            },\n            6351: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.DcsHandler = t.DcsParser = void 0;\n                const s = i(482), r = i(8742), n = i(5770), o = [];\n                t.DcsParser = class {\n                    dispose() {\n                        this._handlers = Object.create(null), this._handlerFb = ()=>{}, this._active = o;\n                    }\n                    registerHandler(e, t) {\n                        void 0 === this._handlers[e] && (this._handlers[e] = []);\n                        const i = this._handlers[e];\n                        return i.push(t), {\n                            dispose: ()=>{\n                                const e = i.indexOf(t);\n                                -1 !== e && i.splice(e, 1);\n                            }\n                        };\n                    }\n                    clearHandler(e) {\n                        this._handlers[e] && delete this._handlers[e];\n                    }\n                    setHandlerFallback(e) {\n                        this._handlerFb = e;\n                    }\n                    reset() {\n                        if (this._active.length) for(let e = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e >= 0; --e)this._active[e].unhook(!1);\n                        this._stack.paused = !1, this._active = o, this._ident = 0;\n                    }\n                    hook(e, t) {\n                        if (this.reset(), this._ident = e, this._active = this._handlers[e] || o, this._active.length) for(let e = this._active.length - 1; e >= 0; e--)this._active[e].hook(t);\n                        else this._handlerFb(this._ident, \"HOOK\", t);\n                    }\n                    put(e, t, i) {\n                        if (this._active.length) for(let s = this._active.length - 1; s >= 0; s--)this._active[s].put(e, t, i);\n                        else this._handlerFb(this._ident, \"PUT\", (0, s.utf32ToString)(e, t, i));\n                    }\n                    unhook(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n                        if (this._active.length) {\n                            let i = !1, s = this._active.length - 1, r = !1;\n                            if (this._stack.paused && (s = this._stack.loopPosition - 1, i = t, r = this._stack.fallThrough, this._stack.paused = !1), !r && !1 === i) {\n                                for(; s >= 0 && (i = this._active[s].unhook(e), !0 !== i); s--)if (i instanceof Promise) return this._stack.paused = !0, this._stack.loopPosition = s, this._stack.fallThrough = !1, i;\n                                s--;\n                            }\n                            for(; s >= 0; s--)if (i = this._active[s].unhook(!1), i instanceof Promise) return this._stack.paused = !0, this._stack.loopPosition = s, this._stack.fallThrough = !0, i;\n                        } else this._handlerFb(this._ident, \"UNHOOK\", e);\n                        this._active = o, this._ident = 0;\n                    }\n                    constructor(){\n                        this._handlers = Object.create(null), this._active = o, this._ident = 0, this._handlerFb = ()=>{}, this._stack = {\n                            paused: !1,\n                            loopPosition: 0,\n                            fallThrough: !1\n                        };\n                    }\n                };\n                const a = new r.Params;\n                a.addParam(0), t.DcsHandler = class {\n                    hook(e) {\n                        this._params = e.length > 1 || e.params[0] ? e.clone() : a, this._data = \"\", this._hitLimit = !1;\n                    }\n                    put(e, t, i) {\n                        this._hitLimit || (this._data += (0, s.utf32ToString)(e, t, i), this._data.length > n.PAYLOAD_LIMIT && (this._data = \"\", this._hitLimit = !0));\n                    }\n                    unhook(e) {\n                        let t = !1;\n                        if (this._hitLimit) t = !1;\n                        else if (e && (t = this._handler(this._data, this._params), t instanceof Promise)) return t.then((e)=>(this._params = a, this._data = \"\", this._hitLimit = !1, e));\n                        return this._params = a, this._data = \"\", this._hitLimit = !1, t;\n                    }\n                    constructor(e){\n                        this._handler = e, this._data = \"\", this._params = a, this._hitLimit = !1;\n                    }\n                };\n            },\n            2015: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.EscapeSequenceParser = t.VT500_TRANSITION_TABLE = t.TransitionTable = void 0;\n                const s = i(844), r = i(8742), n = i(6242), o = i(6351);\n                class a {\n                    setDefault(e, t) {\n                        this.table.fill(e << 4 | t);\n                    }\n                    add(e, t, i, s) {\n                        this.table[t << 8 | e] = i << 4 | s;\n                    }\n                    addMany(e, t, i, s) {\n                        for(let r = 0; r < e.length; r++)this.table[t << 8 | e[r]] = i << 4 | s;\n                    }\n                    constructor(e){\n                        this.table = new Uint8Array(e);\n                    }\n                }\n                t.TransitionTable = a;\n                const h = 160;\n                t.VT500_TRANSITION_TABLE = function() {\n                    const e = new a(4095), t = Array.apply(null, Array(256)).map((e, t)=>t), i = (e, i)=>t.slice(e, i), s = i(32, 127), r = i(0, 24);\n                    r.push(25), r.push.apply(r, i(28, 32));\n                    const n = i(0, 14);\n                    let o;\n                    for(o in e.setDefault(1, 0), e.addMany(s, 0, 2, 0), n)e.addMany([\n                        24,\n                        26,\n                        153,\n                        154\n                    ], o, 3, 0), e.addMany(i(128, 144), o, 3, 0), e.addMany(i(144, 152), o, 3, 0), e.add(156, o, 0, 0), e.add(27, o, 11, 1), e.add(157, o, 4, 8), e.addMany([\n                        152,\n                        158,\n                        159\n                    ], o, 0, 7), e.add(155, o, 11, 3), e.add(144, o, 11, 9);\n                    return e.addMany(r, 0, 3, 0), e.addMany(r, 1, 3, 1), e.add(127, 1, 0, 1), e.addMany(r, 8, 0, 8), e.addMany(r, 3, 3, 3), e.add(127, 3, 0, 3), e.addMany(r, 4, 3, 4), e.add(127, 4, 0, 4), e.addMany(r, 6, 3, 6), e.addMany(r, 5, 3, 5), e.add(127, 5, 0, 5), e.addMany(r, 2, 3, 2), e.add(127, 2, 0, 2), e.add(93, 1, 4, 8), e.addMany(s, 8, 5, 8), e.add(127, 8, 5, 8), e.addMany([\n                        156,\n                        27,\n                        24,\n                        26,\n                        7\n                    ], 8, 6, 0), e.addMany(i(28, 32), 8, 0, 8), e.addMany([\n                        88,\n                        94,\n                        95\n                    ], 1, 0, 7), e.addMany(s, 7, 0, 7), e.addMany(r, 7, 0, 7), e.add(156, 7, 0, 0), e.add(127, 7, 0, 7), e.add(91, 1, 11, 3), e.addMany(i(64, 127), 3, 7, 0), e.addMany(i(48, 60), 3, 8, 4), e.addMany([\n                        60,\n                        61,\n                        62,\n                        63\n                    ], 3, 9, 4), e.addMany(i(48, 60), 4, 8, 4), e.addMany(i(64, 127), 4, 7, 0), e.addMany([\n                        60,\n                        61,\n                        62,\n                        63\n                    ], 4, 0, 6), e.addMany(i(32, 64), 6, 0, 6), e.add(127, 6, 0, 6), e.addMany(i(64, 127), 6, 0, 0), e.addMany(i(32, 48), 3, 9, 5), e.addMany(i(32, 48), 5, 9, 5), e.addMany(i(48, 64), 5, 0, 6), e.addMany(i(64, 127), 5, 7, 0), e.addMany(i(32, 48), 4, 9, 5), e.addMany(i(32, 48), 1, 9, 2), e.addMany(i(32, 48), 2, 9, 2), e.addMany(i(48, 127), 2, 10, 0), e.addMany(i(48, 80), 1, 10, 0), e.addMany(i(81, 88), 1, 10, 0), e.addMany([\n                        89,\n                        90,\n                        92\n                    ], 1, 10, 0), e.addMany(i(96, 127), 1, 10, 0), e.add(80, 1, 11, 9), e.addMany(r, 9, 0, 9), e.add(127, 9, 0, 9), e.addMany(i(28, 32), 9, 0, 9), e.addMany(i(32, 48), 9, 9, 12), e.addMany(i(48, 60), 9, 8, 10), e.addMany([\n                        60,\n                        61,\n                        62,\n                        63\n                    ], 9, 9, 10), e.addMany(r, 11, 0, 11), e.addMany(i(32, 128), 11, 0, 11), e.addMany(i(28, 32), 11, 0, 11), e.addMany(r, 10, 0, 10), e.add(127, 10, 0, 10), e.addMany(i(28, 32), 10, 0, 10), e.addMany(i(48, 60), 10, 8, 10), e.addMany([\n                        60,\n                        61,\n                        62,\n                        63\n                    ], 10, 0, 11), e.addMany(i(32, 48), 10, 9, 12), e.addMany(r, 12, 0, 12), e.add(127, 12, 0, 12), e.addMany(i(28, 32), 12, 0, 12), e.addMany(i(32, 48), 12, 9, 12), e.addMany(i(48, 64), 12, 0, 11), e.addMany(i(64, 127), 12, 12, 13), e.addMany(i(64, 127), 10, 12, 13), e.addMany(i(64, 127), 9, 12, 13), e.addMany(r, 13, 13, 13), e.addMany(s, 13, 13, 13), e.add(127, 13, 0, 13), e.addMany([\n                        27,\n                        156,\n                        24,\n                        26\n                    ], 13, 14, 0), e.add(h, 0, 2, 0), e.add(h, 8, 5, 8), e.add(h, 6, 0, 6), e.add(h, 11, 0, 11), e.add(h, 13, 13, 13), e;\n                }();\n                class c extends s.Disposable {\n                    _identifier(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [\n                            64,\n                            126\n                        ];\n                        let i = 0;\n                        if (e.prefix) {\n                            if (e.prefix.length > 1) throw new Error(\"only one byte as prefix supported\");\n                            if (i = e.prefix.charCodeAt(0), i && 60 > i || i > 63) throw new Error(\"prefix must be in range 0x3c .. 0x3f\");\n                        }\n                        if (e.intermediates) {\n                            if (e.intermediates.length > 2) throw new Error(\"only two bytes as intermediates are supported\");\n                            for(let t = 0; t < e.intermediates.length; ++t){\n                                const s = e.intermediates.charCodeAt(t);\n                                if (32 > s || s > 47) throw new Error(\"intermediate must be in range 0x20 .. 0x2f\");\n                                i <<= 8, i |= s;\n                            }\n                        }\n                        if (1 !== e.final.length) throw new Error(\"final must be a single byte\");\n                        const s = e.final.charCodeAt(0);\n                        if (t[0] > s || s > t[1]) throw new Error(\"final must be in range \".concat(t[0], \" .. \").concat(t[1]));\n                        return i <<= 8, i |= s, i;\n                    }\n                    identToString(e) {\n                        const t = [];\n                        for(; e;)t.push(String.fromCharCode(255 & e)), e >>= 8;\n                        return t.reverse().join(\"\");\n                    }\n                    setPrintHandler(e) {\n                        this._printHandler = e;\n                    }\n                    clearPrintHandler() {\n                        this._printHandler = this._printHandlerFb;\n                    }\n                    registerEscHandler(e, t) {\n                        const i = this._identifier(e, [\n                            48,\n                            126\n                        ]);\n                        void 0 === this._escHandlers[i] && (this._escHandlers[i] = []);\n                        const s = this._escHandlers[i];\n                        return s.push(t), {\n                            dispose: ()=>{\n                                const e = s.indexOf(t);\n                                -1 !== e && s.splice(e, 1);\n                            }\n                        };\n                    }\n                    clearEscHandler(e) {\n                        this._escHandlers[this._identifier(e, [\n                            48,\n                            126\n                        ])] && delete this._escHandlers[this._identifier(e, [\n                            48,\n                            126\n                        ])];\n                    }\n                    setEscHandlerFallback(e) {\n                        this._escHandlerFb = e;\n                    }\n                    setExecuteHandler(e, t) {\n                        this._executeHandlers[e.charCodeAt(0)] = t;\n                    }\n                    clearExecuteHandler(e) {\n                        this._executeHandlers[e.charCodeAt(0)] && delete this._executeHandlers[e.charCodeAt(0)];\n                    }\n                    setExecuteHandlerFallback(e) {\n                        this._executeHandlerFb = e;\n                    }\n                    registerCsiHandler(e, t) {\n                        const i = this._identifier(e);\n                        void 0 === this._csiHandlers[i] && (this._csiHandlers[i] = []);\n                        const s = this._csiHandlers[i];\n                        return s.push(t), {\n                            dispose: ()=>{\n                                const e = s.indexOf(t);\n                                -1 !== e && s.splice(e, 1);\n                            }\n                        };\n                    }\n                    clearCsiHandler(e) {\n                        this._csiHandlers[this._identifier(e)] && delete this._csiHandlers[this._identifier(e)];\n                    }\n                    setCsiHandlerFallback(e) {\n                        this._csiHandlerFb = e;\n                    }\n                    registerDcsHandler(e, t) {\n                        return this._dcsParser.registerHandler(this._identifier(e), t);\n                    }\n                    clearDcsHandler(e) {\n                        this._dcsParser.clearHandler(this._identifier(e));\n                    }\n                    setDcsHandlerFallback(e) {\n                        this._dcsParser.setHandlerFallback(e);\n                    }\n                    registerOscHandler(e, t) {\n                        return this._oscParser.registerHandler(e, t);\n                    }\n                    clearOscHandler(e) {\n                        this._oscParser.clearHandler(e);\n                    }\n                    setOscHandlerFallback(e) {\n                        this._oscParser.setHandlerFallback(e);\n                    }\n                    setErrorHandler(e) {\n                        this._errorHandler = e;\n                    }\n                    clearErrorHandler() {\n                        this._errorHandler = this._errorHandlerFb;\n                    }\n                    reset() {\n                        this.currentState = this.initialState, this._oscParser.reset(), this._dcsParser.reset(), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0, 0 !== this._parseStack.state && (this._parseStack.state = 2, this._parseStack.handlers = []);\n                    }\n                    _preserveStack(e, t, i, s, r) {\n                        this._parseStack.state = e, this._parseStack.handlers = t, this._parseStack.handlerPos = i, this._parseStack.transition = s, this._parseStack.chunkPos = r;\n                    }\n                    parse(e, t, i) {\n                        let s, r = 0, n = 0, o = 0;\n                        if (this._parseStack.state) if (2 === this._parseStack.state) this._parseStack.state = 0, o = this._parseStack.chunkPos + 1;\n                        else {\n                            if (void 0 === i || 1 === this._parseStack.state) throw this._parseStack.state = 1, new Error(\"improper continuation due to previous async handler, giving up parsing\");\n                            const t = this._parseStack.handlers;\n                            let n = this._parseStack.handlerPos - 1;\n                            switch(this._parseStack.state){\n                                case 3:\n                                    if (!1 === i && n > -1) {\n                                        for(; n >= 0 && (s = t[n](this._params), !0 !== s); n--)if (s instanceof Promise) return this._parseStack.handlerPos = n, s;\n                                    }\n                                    this._parseStack.handlers = [];\n                                    break;\n                                case 4:\n                                    if (!1 === i && n > -1) {\n                                        for(; n >= 0 && (s = t[n](), !0 !== s); n--)if (s instanceof Promise) return this._parseStack.handlerPos = n, s;\n                                    }\n                                    this._parseStack.handlers = [];\n                                    break;\n                                case 6:\n                                    if (r = e[this._parseStack.chunkPos], s = this._dcsParser.unhook(24 !== r && 26 !== r, i), s) return s;\n                                    27 === r && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;\n                                    break;\n                                case 5:\n                                    if (r = e[this._parseStack.chunkPos], s = this._oscParser.end(24 !== r && 26 !== r, i), s) return s;\n                                    27 === r && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;\n                            }\n                            this._parseStack.state = 0, o = this._parseStack.chunkPos + 1, this.precedingCodepoint = 0, this.currentState = 15 & this._parseStack.transition;\n                        }\n                        for(let i = o; i < t; ++i){\n                            switch(r = e[i], n = this._transitions.table[this.currentState << 8 | (r < 160 ? r : h)], n >> 4){\n                                case 2:\n                                    for(let s = i + 1;; ++s){\n                                        if (s >= t || (r = e[s]) < 32 || r > 126 && r < h) {\n                                            this._printHandler(e, i, s), i = s - 1;\n                                            break;\n                                        }\n                                        if (++s >= t || (r = e[s]) < 32 || r > 126 && r < h) {\n                                            this._printHandler(e, i, s), i = s - 1;\n                                            break;\n                                        }\n                                        if (++s >= t || (r = e[s]) < 32 || r > 126 && r < h) {\n                                            this._printHandler(e, i, s), i = s - 1;\n                                            break;\n                                        }\n                                        if (++s >= t || (r = e[s]) < 32 || r > 126 && r < h) {\n                                            this._printHandler(e, i, s), i = s - 1;\n                                            break;\n                                        }\n                                    }\n                                    break;\n                                case 3:\n                                    this._executeHandlers[r] ? this._executeHandlers[r]() : this._executeHandlerFb(r), this.precedingCodepoint = 0;\n                                    break;\n                                case 0:\n                                    break;\n                                case 1:\n                                    if (this._errorHandler({\n                                        position: i,\n                                        code: r,\n                                        currentState: this.currentState,\n                                        collect: this._collect,\n                                        params: this._params,\n                                        abort: !1\n                                    }).abort) return;\n                                    break;\n                                case 7:\n                                    const o = this._csiHandlers[this._collect << 8 | r];\n                                    let a = o ? o.length - 1 : -1;\n                                    for(; a >= 0 && (s = o[a](this._params), !0 !== s); a--)if (s instanceof Promise) return this._preserveStack(3, o, a, n, i), s;\n                                    a < 0 && this._csiHandlerFb(this._collect << 8 | r, this._params), this.precedingCodepoint = 0;\n                                    break;\n                                case 8:\n                                    do {\n                                        switch(r){\n                                            case 59:\n                                                this._params.addParam(0);\n                                                break;\n                                            case 58:\n                                                this._params.addSubParam(-1);\n                                                break;\n                                            default:\n                                                this._params.addDigit(r - 48);\n                                        }\n                                    }while (++i < t && (r = e[i]) > 47 && r < 60);\n                                    i--;\n                                    break;\n                                case 9:\n                                    this._collect <<= 8, this._collect |= r;\n                                    break;\n                                case 10:\n                                    const c = this._escHandlers[this._collect << 8 | r];\n                                    let l = c ? c.length - 1 : -1;\n                                    for(; l >= 0 && (s = c[l](), !0 !== s); l--)if (s instanceof Promise) return this._preserveStack(4, c, l, n, i), s;\n                                    l < 0 && this._escHandlerFb(this._collect << 8 | r), this.precedingCodepoint = 0;\n                                    break;\n                                case 11:\n                                    this._params.reset(), this._params.addParam(0), this._collect = 0;\n                                    break;\n                                case 12:\n                                    this._dcsParser.hook(this._collect << 8 | r, this._params);\n                                    break;\n                                case 13:\n                                    for(let s = i + 1;; ++s)if (s >= t || 24 === (r = e[s]) || 26 === r || 27 === r || r > 127 && r < h) {\n                                        this._dcsParser.put(e, i, s), i = s - 1;\n                                        break;\n                                    }\n                                    break;\n                                case 14:\n                                    if (s = this._dcsParser.unhook(24 !== r && 26 !== r), s) return this._preserveStack(6, [], 0, n, i), s;\n                                    27 === r && (n |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;\n                                    break;\n                                case 4:\n                                    this._oscParser.start();\n                                    break;\n                                case 5:\n                                    for(let s = i + 1;; s++)if (s >= t || (r = e[s]) < 32 || r > 127 && r < h) {\n                                        this._oscParser.put(e, i, s), i = s - 1;\n                                        break;\n                                    }\n                                    break;\n                                case 6:\n                                    if (s = this._oscParser.end(24 !== r && 26 !== r), s) return this._preserveStack(5, [], 0, n, i), s;\n                                    27 === r && (n |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;\n                            }\n                            this.currentState = 15 & n;\n                        }\n                    }\n                    constructor(e = t.VT500_TRANSITION_TABLE){\n                        super(), this._transitions = e, this._parseStack = {\n                            state: 0,\n                            handlers: [],\n                            handlerPos: 0,\n                            transition: 0,\n                            chunkPos: 0\n                        }, this.initialState = 0, this.currentState = this.initialState, this._params = new r.Params, this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0, this._printHandlerFb = (e, t, i)=>{}, this._executeHandlerFb = (e)=>{}, this._csiHandlerFb = (e, t)=>{}, this._escHandlerFb = (e)=>{}, this._errorHandlerFb = (e)=>e, this._printHandler = this._printHandlerFb, this._executeHandlers = Object.create(null), this._csiHandlers = Object.create(null), this._escHandlers = Object.create(null), this.register((0, s.toDisposable)(()=>{\n                            this._csiHandlers = Object.create(null), this._executeHandlers = Object.create(null), this._escHandlers = Object.create(null);\n                        })), this._oscParser = this.register(new n.OscParser), this._dcsParser = this.register(new o.DcsParser), this._errorHandler = this._errorHandlerFb, this.registerEscHandler({\n                            final: \"\\\\\"\n                        }, ()=>!0);\n                    }\n                }\n                t.EscapeSequenceParser = c;\n            },\n            6242: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.OscHandler = t.OscParser = void 0;\n                const s = i(5770), r = i(482), n = [];\n                t.OscParser = class {\n                    registerHandler(e, t) {\n                        void 0 === this._handlers[e] && (this._handlers[e] = []);\n                        const i = this._handlers[e];\n                        return i.push(t), {\n                            dispose: ()=>{\n                                const e = i.indexOf(t);\n                                -1 !== e && i.splice(e, 1);\n                            }\n                        };\n                    }\n                    clearHandler(e) {\n                        this._handlers[e] && delete this._handlers[e];\n                    }\n                    setHandlerFallback(e) {\n                        this._handlerFb = e;\n                    }\n                    dispose() {\n                        this._handlers = Object.create(null), this._handlerFb = ()=>{}, this._active = n;\n                    }\n                    reset() {\n                        if (2 === this._state) for(let e = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e >= 0; --e)this._active[e].end(!1);\n                        this._stack.paused = !1, this._active = n, this._id = -1, this._state = 0;\n                    }\n                    _start() {\n                        if (this._active = this._handlers[this._id] || n, this._active.length) for(let e = this._active.length - 1; e >= 0; e--)this._active[e].start();\n                        else this._handlerFb(this._id, \"START\");\n                    }\n                    _put(e, t, i) {\n                        if (this._active.length) for(let s = this._active.length - 1; s >= 0; s--)this._active[s].put(e, t, i);\n                        else this._handlerFb(this._id, \"PUT\", (0, r.utf32ToString)(e, t, i));\n                    }\n                    start() {\n                        this.reset(), this._state = 1;\n                    }\n                    put(e, t, i) {\n                        if (3 !== this._state) {\n                            if (1 === this._state) for(; t < i;){\n                                const i = e[t++];\n                                if (59 === i) {\n                                    this._state = 2, this._start();\n                                    break;\n                                }\n                                if (i < 48 || 57 < i) return void (this._state = 3);\n                                -1 === this._id && (this._id = 0), this._id = 10 * this._id + i - 48;\n                            }\n                            2 === this._state && i - t > 0 && this._put(e, t, i);\n                        }\n                    }\n                    end(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n                        if (0 !== this._state) {\n                            if (3 !== this._state) if (1 === this._state && this._start(), this._active.length) {\n                                let i = !1, s = this._active.length - 1, r = !1;\n                                if (this._stack.paused && (s = this._stack.loopPosition - 1, i = t, r = this._stack.fallThrough, this._stack.paused = !1), !r && !1 === i) {\n                                    for(; s >= 0 && (i = this._active[s].end(e), !0 !== i); s--)if (i instanceof Promise) return this._stack.paused = !0, this._stack.loopPosition = s, this._stack.fallThrough = !1, i;\n                                    s--;\n                                }\n                                for(; s >= 0; s--)if (i = this._active[s].end(!1), i instanceof Promise) return this._stack.paused = !0, this._stack.loopPosition = s, this._stack.fallThrough = !0, i;\n                            } else this._handlerFb(this._id, \"END\", e);\n                            this._active = n, this._id = -1, this._state = 0;\n                        }\n                    }\n                    constructor(){\n                        this._state = 0, this._active = n, this._id = -1, this._handlers = Object.create(null), this._handlerFb = ()=>{}, this._stack = {\n                            paused: !1,\n                            loopPosition: 0,\n                            fallThrough: !1\n                        };\n                    }\n                }, t.OscHandler = class {\n                    start() {\n                        this._data = \"\", this._hitLimit = !1;\n                    }\n                    put(e, t, i) {\n                        this._hitLimit || (this._data += (0, r.utf32ToString)(e, t, i), this._data.length > s.PAYLOAD_LIMIT && (this._data = \"\", this._hitLimit = !0));\n                    }\n                    end(e) {\n                        let t = !1;\n                        if (this._hitLimit) t = !1;\n                        else if (e && (t = this._handler(this._data), t instanceof Promise)) return t.then((e)=>(this._data = \"\", this._hitLimit = !1, e));\n                        return this._data = \"\", this._hitLimit = !1, t;\n                    }\n                    constructor(e){\n                        this._handler = e, this._data = \"\", this._hitLimit = !1;\n                    }\n                };\n            },\n            8742: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.Params = void 0;\n                const i = 2147483647;\n                class s {\n                    static fromArray(e) {\n                        const t = new s;\n                        if (!e.length) return t;\n                        for(let i = Array.isArray(e[0]) ? 1 : 0; i < e.length; ++i){\n                            const s = e[i];\n                            if (Array.isArray(s)) for(let e = 0; e < s.length; ++e)t.addSubParam(s[e]);\n                            else t.addParam(s);\n                        }\n                        return t;\n                    }\n                    clone() {\n                        const e = new s(this.maxLength, this.maxSubParamsLength);\n                        return e.params.set(this.params), e.length = this.length, e._subParams.set(this._subParams), e._subParamsLength = this._subParamsLength, e._subParamsIdx.set(this._subParamsIdx), e._rejectDigits = this._rejectDigits, e._rejectSubDigits = this._rejectSubDigits, e._digitIsSub = this._digitIsSub, e;\n                    }\n                    toArray() {\n                        const e = [];\n                        for(let t = 0; t < this.length; ++t){\n                            e.push(this.params[t]);\n                            const i = this._subParamsIdx[t] >> 8, s = 255 & this._subParamsIdx[t];\n                            s - i > 0 && e.push(Array.prototype.slice.call(this._subParams, i, s));\n                        }\n                        return e;\n                    }\n                    reset() {\n                        this.length = 0, this._subParamsLength = 0, this._rejectDigits = !1, this._rejectSubDigits = !1, this._digitIsSub = !1;\n                    }\n                    addParam(e) {\n                        if (this._digitIsSub = !1, this.length >= this.maxLength) this._rejectDigits = !0;\n                        else {\n                            if (e < -1) throw new Error(\"values lesser than -1 are not allowed\");\n                            this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength, this.params[this.length++] = e > i ? i : e;\n                        }\n                    }\n                    addSubParam(e) {\n                        if (this._digitIsSub = !0, this.length) if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) this._rejectSubDigits = !0;\n                        else {\n                            if (e < -1) throw new Error(\"values lesser than -1 are not allowed\");\n                            this._subParams[this._subParamsLength++] = e > i ? i : e, this._subParamsIdx[this.length - 1]++;\n                        }\n                    }\n                    hasSubParams(e) {\n                        return (255 & this._subParamsIdx[e]) - (this._subParamsIdx[e] >> 8) > 0;\n                    }\n                    getSubParams(e) {\n                        const t = this._subParamsIdx[e] >> 8, i = 255 & this._subParamsIdx[e];\n                        return i - t > 0 ? this._subParams.subarray(t, i) : null;\n                    }\n                    getSubParamsAll() {\n                        const e = {};\n                        for(let t = 0; t < this.length; ++t){\n                            const i = this._subParamsIdx[t] >> 8, s = 255 & this._subParamsIdx[t];\n                            s - i > 0 && (e[t] = this._subParams.slice(i, s));\n                        }\n                        return e;\n                    }\n                    addDigit(e) {\n                        let t;\n                        if (this._rejectDigits || !(t = this._digitIsSub ? this._subParamsLength : this.length) || this._digitIsSub && this._rejectSubDigits) return;\n                        const s = this._digitIsSub ? this._subParams : this.params, r = s[t - 1];\n                        s[t - 1] = ~r ? Math.min(10 * r + e, i) : e;\n                    }\n                    constructor(e = 32, t = 32){\n                        if (this.maxLength = e, this.maxSubParamsLength = t, t > 256) throw new Error(\"maxSubParamsLength must not be greater than 256\");\n                        this.params = new Int32Array(e), this.length = 0, this._subParams = new Int32Array(t), this._subParamsLength = 0, this._subParamsIdx = new Uint16Array(e), this._rejectDigits = !1, this._rejectSubDigits = !1, this._digitIsSub = !1;\n                    }\n                }\n                t.Params = s;\n            },\n            5741: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.AddonManager = void 0, t.AddonManager = class {\n                    dispose() {\n                        for(let e = this._addons.length - 1; e >= 0; e--)this._addons[e].instance.dispose();\n                    }\n                    loadAddon(e, t) {\n                        const i = {\n                            instance: t,\n                            dispose: t.dispose,\n                            isDisposed: !1\n                        };\n                        this._addons.push(i), t.dispose = ()=>this._wrappedAddonDispose(i), t.activate(e);\n                    }\n                    _wrappedAddonDispose(e) {\n                        if (e.isDisposed) return;\n                        let t = -1;\n                        for(let i = 0; i < this._addons.length; i++)if (this._addons[i] === e) {\n                            t = i;\n                            break;\n                        }\n                        if (-1 === t) throw new Error(\"Could not dispose an addon that has not been loaded\");\n                        e.isDisposed = !0, e.dispose.apply(e.instance), this._addons.splice(t, 1);\n                    }\n                    constructor(){\n                        this._addons = [];\n                    }\n                };\n            },\n            8771: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.BufferApiView = void 0;\n                const s = i(3785), r = i(511);\n                t.BufferApiView = class {\n                    init(e) {\n                        return this._buffer = e, this;\n                    }\n                    get cursorY() {\n                        return this._buffer.y;\n                    }\n                    get cursorX() {\n                        return this._buffer.x;\n                    }\n                    get viewportY() {\n                        return this._buffer.ydisp;\n                    }\n                    get baseY() {\n                        return this._buffer.ybase;\n                    }\n                    get length() {\n                        return this._buffer.lines.length;\n                    }\n                    getLine(e) {\n                        const t = this._buffer.lines.get(e);\n                        if (t) return new s.BufferLineApiView(t);\n                    }\n                    getNullCell() {\n                        return new r.CellData;\n                    }\n                    constructor(e, t){\n                        this._buffer = e, this.type = t;\n                    }\n                };\n            },\n            3785: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.BufferLineApiView = void 0;\n                const s = i(511);\n                t.BufferLineApiView = class {\n                    get isWrapped() {\n                        return this._line.isWrapped;\n                    }\n                    get length() {\n                        return this._line.length;\n                    }\n                    getCell(e, t) {\n                        if (!(e < 0 || e >= this._line.length)) return t ? (this._line.loadCell(e, t), t) : this._line.loadCell(e, new s.CellData);\n                    }\n                    translateToString(e, t, i) {\n                        return this._line.translateToString(e, t, i);\n                    }\n                    constructor(e){\n                        this._line = e;\n                    }\n                };\n            },\n            8285: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.BufferNamespaceApi = void 0;\n                const s = i(8771), r = i(8460), n = i(844);\n                class o extends n.Disposable {\n                    get active() {\n                        if (this._core.buffers.active === this._core.buffers.normal) return this.normal;\n                        if (this._core.buffers.active === this._core.buffers.alt) return this.alternate;\n                        throw new Error(\"Active buffer is neither normal nor alternate\");\n                    }\n                    get normal() {\n                        return this._normal.init(this._core.buffers.normal);\n                    }\n                    get alternate() {\n                        return this._alternate.init(this._core.buffers.alt);\n                    }\n                    constructor(e){\n                        super(), this._core = e, this._onBufferChange = this.register(new r.EventEmitter), this.onBufferChange = this._onBufferChange.event, this._normal = new s.BufferApiView(this._core.buffers.normal, \"normal\"), this._alternate = new s.BufferApiView(this._core.buffers.alt, \"alternate\"), this._core.buffers.onBufferActivate(()=>this._onBufferChange.fire(this.active));\n                    }\n                }\n                t.BufferNamespaceApi = o;\n            },\n            7975: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.ParserApi = void 0, t.ParserApi = class {\n                    registerCsiHandler(e, t) {\n                        return this._core.registerCsiHandler(e, (e)=>t(e.toArray()));\n                    }\n                    addCsiHandler(e, t) {\n                        return this.registerCsiHandler(e, t);\n                    }\n                    registerDcsHandler(e, t) {\n                        return this._core.registerDcsHandler(e, (e, i)=>t(e, i.toArray()));\n                    }\n                    addDcsHandler(e, t) {\n                        return this.registerDcsHandler(e, t);\n                    }\n                    registerEscHandler(e, t) {\n                        return this._core.registerEscHandler(e, t);\n                    }\n                    addEscHandler(e, t) {\n                        return this.registerEscHandler(e, t);\n                    }\n                    registerOscHandler(e, t) {\n                        return this._core.registerOscHandler(e, t);\n                    }\n                    addOscHandler(e, t) {\n                        return this.registerOscHandler(e, t);\n                    }\n                    constructor(e){\n                        this._core = e;\n                    }\n                };\n            },\n            7090: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.UnicodeApi = void 0, t.UnicodeApi = class {\n                    register(e) {\n                        this._core.unicodeService.register(e);\n                    }\n                    get versions() {\n                        return this._core.unicodeService.versions;\n                    }\n                    get activeVersion() {\n                        return this._core.unicodeService.activeVersion;\n                    }\n                    set activeVersion(e) {\n                        this._core.unicodeService.activeVersion = e;\n                    }\n                    constructor(e){\n                        this._core = e;\n                    }\n                };\n            },\n            744: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.BufferService = t.MINIMUM_ROWS = t.MINIMUM_COLS = void 0;\n                const n = i(8460), o = i(844), a = i(5295), h = i(2585);\n                t.MINIMUM_COLS = 2, t.MINIMUM_ROWS = 1;\n                let c = t.BufferService = class extends o.Disposable {\n                    get buffer() {\n                        return this.buffers.active;\n                    }\n                    resize(e, t) {\n                        this.cols = e, this.rows = t, this.buffers.resize(e, t), this._onResize.fire({\n                            cols: e,\n                            rows: t\n                        });\n                    }\n                    reset() {\n                        this.buffers.reset(), this.isUserScrolling = !1;\n                    }\n                    scroll(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        const i = this.buffer;\n                        let s;\n                        s = this._cachedBlankLine, s && s.length === this.cols && s.getFg(0) === e.fg && s.getBg(0) === e.bg || (s = i.getBlankLine(e, t), this._cachedBlankLine = s), s.isWrapped = t;\n                        const r = i.ybase + i.scrollTop, n = i.ybase + i.scrollBottom;\n                        if (0 === i.scrollTop) {\n                            const e = i.lines.isFull;\n                            n === i.lines.length - 1 ? e ? i.lines.recycle().copyFrom(s) : i.lines.push(s.clone()) : i.lines.splice(n + 1, 0, s.clone()), e ? this.isUserScrolling && (i.ydisp = Math.max(i.ydisp - 1, 0)) : (i.ybase++, this.isUserScrolling || i.ydisp++);\n                        } else {\n                            const e = n - r + 1;\n                            i.lines.shiftElements(r + 1, e - 1, -1), i.lines.set(n, s.clone());\n                        }\n                        this.isUserScrolling || (i.ydisp = i.ybase), this._onScroll.fire(i.ydisp);\n                    }\n                    scrollLines(e, t, i) {\n                        const s = this.buffer;\n                        if (e < 0) {\n                            if (0 === s.ydisp) return;\n                            this.isUserScrolling = !0;\n                        } else e + s.ydisp >= s.ybase && (this.isUserScrolling = !1);\n                        const r = s.ydisp;\n                        s.ydisp = Math.max(Math.min(s.ydisp + e, s.ybase), 0), r !== s.ydisp && (t || this._onScroll.fire(s.ydisp));\n                    }\n                    constructor(e){\n                        super(), this.isUserScrolling = !1, this._onResize = this.register(new n.EventEmitter), this.onResize = this._onResize.event, this._onScroll = this.register(new n.EventEmitter), this.onScroll = this._onScroll.event, this.cols = Math.max(e.rawOptions.cols || 0, t.MINIMUM_COLS), this.rows = Math.max(e.rawOptions.rows || 0, t.MINIMUM_ROWS), this.buffers = this.register(new a.BufferSet(e, this));\n                    }\n                };\n                t.BufferService = c = s([\n                    r(0, h.IOptionsService)\n                ], c);\n            },\n            7994: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CharsetService = void 0, t.CharsetService = class {\n                    reset() {\n                        this.charset = void 0, this._charsets = [], this.glevel = 0;\n                    }\n                    setgLevel(e) {\n                        this.glevel = e, this.charset = this._charsets[e];\n                    }\n                    setgCharset(e, t) {\n                        this._charsets[e] = t, this.glevel === e && (this.charset = t);\n                    }\n                    constructor(){\n                        this.glevel = 0, this._charsets = [];\n                    }\n                };\n            },\n            1753: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CoreMouseService = void 0;\n                const n = i(2585), o = i(8460), a = i(844), h = {\n                    NONE: {\n                        events: 0,\n                        restrict: ()=>!1\n                    },\n                    X10: {\n                        events: 1,\n                        restrict: (e)=>4 !== e.button && 1 === e.action && (e.ctrl = !1, e.alt = !1, e.shift = !1, !0)\n                    },\n                    VT200: {\n                        events: 19,\n                        restrict: (e)=>32 !== e.action\n                    },\n                    DRAG: {\n                        events: 23,\n                        restrict: (e)=>32 !== e.action || 3 !== e.button\n                    },\n                    ANY: {\n                        events: 31,\n                        restrict: (e)=>!0\n                    }\n                };\n                function c(e, t) {\n                    let i = (e.ctrl ? 16 : 0) | (e.shift ? 4 : 0) | (e.alt ? 8 : 0);\n                    return 4 === e.button ? (i |= 64, i |= e.action) : (i |= 3 & e.button, 4 & e.button && (i |= 64), 8 & e.button && (i |= 128), 32 === e.action ? i |= 32 : 0 !== e.action || t || (i |= 3)), i;\n                }\n                const l = String.fromCharCode, d = {\n                    DEFAULT: (e)=>{\n                        const t = [\n                            c(e, !1) + 32,\n                            e.col + 32,\n                            e.row + 32\n                        ];\n                        return t[0] > 255 || t[1] > 255 || t[2] > 255 ? \"\" : \"\\x1b[M\".concat(l(t[0])).concat(l(t[1])).concat(l(t[2]));\n                    },\n                    SGR: (e)=>{\n                        const t = 0 === e.action && 4 !== e.button ? \"m\" : \"M\";\n                        return \"\\x1b[<\".concat(c(e, !0), \";\").concat(e.col, \";\").concat(e.row).concat(t);\n                    },\n                    SGR_PIXELS: (e)=>{\n                        const t = 0 === e.action && 4 !== e.button ? \"m\" : \"M\";\n                        return \"\\x1b[<\".concat(c(e, !0), \";\").concat(e.x, \";\").concat(e.y).concat(t);\n                    }\n                };\n                let _ = t.CoreMouseService = class extends a.Disposable {\n                    addProtocol(e, t) {\n                        this._protocols[e] = t;\n                    }\n                    addEncoding(e, t) {\n                        this._encodings[e] = t;\n                    }\n                    get activeProtocol() {\n                        return this._activeProtocol;\n                    }\n                    get areMouseEventsActive() {\n                        return 0 !== this._protocols[this._activeProtocol].events;\n                    }\n                    set activeProtocol(e) {\n                        if (!this._protocols[e]) throw new Error('unknown protocol \"'.concat(e, '\"'));\n                        this._activeProtocol = e, this._onProtocolChange.fire(this._protocols[e].events);\n                    }\n                    get activeEncoding() {\n                        return this._activeEncoding;\n                    }\n                    set activeEncoding(e) {\n                        if (!this._encodings[e]) throw new Error('unknown encoding \"'.concat(e, '\"'));\n                        this._activeEncoding = e;\n                    }\n                    reset() {\n                        this.activeProtocol = \"NONE\", this.activeEncoding = \"DEFAULT\", this._lastEvent = null;\n                    }\n                    triggerMouseEvent(e) {\n                        if (e.col < 0 || e.col >= this._bufferService.cols || e.row < 0 || e.row >= this._bufferService.rows) return !1;\n                        if (4 === e.button && 32 === e.action) return !1;\n                        if (3 === e.button && 32 !== e.action) return !1;\n                        if (4 !== e.button && (2 === e.action || 3 === e.action)) return !1;\n                        if (e.col++, e.row++, 32 === e.action && this._lastEvent && this._equalEvents(this._lastEvent, e, \"SGR_PIXELS\" === this._activeEncoding)) return !1;\n                        if (!this._protocols[this._activeProtocol].restrict(e)) return !1;\n                        const t = this._encodings[this._activeEncoding](e);\n                        return t && (\"DEFAULT\" === this._activeEncoding ? this._coreService.triggerBinaryEvent(t) : this._coreService.triggerDataEvent(t, !0)), this._lastEvent = e, !0;\n                    }\n                    explainEvents(e) {\n                        return {\n                            down: !!(1 & e),\n                            up: !!(2 & e),\n                            drag: !!(4 & e),\n                            move: !!(8 & e),\n                            wheel: !!(16 & e)\n                        };\n                    }\n                    _equalEvents(e, t, i) {\n                        if (i) {\n                            if (e.x !== t.x) return !1;\n                            if (e.y !== t.y) return !1;\n                        } else {\n                            if (e.col !== t.col) return !1;\n                            if (e.row !== t.row) return !1;\n                        }\n                        return e.button === t.button && e.action === t.action && e.ctrl === t.ctrl && e.alt === t.alt && e.shift === t.shift;\n                    }\n                    constructor(e, t){\n                        super(), this._bufferService = e, this._coreService = t, this._protocols = {}, this._encodings = {}, this._activeProtocol = \"\", this._activeEncoding = \"\", this._lastEvent = null, this._onProtocolChange = this.register(new o.EventEmitter), this.onProtocolChange = this._onProtocolChange.event;\n                        for (const e of Object.keys(h))this.addProtocol(e, h[e]);\n                        for (const e of Object.keys(d))this.addEncoding(e, d[e]);\n                        this.reset();\n                    }\n                };\n                t.CoreMouseService = _ = s([\n                    r(0, n.IBufferService),\n                    r(1, n.ICoreService)\n                ], _);\n            },\n            6975: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.CoreService = void 0;\n                const n = i(1439), o = i(8460), a = i(844), h = i(2585), c = Object.freeze({\n                    insertMode: !1\n                }), l = Object.freeze({\n                    applicationCursorKeys: !1,\n                    applicationKeypad: !1,\n                    bracketedPasteMode: !1,\n                    origin: !1,\n                    reverseWraparound: !1,\n                    sendFocus: !1,\n                    wraparound: !0\n                });\n                let d = t.CoreService = class extends a.Disposable {\n                    reset() {\n                        this.modes = (0, n.clone)(c), this.decPrivateModes = (0, n.clone)(l);\n                    }\n                    triggerDataEvent(e) {\n                        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                        if (this._optionsService.rawOptions.disableStdin) return;\n                        const i = this._bufferService.buffer;\n                        t && this._optionsService.rawOptions.scrollOnUserInput && i.ybase !== i.ydisp && this._onRequestScrollToBottom.fire(), t && this._onUserInput.fire(), this._logService.debug('sending data \"'.concat(e, '\"'), ()=>e.split(\"\").map((e)=>e.charCodeAt(0))), this._onData.fire(e);\n                    }\n                    triggerBinaryEvent(e) {\n                        this._optionsService.rawOptions.disableStdin || (this._logService.debug('sending binary \"'.concat(e, '\"'), ()=>e.split(\"\").map((e)=>e.charCodeAt(0))), this._onBinary.fire(e));\n                    }\n                    constructor(e, t, i){\n                        super(), this._bufferService = e, this._logService = t, this._optionsService = i, this.isCursorInitialized = !1, this.isCursorHidden = !1, this._onData = this.register(new o.EventEmitter), this.onData = this._onData.event, this._onUserInput = this.register(new o.EventEmitter), this.onUserInput = this._onUserInput.event, this._onBinary = this.register(new o.EventEmitter), this.onBinary = this._onBinary.event, this._onRequestScrollToBottom = this.register(new o.EventEmitter), this.onRequestScrollToBottom = this._onRequestScrollToBottom.event, this.modes = (0, n.clone)(c), this.decPrivateModes = (0, n.clone)(l);\n                    }\n                };\n                t.CoreService = d = s([\n                    r(0, h.IBufferService),\n                    r(1, h.ILogService),\n                    r(2, h.IOptionsService)\n                ], d);\n            },\n            9074: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.DecorationService = void 0;\n                const s = i(8055), r = i(8460), n = i(844), o = i(6106);\n                let a = 0, h = 0;\n                class c extends n.Disposable {\n                    get decorations() {\n                        return this._decorations.values();\n                    }\n                    registerDecoration(e) {\n                        if (e.marker.isDisposed) return;\n                        const t = new l(e);\n                        if (t) {\n                            const e = t.marker.onDispose(()=>t.dispose());\n                            t.onDispose(()=>{\n                                t && (this._decorations.delete(t) && this._onDecorationRemoved.fire(t), e.dispose());\n                            }), this._decorations.insert(t), this._onDecorationRegistered.fire(t);\n                        }\n                        return t;\n                    }\n                    reset() {\n                        for (const e of this._decorations.values())e.dispose();\n                        this._decorations.clear();\n                    }\n                    *getDecorationsAtCell(e, t, i) {\n                        var s, r, n;\n                        let o = 0, a = 0;\n                        for (const h of this._decorations.getKeyIterator(t))o = null !== (s = h.options.x) && void 0 !== s ? s : 0, a = o + (null !== (r = h.options.width) && void 0 !== r ? r : 1), e >= o && e < a && (!i || (null !== (n = h.options.layer) && void 0 !== n ? n : \"bottom\") === i) && (yield h);\n                    }\n                    forEachDecorationAtCell(e, t, i, s) {\n                        this._decorations.forEachByKey(t, (t)=>{\n                            var r, n, o;\n                            a = null !== (r = t.options.x) && void 0 !== r ? r : 0, h = a + (null !== (n = t.options.width) && void 0 !== n ? n : 1), e >= a && e < h && (!i || (null !== (o = t.options.layer) && void 0 !== o ? o : \"bottom\") === i) && s(t);\n                        });\n                    }\n                    constructor(){\n                        super(), this._decorations = new o.SortedList((e)=>null == e ? void 0 : e.marker.line), this._onDecorationRegistered = this.register(new r.EventEmitter), this.onDecorationRegistered = this._onDecorationRegistered.event, this._onDecorationRemoved = this.register(new r.EventEmitter), this.onDecorationRemoved = this._onDecorationRemoved.event, this.register((0, n.toDisposable)(()=>this.reset()));\n                    }\n                }\n                t.DecorationService = c;\n                class l extends n.Disposable {\n                    get isDisposed() {\n                        return this._isDisposed;\n                    }\n                    get backgroundColorRGB() {\n                        return null === this._cachedBg && (this.options.backgroundColor ? this._cachedBg = s.css.toColor(this.options.backgroundColor) : this._cachedBg = void 0), this._cachedBg;\n                    }\n                    get foregroundColorRGB() {\n                        return null === this._cachedFg && (this.options.foregroundColor ? this._cachedFg = s.css.toColor(this.options.foregroundColor) : this._cachedFg = void 0), this._cachedFg;\n                    }\n                    dispose() {\n                        this._onDispose.fire(), super.dispose();\n                    }\n                    constructor(e){\n                        super(), this.options = e, this.onRenderEmitter = this.register(new r.EventEmitter), this.onRender = this.onRenderEmitter.event, this._onDispose = this.register(new r.EventEmitter), this.onDispose = this._onDispose.event, this._cachedBg = null, this._cachedFg = null, this.marker = e.marker, this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position && (this.options.overviewRulerOptions.position = \"full\");\n                    }\n                }\n            },\n            4348: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.InstantiationService = t.ServiceCollection = void 0;\n                const s = i(2585), r = i(8343);\n                class n {\n                    set(e, t) {\n                        const i = this._entries.get(e);\n                        return this._entries.set(e, t), i;\n                    }\n                    forEach(e) {\n                        for (const [t, i] of this._entries.entries())e(t, i);\n                    }\n                    has(e) {\n                        return this._entries.has(e);\n                    }\n                    get(e) {\n                        return this._entries.get(e);\n                    }\n                    constructor(...e){\n                        this._entries = new Map;\n                        for (const [t, i] of e)this.set(t, i);\n                    }\n                }\n                t.ServiceCollection = n, t.InstantiationService = class {\n                    setService(e, t) {\n                        this._services.set(e, t);\n                    }\n                    getService(e) {\n                        return this._services.get(e);\n                    }\n                    createInstance(e) {\n                        for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            t[_key - 1] = arguments[_key];\n                        }\n                        const i = (0, r.getServiceDependencies)(e).sort((e, t)=>e.index - t.index), s = [];\n                        for (const t of i){\n                            const i = this._services.get(t.id);\n                            if (!i) throw new Error(\"[createInstance] \".concat(e.name, \" depends on UNKNOWN service \").concat(t.id, \".\"));\n                            s.push(i);\n                        }\n                        const n = i.length > 0 ? i[0].index : t.length;\n                        if (t.length !== n) throw new Error(\"[createInstance] First service dependency of \".concat(e.name, \" at position \").concat(n + 1, \" conflicts with \").concat(t.length, \" static arguments\"));\n                        return new e(...[\n                            ...t,\n                            ...s\n                        ]);\n                    }\n                    constructor(){\n                        this._services = new n, this._services.set(s.IInstantiationService, this);\n                    }\n                };\n            },\n            7866: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.traceCall = t.setTraceLogger = t.LogService = void 0;\n                const n = i(844), o = i(2585), a = {\n                    trace: o.LogLevelEnum.TRACE,\n                    debug: o.LogLevelEnum.DEBUG,\n                    info: o.LogLevelEnum.INFO,\n                    warn: o.LogLevelEnum.WARN,\n                    error: o.LogLevelEnum.ERROR,\n                    off: o.LogLevelEnum.OFF\n                };\n                let h, c = t.LogService = class extends n.Disposable {\n                    get logLevel() {\n                        return this._logLevel;\n                    }\n                    _updateLogLevel() {\n                        this._logLevel = a[this._optionsService.rawOptions.logLevel];\n                    }\n                    _evalLazyOptionalParams(e) {\n                        for(let t = 0; t < e.length; t++)\"function\" == typeof e[t] && (e[t] = e[t]());\n                    }\n                    _log(e, t, i) {\n                        this._evalLazyOptionalParams(i), e.call(console, (this._optionsService.options.logger ? \"\" : \"xterm.js: \") + t, ...i);\n                    }\n                    trace(e) {\n                        for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            t[_key - 1] = arguments[_key];\n                        }\n                        var i, s;\n                        this._logLevel <= o.LogLevelEnum.TRACE && this._log(null !== (s = null === (i = this._optionsService.options.logger) || void 0 === i ? void 0 : i.trace.bind(this._optionsService.options.logger)) && void 0 !== s ? s : console.log, e, t);\n                    }\n                    debug(e) {\n                        for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            t[_key - 1] = arguments[_key];\n                        }\n                        var i, s;\n                        this._logLevel <= o.LogLevelEnum.DEBUG && this._log(null !== (s = null === (i = this._optionsService.options.logger) || void 0 === i ? void 0 : i.debug.bind(this._optionsService.options.logger)) && void 0 !== s ? s : console.log, e, t);\n                    }\n                    info(e) {\n                        for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            t[_key - 1] = arguments[_key];\n                        }\n                        var i, s;\n                        this._logLevel <= o.LogLevelEnum.INFO && this._log(null !== (s = null === (i = this._optionsService.options.logger) || void 0 === i ? void 0 : i.info.bind(this._optionsService.options.logger)) && void 0 !== s ? s : console.info, e, t);\n                    }\n                    warn(e) {\n                        for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            t[_key - 1] = arguments[_key];\n                        }\n                        var i, s;\n                        this._logLevel <= o.LogLevelEnum.WARN && this._log(null !== (s = null === (i = this._optionsService.options.logger) || void 0 === i ? void 0 : i.warn.bind(this._optionsService.options.logger)) && void 0 !== s ? s : console.warn, e, t);\n                    }\n                    error(e) {\n                        for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                            t[_key - 1] = arguments[_key];\n                        }\n                        var i, s;\n                        this._logLevel <= o.LogLevelEnum.ERROR && this._log(null !== (s = null === (i = this._optionsService.options.logger) || void 0 === i ? void 0 : i.error.bind(this._optionsService.options.logger)) && void 0 !== s ? s : console.error, e, t);\n                    }\n                    constructor(e){\n                        super(), this._optionsService = e, this._logLevel = o.LogLevelEnum.OFF, this._updateLogLevel(), this.register(this._optionsService.onSpecificOptionChange(\"logLevel\", ()=>this._updateLogLevel())), h = this;\n                    }\n                };\n                t.LogService = c = s([\n                    r(0, o.IOptionsService)\n                ], c), t.setTraceLogger = function(e) {\n                    h = e;\n                }, t.traceCall = function(e, t, i) {\n                    if (\"function\" != typeof i.value) throw new Error(\"not supported\");\n                    const s = i.value;\n                    i.value = function() {\n                        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n                            e[_key] = arguments[_key];\n                        }\n                        if (h.logLevel !== o.LogLevelEnum.TRACE) return s.apply(this, e);\n                        h.trace(\"GlyphRenderer#\".concat(s.name, \"(\").concat(e.map((e)=>JSON.stringify(e)).join(\", \"), \")\"));\n                        const t = s.apply(this, e);\n                        return h.trace(\"GlyphRenderer#\".concat(s.name, \" return\"), t), t;\n                    };\n                };\n            },\n            7302: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.OptionsService = t.DEFAULT_OPTIONS = void 0;\n                const s = i(8460), r = i(844), n = i(6114);\n                t.DEFAULT_OPTIONS = {\n                    cols: 80,\n                    rows: 24,\n                    cursorBlink: !1,\n                    cursorStyle: \"block\",\n                    cursorWidth: 1,\n                    cursorInactiveStyle: \"outline\",\n                    customGlyphs: !0,\n                    drawBoldTextInBrightColors: !0,\n                    fastScrollModifier: \"alt\",\n                    fastScrollSensitivity: 5,\n                    fontFamily: \"courier-new, courier, monospace\",\n                    fontSize: 15,\n                    fontWeight: \"normal\",\n                    fontWeightBold: \"bold\",\n                    ignoreBracketedPasteMode: !1,\n                    lineHeight: 1,\n                    letterSpacing: 0,\n                    linkHandler: null,\n                    logLevel: \"info\",\n                    logger: null,\n                    scrollback: 1e3,\n                    scrollOnUserInput: !0,\n                    scrollSensitivity: 1,\n                    screenReaderMode: !1,\n                    smoothScrollDuration: 0,\n                    macOptionIsMeta: !1,\n                    macOptionClickForcesSelection: !1,\n                    minimumContrastRatio: 1,\n                    disableStdin: !1,\n                    allowProposedApi: !1,\n                    allowTransparency: !1,\n                    tabStopWidth: 8,\n                    theme: {},\n                    rightClickSelectsWord: n.isMac,\n                    windowOptions: {},\n                    windowsMode: !1,\n                    windowsPty: {},\n                    wordSeparator: \" ()[]{}',\\\"`\",\n                    altClickMovesCursor: !0,\n                    convertEol: !1,\n                    termName: \"xterm\",\n                    cancelEvents: !1,\n                    overviewRulerWidth: 0\n                };\n                const o = [\n                    \"normal\",\n                    \"bold\",\n                    \"100\",\n                    \"200\",\n                    \"300\",\n                    \"400\",\n                    \"500\",\n                    \"600\",\n                    \"700\",\n                    \"800\",\n                    \"900\"\n                ];\n                class a extends r.Disposable {\n                    onSpecificOptionChange(e, t) {\n                        return this.onOptionChange((i)=>{\n                            i === e && t(this.rawOptions[e]);\n                        });\n                    }\n                    onMultipleOptionChange(e, t) {\n                        return this.onOptionChange((i)=>{\n                            -1 !== e.indexOf(i) && t();\n                        });\n                    }\n                    _setupOptions() {\n                        const e = (e)=>{\n                            if (!(e in t.DEFAULT_OPTIONS)) throw new Error('No option with key \"'.concat(e, '\"'));\n                            return this.rawOptions[e];\n                        }, i = (e, i)=>{\n                            if (!(e in t.DEFAULT_OPTIONS)) throw new Error('No option with key \"'.concat(e, '\"'));\n                            i = this._sanitizeAndValidateOption(e, i), this.rawOptions[e] !== i && (this.rawOptions[e] = i, this._onOptionChange.fire(e));\n                        };\n                        for(const t in this.rawOptions){\n                            const s = {\n                                get: e.bind(this, t),\n                                set: i.bind(this, t)\n                            };\n                            Object.defineProperty(this.options, t, s);\n                        }\n                    }\n                    _sanitizeAndValidateOption(e, i) {\n                        switch(e){\n                            case \"cursorStyle\":\n                                if (i || (i = t.DEFAULT_OPTIONS[e]), !function(e) {\n                                    return \"block\" === e || \"underline\" === e || \"bar\" === e;\n                                }(i)) throw new Error('\"'.concat(i, '\" is not a valid value for ').concat(e));\n                                break;\n                            case \"wordSeparator\":\n                                i || (i = t.DEFAULT_OPTIONS[e]);\n                                break;\n                            case \"fontWeight\":\n                            case \"fontWeightBold\":\n                                if (\"number\" == typeof i && 1 <= i && i <= 1e3) break;\n                                i = o.includes(i) ? i : t.DEFAULT_OPTIONS[e];\n                                break;\n                            case \"cursorWidth\":\n                                i = Math.floor(i);\n                            case \"lineHeight\":\n                            case \"tabStopWidth\":\n                                if (i < 1) throw new Error(\"\".concat(e, \" cannot be less than 1, value: \").concat(i));\n                                break;\n                            case \"minimumContrastRatio\":\n                                i = Math.max(1, Math.min(21, Math.round(10 * i) / 10));\n                                break;\n                            case \"scrollback\":\n                                if ((i = Math.min(i, 4294967295)) < 0) throw new Error(\"\".concat(e, \" cannot be less than 0, value: \").concat(i));\n                                break;\n                            case \"fastScrollSensitivity\":\n                            case \"scrollSensitivity\":\n                                if (i <= 0) throw new Error(\"\".concat(e, \" cannot be less than or equal to 0, value: \").concat(i));\n                                break;\n                            case \"rows\":\n                            case \"cols\":\n                                if (!i && 0 !== i) throw new Error(\"\".concat(e, \" must be numeric, value: \").concat(i));\n                                break;\n                            case \"windowsPty\":\n                                i = null != i ? i : {};\n                        }\n                        return i;\n                    }\n                    constructor(e){\n                        super(), this._onOptionChange = this.register(new s.EventEmitter), this.onOptionChange = this._onOptionChange.event;\n                        const i = Object.assign({}, t.DEFAULT_OPTIONS);\n                        for(const t in e)if (t in i) try {\n                            const s = e[t];\n                            i[t] = this._sanitizeAndValidateOption(t, s);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                        this.rawOptions = i, this.options = Object.assign({}, i), this._setupOptions();\n                    }\n                }\n                t.OptionsService = a;\n            },\n            2660: function(e, t, i) {\n                var s = this && this.__decorate || function(e, t, i, s) {\n                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;\n                    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);\n                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);\n                    return n > 3 && o && Object.defineProperty(t, i, o), o;\n                }, r = this && this.__param || function(e, t) {\n                    return function(i, s) {\n                        t(i, s, e);\n                    };\n                };\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.OscLinkService = void 0;\n                const n = i(2585);\n                let o = t.OscLinkService = class {\n                    registerLink(e) {\n                        const t = this._bufferService.buffer;\n                        if (void 0 === e.id) {\n                            const i = t.addMarker(t.ybase + t.y), s = {\n                                data: e,\n                                id: this._nextId++,\n                                lines: [\n                                    i\n                                ]\n                            };\n                            return i.onDispose(()=>this._removeMarkerFromLink(s, i)), this._dataByLinkId.set(s.id, s), s.id;\n                        }\n                        const i = e, s = this._getEntryIdKey(i), r = this._entriesWithId.get(s);\n                        if (r) return this.addLineToLink(r.id, t.ybase + t.y), r.id;\n                        const n = t.addMarker(t.ybase + t.y), o = {\n                            id: this._nextId++,\n                            key: this._getEntryIdKey(i),\n                            data: i,\n                            lines: [\n                                n\n                            ]\n                        };\n                        return n.onDispose(()=>this._removeMarkerFromLink(o, n)), this._entriesWithId.set(o.key, o), this._dataByLinkId.set(o.id, o), o.id;\n                    }\n                    addLineToLink(e, t) {\n                        const i = this._dataByLinkId.get(e);\n                        if (i && i.lines.every((e)=>e.line !== t)) {\n                            const e = this._bufferService.buffer.addMarker(t);\n                            i.lines.push(e), e.onDispose(()=>this._removeMarkerFromLink(i, e));\n                        }\n                    }\n                    getLinkData(e) {\n                        var t;\n                        return null === (t = this._dataByLinkId.get(e)) || void 0 === t ? void 0 : t.data;\n                    }\n                    _getEntryIdKey(e) {\n                        return \"\".concat(e.id, \";;\").concat(e.uri);\n                    }\n                    _removeMarkerFromLink(e, t) {\n                        const i = e.lines.indexOf(t);\n                        -1 !== i && (e.lines.splice(i, 1), 0 === e.lines.length && (void 0 !== e.data.id && this._entriesWithId.delete(e.key), this._dataByLinkId.delete(e.id)));\n                    }\n                    constructor(e){\n                        this._bufferService = e, this._nextId = 1, this._entriesWithId = new Map, this._dataByLinkId = new Map;\n                    }\n                };\n                t.OscLinkService = o = s([\n                    r(0, n.IBufferService)\n                ], o);\n            },\n            8343: (e, t)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.createDecorator = t.getServiceDependencies = t.serviceRegistry = void 0;\n                const i = \"di$target\", s = \"di$dependencies\";\n                t.serviceRegistry = new Map, t.getServiceDependencies = function(e) {\n                    return e[s] || [];\n                }, t.createDecorator = function(e) {\n                    if (t.serviceRegistry.has(e)) return t.serviceRegistry.get(e);\n                    const r = function(e, t, n) {\n                        if (3 !== arguments.length) throw new Error(\"@IServiceName-decorator can only be used to decorate a parameter\");\n                        !function(e, t, r) {\n                            t[i] === t ? t[s].push({\n                                id: e,\n                                index: r\n                            }) : (t[s] = [\n                                {\n                                    id: e,\n                                    index: r\n                                }\n                            ], t[i] = t);\n                        }(r, e, n);\n                    };\n                    return r.toString = ()=>e, t.serviceRegistry.set(e, r), r;\n                };\n            },\n            2585: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.IDecorationService = t.IUnicodeService = t.IOscLinkService = t.IOptionsService = t.ILogService = t.LogLevelEnum = t.IInstantiationService = t.ICharsetService = t.ICoreService = t.ICoreMouseService = t.IBufferService = void 0;\n                const s = i(8343);\n                var r;\n                t.IBufferService = (0, s.createDecorator)(\"BufferService\"), t.ICoreMouseService = (0, s.createDecorator)(\"CoreMouseService\"), t.ICoreService = (0, s.createDecorator)(\"CoreService\"), t.ICharsetService = (0, s.createDecorator)(\"CharsetService\"), t.IInstantiationService = (0, s.createDecorator)(\"InstantiationService\"), function(e) {\n                    e[e.TRACE = 0] = \"TRACE\", e[e.DEBUG = 1] = \"DEBUG\", e[e.INFO = 2] = \"INFO\", e[e.WARN = 3] = \"WARN\", e[e.ERROR = 4] = \"ERROR\", e[e.OFF = 5] = \"OFF\";\n                }(r || (t.LogLevelEnum = r = {})), t.ILogService = (0, s.createDecorator)(\"LogService\"), t.IOptionsService = (0, s.createDecorator)(\"OptionsService\"), t.IOscLinkService = (0, s.createDecorator)(\"OscLinkService\"), t.IUnicodeService = (0, s.createDecorator)(\"UnicodeService\"), t.IDecorationService = (0, s.createDecorator)(\"DecorationService\");\n            },\n            1480: (e, t, i)=>{\n                Object.defineProperty(t, \"__esModule\", {\n                    value: !0\n                }), t.UnicodeService = void 0;\n                const s = i(8460), r = i(225);\n                t.UnicodeService = class {\n                    dispose() {\n                        this._onChange.dispose();\n                    }\n                    get versions() {\n                        return Object.keys(this._providers);\n                    }\n                    get activeVersion() {\n                        return this._active;\n                    }\n                    set activeVersion(e) {\n                        if (!this._providers[e]) throw new Error('unknown Unicode version \"'.concat(e, '\"'));\n                        this._active = e, this._activeProvider = this._providers[e], this._onChange.fire(e);\n                    }\n                    register(e) {\n                        this._providers[e.version] = e;\n                    }\n                    wcwidth(e) {\n                        return this._activeProvider.wcwidth(e);\n                    }\n                    getStringCellWidth(e) {\n                        let t = 0;\n                        const i = e.length;\n                        for(let s = 0; s < i; ++s){\n                            let r = e.charCodeAt(s);\n                            if (55296 <= r && r <= 56319) {\n                                if (++s >= i) return t + this.wcwidth(r);\n                                const n = e.charCodeAt(s);\n                                56320 <= n && n <= 57343 ? r = 1024 * (r - 55296) + n - 56320 + 65536 : t += this.wcwidth(n);\n                            }\n                            t += this.wcwidth(r);\n                        }\n                        return t;\n                    }\n                    constructor(){\n                        this._providers = Object.create(null), this._active = \"\", this._onChange = new s.EventEmitter, this.onChange = this._onChange.event;\n                        const e = new r.UnicodeV6;\n                        this.register(e), this._active = e.version, this._activeProvider = e;\n                    }\n                };\n            }\n        }, t = {};\n        function i(s) {\n            var r = t[s];\n            if (void 0 !== r) return r.exports;\n            var n = t[s] = {\n                exports: {}\n            };\n            return e[s].call(n.exports, n, n.exports, i), n.exports;\n        }\n        var s = {};\n        return (()=>{\n            var e = s;\n            Object.defineProperty(e, \"__esModule\", {\n                value: !0\n            }), e.Terminal = void 0;\n            const t = i(9042), r = i(3236), n = i(844), o = i(5741), a = i(8285), h = i(7975), c = i(7090), l = [\n                \"cols\",\n                \"rows\"\n            ];\n            class d extends n.Disposable {\n                _checkReadonlyOptions(e) {\n                    if (l.includes(e)) throw new Error('Option \"'.concat(e, '\" can only be set in the constructor'));\n                }\n                _checkProposedApi() {\n                    if (!this._core.optionsService.rawOptions.allowProposedApi) throw new Error(\"You must set the allowProposedApi option to true to use proposed API\");\n                }\n                get onBell() {\n                    return this._core.onBell;\n                }\n                get onBinary() {\n                    return this._core.onBinary;\n                }\n                get onCursorMove() {\n                    return this._core.onCursorMove;\n                }\n                get onData() {\n                    return this._core.onData;\n                }\n                get onKey() {\n                    return this._core.onKey;\n                }\n                get onLineFeed() {\n                    return this._core.onLineFeed;\n                }\n                get onRender() {\n                    return this._core.onRender;\n                }\n                get onResize() {\n                    return this._core.onResize;\n                }\n                get onScroll() {\n                    return this._core.onScroll;\n                }\n                get onSelectionChange() {\n                    return this._core.onSelectionChange;\n                }\n                get onTitleChange() {\n                    return this._core.onTitleChange;\n                }\n                get onWriteParsed() {\n                    return this._core.onWriteParsed;\n                }\n                get element() {\n                    return this._core.element;\n                }\n                get parser() {\n                    return this._parser || (this._parser = new h.ParserApi(this._core)), this._parser;\n                }\n                get unicode() {\n                    return this._checkProposedApi(), new c.UnicodeApi(this._core);\n                }\n                get textarea() {\n                    return this._core.textarea;\n                }\n                get rows() {\n                    return this._core.rows;\n                }\n                get cols() {\n                    return this._core.cols;\n                }\n                get buffer() {\n                    return this._buffer || (this._buffer = this.register(new a.BufferNamespaceApi(this._core))), this._buffer;\n                }\n                get markers() {\n                    return this._checkProposedApi(), this._core.markers;\n                }\n                get modes() {\n                    const e = this._core.coreService.decPrivateModes;\n                    let t = \"none\";\n                    switch(this._core.coreMouseService.activeProtocol){\n                        case \"X10\":\n                            t = \"x10\";\n                            break;\n                        case \"VT200\":\n                            t = \"vt200\";\n                            break;\n                        case \"DRAG\":\n                            t = \"drag\";\n                            break;\n                        case \"ANY\":\n                            t = \"any\";\n                    }\n                    return {\n                        applicationCursorKeysMode: e.applicationCursorKeys,\n                        applicationKeypadMode: e.applicationKeypad,\n                        bracketedPasteMode: e.bracketedPasteMode,\n                        insertMode: this._core.coreService.modes.insertMode,\n                        mouseTrackingMode: t,\n                        originMode: e.origin,\n                        reverseWraparoundMode: e.reverseWraparound,\n                        sendFocusMode: e.sendFocus,\n                        wraparoundMode: e.wraparound\n                    };\n                }\n                get options() {\n                    return this._publicOptions;\n                }\n                set options(e) {\n                    for(const t in e)this._publicOptions[t] = e[t];\n                }\n                blur() {\n                    this._core.blur();\n                }\n                focus() {\n                    this._core.focus();\n                }\n                resize(e, t) {\n                    this._verifyIntegers(e, t), this._core.resize(e, t);\n                }\n                open(e) {\n                    this._core.open(e);\n                }\n                attachCustomKeyEventHandler(e) {\n                    this._core.attachCustomKeyEventHandler(e);\n                }\n                registerLinkProvider(e) {\n                    return this._core.registerLinkProvider(e);\n                }\n                registerCharacterJoiner(e) {\n                    return this._checkProposedApi(), this._core.registerCharacterJoiner(e);\n                }\n                deregisterCharacterJoiner(e) {\n                    this._checkProposedApi(), this._core.deregisterCharacterJoiner(e);\n                }\n                registerMarker() {\n                    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n                    return this._verifyIntegers(e), this._core.registerMarker(e);\n                }\n                registerDecoration(e) {\n                    var t, i, s;\n                    return this._checkProposedApi(), this._verifyPositiveIntegers(null !== (t = e.x) && void 0 !== t ? t : 0, null !== (i = e.width) && void 0 !== i ? i : 0, null !== (s = e.height) && void 0 !== s ? s : 0), this._core.registerDecoration(e);\n                }\n                hasSelection() {\n                    return this._core.hasSelection();\n                }\n                select(e, t, i) {\n                    this._verifyIntegers(e, t, i), this._core.select(e, t, i);\n                }\n                getSelection() {\n                    return this._core.getSelection();\n                }\n                getSelectionPosition() {\n                    return this._core.getSelectionPosition();\n                }\n                clearSelection() {\n                    this._core.clearSelection();\n                }\n                selectAll() {\n                    this._core.selectAll();\n                }\n                selectLines(e, t) {\n                    this._verifyIntegers(e, t), this._core.selectLines(e, t);\n                }\n                dispose() {\n                    super.dispose();\n                }\n                scrollLines(e) {\n                    this._verifyIntegers(e), this._core.scrollLines(e);\n                }\n                scrollPages(e) {\n                    this._verifyIntegers(e), this._core.scrollPages(e);\n                }\n                scrollToTop() {\n                    this._core.scrollToTop();\n                }\n                scrollToBottom() {\n                    this._core.scrollToBottom();\n                }\n                scrollToLine(e) {\n                    this._verifyIntegers(e), this._core.scrollToLine(e);\n                }\n                clear() {\n                    this._core.clear();\n                }\n                write(e, t) {\n                    this._core.write(e, t);\n                }\n                writeln(e, t) {\n                    this._core.write(e), this._core.write(\"\\r\\n\", t);\n                }\n                paste(e) {\n                    this._core.paste(e);\n                }\n                refresh(e, t) {\n                    this._verifyIntegers(e, t), this._core.refresh(e, t);\n                }\n                reset() {\n                    this._core.reset();\n                }\n                clearTextureAtlas() {\n                    this._core.clearTextureAtlas();\n                }\n                loadAddon(e) {\n                    this._addonManager.loadAddon(this, e);\n                }\n                static get strings() {\n                    return t;\n                }\n                _verifyIntegers() {\n                    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n                        e[_key] = arguments[_key];\n                    }\n                    for (const t of e)if (t === 1 / 0 || isNaN(t) || t % 1 != 0) throw new Error(\"This API only accepts integers\");\n                }\n                _verifyPositiveIntegers() {\n                    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n                        e[_key] = arguments[_key];\n                    }\n                    for (const t of e)if (t && (t === 1 / 0 || isNaN(t) || t % 1 != 0 || t < 0)) throw new Error(\"This API only accepts positive integers\");\n                }\n                constructor(e){\n                    super(), this._core = this.register(new r.Terminal(e)), this._addonManager = this.register(new o.AddonManager), this._publicOptions = Object.assign({}, this._core.options);\n                    const t = (e)=>this._core.options[e], i = (e, t)=>{\n                        this._checkReadonlyOptions(e), this._core.options[e] = t;\n                    };\n                    for(const e in this._core.options){\n                        const s = {\n                            get: t.bind(this, e),\n                            set: i.bind(this, e)\n                        };\n                        Object.defineProperty(this._publicOptions, e, s);\n                    }\n                }\n            }\n            e.Terminal = d;\n        })(), s;\n    })()); //# sourceMappingURL=xterm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/xterm/lib/xterm.js\n"));

/***/ })

}]);